{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy/master?urlpath=lab/tree/spectrum_pipe.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_pipe.ipynb](../_static/notebooks/spectrum_pipe.ipynb) |\n",
    "[spectrum_pipe.py](../_static/notebooks/spectrum_pipe.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum analysis with Gammapy (run pipeline)\n",
    "\n",
    "In this tutorial we will learn how to perform a 1d spectral analysis.\n",
    "\n",
    "We will use a \"pipeline\" or \"workflow\" class to run a standard analysis. If you're interested in implementation detail of the analysis in order to create a custom analysis class, you should read ([spectrum_analysis.ipynb](spectrum_analysis.ipynb)) that executes the analysis using lower-level classes and methods in Gammapy. \n",
    "\n",
    "In this tutorial we will use the folling Gammapy classes:\n",
    "\n",
    "- [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst) to load the data to \n",
    "- [gammapy.scripts.SpectrumAnalysisIACT](..\/api/gammapy.scripts.SpectrumAnalysisIACT.rst) to run the analysis\n",
    "\n",
    "We use 4 Crab observations from H.E.S.S. for testing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup for the notebook, and import the functionality we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion\n",
    "\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.scripts import SpectrumAnalysisIACT\n",
    "from gammapy.catalog import SourceCatalogGammaCat\n",
    "from gammapy.maps import Map\n",
    "from gammapy.spectrum.models import LogParabola\n",
    "from gammapy.spectrum import CrabSpectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select data\n",
    "\n",
    "First, we select and load some H.E.S.S. data (simulated events for now). In real life you would do something fancy here, or just use the list of observations someone send you (and hope they have done something fancy before). We'll just use the standard gammapy 4 crab runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23523 23526 23559 23592]\n"
     ]
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "mask = data_store.obs_table[\"TARGET_NAME\"] == \"Crab\"\n",
    "obs_ids = data_store.obs_table[\"OBS_ID\"][mask].data\n",
    "observations = data_store.get_observations(obs_ids)\n",
    "print(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configure the analysis\n",
    "\n",
    "Now we'll define the input for the spectrum analysis. It will be done the python way, i.e. by creating a config dict containing python objects. We plan to add also the convenience to configure the analysis using a plain text config file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "crab_pos = SkyCoord(83.633, 22.014, unit=\"deg\")\n",
    "on_region = CircleSkyRegion(crab_pos, 0.15 * u.deg)\n",
    "\n",
    "model = LogParabola(\n",
    "    alpha=2.3,\n",
    "    beta=0.01,\n",
    "    amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "flux_point_binning = EnergyBounds.equal_log_spacing(0.7, 30, 5, u.TeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "exclusion_mask = Map.create(skydir=crab_pos, width=(10, 10), binsz=0.02)\n",
    "\n",
    "gammacat = SourceCatalogGammaCat(\"$GAMMAPY_DATA/gamma-cat/gammacat.fits.gz\")\n",
    "\n",
    "regions = []\n",
    "for source in gammacat:\n",
    "    if not exclusion_mask.geom.contains(source.position):\n",
    "        continue\n",
    "    region = CircleSkyRegion(source.position, 0.15 * u.deg)\n",
    "    regions.append(region)\n",
    "\n",
    "exclusion_mask.data = exclusion_mask.geom.region_mask(regions, inside=False)\n",
    "exclusion_mask.plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = dict(\n",
    "    outdir=\".\",\n",
    "    background=dict(\n",
    "        on_region=on_region,\n",
    "        exclusion_mask=exclusion_mask,\n",
    "        min_distance=0.1 * u.rad,\n",
    "    ),\n",
    "    extraction=dict(containment_correction=False),\n",
    "    fit=dict(\n",
    "        model=model, forward_folded=True, fit_range=flux_point_binning[[0, -1]]\n",
    "    ),\n",
    "    fp_binning=flux_point_binning,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run the analysis\n",
    "\n",
    "TODO: Clean up the log (partly done, get rid of remaining useless warnings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td title=\"Minimum value of function\">FCN = 108.59976656320704</td>\n",
       "        <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 118</td>\n",
       "        <td title=\"Number of call in last migrad\">NCALLS = 118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td title=\"Estimated distance to minimum\">EDM = 3.120012954320802e-06</td>\n",
       "        <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "        <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "        UP = 1.0</td>\n",
       "    </tr>\n",
       "</table>\n",
       "<table>\n",
       "    <tr>\n",
       "        <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "        <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "        <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "        <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "        <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "        <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "        <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "        <td align=\"center\"></td>\n",
       "        <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "        <td align=\"center\"></td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "    </tr>\n",
       "</table>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td><a href=\"#\" onclick=\"$('#wQvzUWasIX').toggle()\">+</a></td>\n",
       "        <td title=\"Variable name\">Name</td>\n",
       "        <td title=\"Value of parameter\">Value</td>\n",
       "        <td title=\"Hesse error\">Hesse Error</td>\n",
       "        <td title=\"Minos lower error\">Minos Error-</td>\n",
       "        <td title=\"Minos upper error\">Minos Error+</td>\n",
       "        <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "        <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "        <td title=\"Is the parameter fixed in the fit\">Fixed?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>0</td>\n",
       "        <td>par_000_amplitude</td>\n",
       "        <td>3.33756</td>\n",
       "        <td>0.222387</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "        <td>par_001_alpha</td>\n",
       "        <td>2.31962</td>\n",
       "        <td>0.193135</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2</td>\n",
       "        <td>par_002_beta</td>\n",
       "        <td>18.9149</td>\n",
       "        <td>9.97232</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "</table>\n",
       "<pre id=\"wQvzUWasIX\" style=\"display:none;\">\n",
       "<textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\n",
       "\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Hesse Error & Minos Error- & Minos Error+ & Limit- & Limit+ & Fixed?\\\\\n",
       "\\hline\n",
       "0 & par $000_{amplitude}$ & 3.33756 & 0.222387 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "1 & par $001_{\\alpha}$ & 2.31962 & 0.193135 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "2 & par $002_{\\beta}$ & 18.9149 & 9.97232 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "\\end{tabular}\n",
       "</textarea>\n",
       "</pre>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis = SpectrumAnalysisIACT(observations=observations, config=config)\n",
    "analysis.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "Let's look at the results, and also compare with a previously published Crab nebula spectrum for reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tnfev       : 118\n",
      "\ttotal stat : 108.60\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.fit_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11ca0f940>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "opts = {\n",
    "    \"energy_range\": config[\"fit\"][\"fit_range\"],\n",
    "    \"energy_power\": 2,\n",
    "    \"flux_unit\": \"erg-1 cm-2 s-1\",\n",
    "}\n",
    "\n",
    "ax_spectrum, ax_residual = analysis.spectrum_result.peek()\n",
    "\n",
    "CrabSpectrum().model.plot(ax=ax_spectrum, label=\"Crab reference\", **opts)\n",
    "ax_spectrum.set_ylim(1e-12, 1e-10)\n",
    "ax_spectrum.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "Rerun the analysis, changing some aspects of the analysis as you like:\n",
    "\n",
    "* only use one or two observations\n",
    "* a different spectral model\n",
    "* different config options for the spectral analysis\n",
    "* different energy binning for the spectral point computation\n",
    "\n",
    "Observe how the measured spectrum changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
