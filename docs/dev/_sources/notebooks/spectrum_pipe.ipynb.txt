{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy/master?urlpath=lab/tree/spectrum_pipe.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_pipe.ipynb](../_static/notebooks/spectrum_pipe.ipynb) |\n",
    "[spectrum_pipe.py](../_static/notebooks/spectrum_pipe.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum analysis with Gammapy (run pipeline)\n",
    "\n",
    "In this tutorial we will learn how to perform a 1d spectral analysis.\n",
    "\n",
    "We will use a \"pipeline\" or \"workflow\" class to run a standard analysis. If you're interested in implementation detail of the analysis in order to create a custom analysis class, you should read ([spectrum_analysis.ipynb](spectrum_analysis.ipynb)) that executes the analysis using lower-level classes and methods in Gammapy. \n",
    "\n",
    "In this tutorial we will use the folling Gammapy classes:\n",
    "\n",
    "- [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst) to load the data to \n",
    "- [gammapy.scripts.SpectrumAnalysisIACT](..\/api/gammapy.scripts.SpectrumAnalysisIACT.rst) to run the analysis\n",
    "\n",
    "We use 4 Crab observations from H.E.S.S. for testing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup for the notebook, and import the functionality we need."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from regions import CircleSkyRegion\n",
    "\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.scripts import SpectrumAnalysisIACT\n",
    "from gammapy.catalog import SourceCatalogGammaCat\n",
    "from gammapy.maps import Map\n",
    "from gammapy.spectrum.models import LogParabola\n",
    "from gammapy.spectrum import CrabSpectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select data\n",
    "\n",
    "First, we select and load some H.E.S.S. data (simulated events for now). In real life you would do something fancy here, or just use the list of observations someone send you (and hope they have done something fancy before). We'll just use the standard gammapy 4 crab runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23523 23526 23559 23592]\n"
     ]
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")\n",
    "mask = data_store.obs_table[\"TARGET_NAME\"] == \"Crab\"\n",
    "obs_ids = data_store.obs_table[\"OBS_ID\"][mask].data\n",
    "observations = data_store.obs_list(obs_ids)\n",
    "print(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configure the analysis\n",
    "\n",
    "Now we'll define the input for the spectrum analysis. It will be done the python way, i.e. by creating a config dict containing python objects. We plan to add also the convenience to configure the analysis using a plain text config file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "crab_pos = SkyCoord.from_name(\"crab\")\n",
    "on_region = CircleSkyRegion(crab_pos, 0.15 * u.deg)\n",
    "\n",
    "model = LogParabola(\n",
    "    alpha=2.3,\n",
    "    beta=0.01,\n",
    "    amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "flux_point_binning = EnergyBounds.equal_log_spacing(0.7, 30, 5, u.TeV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "exclusion_mask = Map.create(skydir=crab_pos, width=(10, 10), binsz=0.02)\n",
    "\n",
    "gammacat = SourceCatalogGammaCat()\n",
    "\n",
    "regions = []\n",
    "for source in gammacat:\n",
    "    if not exclusion_mask.geom.contains(source.position):\n",
    "        continue\n",
    "    region = CircleSkyRegion(source.position, 0.15 * u.deg)\n",
    "    regions.append(region)\n",
    "\n",
    "exclusion_mask.data = exclusion_mask.geom.region_mask(regions, inside=False)\n",
    "exclusion_mask.plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = dict(\n",
    "    outdir=\".\",\n",
    "    background=dict(\n",
    "        on_region=on_region,\n",
    "        exclusion_mask=exclusion_mask,\n",
    "        min_distance=0.1 * u.rad,\n",
    "    ),\n",
    "    extraction=dict(containment_correction=False),\n",
    "    fit=dict(\n",
    "        model=model,\n",
    "        stat=\"wstat\",\n",
    "        forward_folded=True,\n",
    "        fit_range=flux_point_binning[[0, -1]],\n",
    "    ),\n",
    "    fp_binning=flux_point_binning,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run the analysis\n",
    "\n",
    "TODO: Clean up the log (partly done, get rid of remaining useless warnings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td title=\"Minimum value of function\">FCN = 108.83548502896386</td>\n",
       "        <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 118</td>\n",
       "        <td title=\"Number of call in last migrad\">NCALLS = 118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td title=\"Estimated distance to minimum\">EDM = 2.6101091011340668e-06</td>\n",
       "        <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "        <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "        UP = 1.0</td>\n",
       "    </tr>\n",
       "</table>\n",
       "<table>\n",
       "    <tr>\n",
       "        <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "        <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "        <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "        <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "        <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "        <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "        <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "        <td align=\"center\"></td>\n",
       "        <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "        <td align=\"center\"></td>\n",
       "        <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "    </tr>\n",
       "</table>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td><a href=\"#\" onclick=\"$('#REyJxpsndg').toggle()\">+</a></td>\n",
       "        <td title=\"Variable name\">Name</td>\n",
       "        <td title=\"Value of parameter\">Value</td>\n",
       "        <td title=\"Hesse error\">Hesse Error</td>\n",
       "        <td title=\"Minos lower error\">Minos Error-</td>\n",
       "        <td title=\"Minos upper error\">Minos Error+</td>\n",
       "        <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "        <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "        <td title=\"Is the parameter fixed in the fit\">Fixed?</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>0</td>\n",
       "        <td>par_000_amplitude</td>\n",
       "        <td>3.32931</td>\n",
       "        <td>0.222011</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "        <td>par_001_reference</td>\n",
       "        <td>1</td>\n",
       "        <td>1</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2</td>\n",
       "        <td>par_002_alpha</td>\n",
       "        <td>2.32327</td>\n",
       "        <td>0.193054</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>3</td>\n",
       "        <td>par_003_beta</td>\n",
       "        <td>18.6602</td>\n",
       "        <td>9.95332</td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td></td>\n",
       "        <td>No</td>\n",
       "    </tr>\n",
       "</table>\n",
       "<pre id=\"REyJxpsndg\" style=\"display:none;\">\n",
       "<textarea rows=\"14\" cols=\"50\" onclick=\"this.select()\" readonly>\n",
       "\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Hesse Error & Minos Error- & Minos Error+ & Limit- & Limit+ & Fixed?\\\\\n",
       "\\hline\n",
       "0 & par $000_{amplitude}$ & 3.32931 & 0.222011 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "1 & par $001_{reference}$ & 1 & 1 &  &  &  &  & Yes\\\\\n",
       "\\hline\n",
       "2 & par $002_{\\alpha}$ & 2.32327 & 0.193054 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "3 & par $003_{\\beta}$ & 18.6602 & 9.95332 &  &  &  &  & No\\\\\n",
       "\\hline\n",
       "\\end{tabular}\n",
       "</textarea>\n",
       "</pre>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis = SpectrumAnalysisIACT(observations=observations, config=config)\n",
    "analysis.run(optimize_opts={\"print_level\": 1})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "Let's look at the results, and also compare with a previously published Crab nebula spectrum for reference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fit result info \n",
      "--------------- \n",
      "Model: LogParabola\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value     error         unit      min max\n",
      "\t--------- --------- --------- --------------- --- ---\n",
      "\tamplitude 3.329e-11 2.220e-12 1 / (cm2 s TeV) nan nan\n",
      "\treference 1.000e+00 0.000e+00             TeV nan nan\n",
      "\t    alpha 2.323e+00 1.931e-01                 nan nan\n",
      "\t     beta 1.866e-01 9.953e-02                 nan nan\n",
      "\n",
      "Covariance: \n",
      "\n",
      "\t   name   amplitude  reference   alpha       beta   \n",
      "\t--------- ---------- --------- ---------- ----------\n",
      "\tamplitude  4.929e-24 0.000e+00  2.248e-13 -6.322e-14\n",
      "\treference  0.000e+00 0.000e+00  0.000e+00  0.000e+00\n",
      "\t    alpha  2.248e-13 0.000e+00  3.727e-02 -1.744e-02\n",
      "\t     beta -6.322e-14 0.000e+00 -1.744e-02  9.907e-03 \n",
      "\n",
      "Statistic: 39.258 (wstat)\n",
      "Fit Range: [ 0.87992254 27.82559402] TeV\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(analysis.fit.result[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xb1dc5ae10>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "opts = {\n",
    "    \"energy_range\": analysis.fit.fit_range,\n",
    "    \"energy_power\": 2,\n",
    "    \"flux_unit\": \"erg-1 cm-2 s-1\",\n",
    "}\n",
    "axes = analysis.spectrum_result.plot(**opts)\n",
    "CrabSpectrum().model.plot(ax=axes[0], **opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "Rerun the analysis, changing some aspects of the analysis as you like:\n",
    "\n",
    "* only use one or two observations\n",
    "* a different spectral model\n",
    "* different config options for the spectral analysis\n",
    "* different energy binning for the spectral point computation\n",
    "\n",
    "Observe how the measured spectrum changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
