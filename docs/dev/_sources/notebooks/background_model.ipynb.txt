{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-extra/master?urlpath=lab)\n",
    " and then double-click on **background_model.ipynb** file.\n",
    "- You can also contribute with your own notebooks in this \n",
    "[GitHub repository](https://github.com/gammapy/gammapy-extra/tree/master/notebooks).\n",
    "- **Source files:**\n",
    "[background_model.ipynb](../_static/notebooks/background_model.ipynb) |\n",
    "[background_model.py](../_static/notebooks/background_model.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Template background model production with Gammapy\n",
    "\n",
    "## Introduction \n",
    "\n",
    "In this tutorial, we will create a template background model in the `bkg_2d` format, i.e. with offset and energy axes (see [spec](http://gamma-astro-data-formats.readthedocs.io/en/latest/irfs/background/index.html#bkg-2d-format)).\n",
    "\n",
    "We will be working with only 4 H.E.S.S. runs on the Crab nebula here, just as an example.\n",
    "\n",
    "To build a coherent background model you normally use 100s of runs of AGN observations or intentional \"off\" runs that point at parts of the sky containing no known gamma-ray sources.\n",
    "\n",
    "We will mainly be using the following classes:\n",
    "        \n",
    "* [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst) to load the runs to use to build the bkg model.\n",
    "* [gammapy.data.ObservationGroupAxis](..\/api/gammapy.data.ObservationGroupAxis.rst) and [gammapy.data.ObservationGroups](..\/api/gammapy.data.ObservationGroups.rst) to group the runs\n",
    "* [gammapy.background.OffDataBackgroundMaker](..\/api/gammapy.background.OffDataBackgroundMaker.rst) to compute the background model\n",
    "* [gammapy.background.EnergyOffsetBackgroundModel](..\/api/gammapy.background.EnergyOffsetBackgroundModel.rst) to represent and write the background model\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As always, we start the notebook with some setup and imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import shutil\n",
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.table import Table\n",
    "from astropy.coordinates import SkyCoord, Angle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.extern.pathlib import Path\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.utils.nddata import sqrt_space\n",
    "from gammapy.data import DataStore, ObservationGroupAxis, ObservationGroups\n",
    "from gammapy.background import EnergyOffsetBackgroundModel\n",
    "from gammapy.background import OffDataBackgroundMaker\n",
    "from gammapy.catalog import SourceCatalogGammaCat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute background model\n",
    "\n",
    "Computing a set of template background model has two major steps:\n",
    "1. Define group of runs for each background model\n",
    "2. Run the `OffDataBackgroundMaker`\n",
    "\n",
    "We also need a scratch directory, and a table of known gamma-ray sources to exclude.\n",
    "\n",
    "### Make a scratch directory\n",
    "\n",
    "Background model production is a little pipeline that needs a \"scratch\" directory to put some files while running. Let's make ourselves a fresh empty scratch sub-directory called `background` in the current working directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_fresh_dir(path):\n",
    "    \"\"\"Make a fresh directory. Delete first if exists\"\"\"    \n",
    "    path = Path(path)\n",
    "    if path.is_dir():\n",
    "        shutil.rmtree(str(path))\n",
    "    path.mkdir()\n",
    "    return path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PosixPath('background')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scratch_dir = make_fresh_dir('background')\n",
    "scratch_dir"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make an observation table defining the run grouping\n",
    "\n",
    "Prepare a scheme to group observations with similar observing conditions and create a new ObservationTable with the grouping ID for each run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a background model from the 4 Crab runs for the counts ouside the exclusion region so here outside the Crab\n",
    "data_store = DataStore.from_dir(\"$GAMMAPY_EXTRA/datasets/hess-crab4-hd-hap-prod2\")\n",
    "\n",
    "# Define the grouping you want to use to group the obervations to make the acceptance curves\n",
    "# Here we use 2 Zenith angle bins only, you can also add efficiency bins for example etc...\n",
    "axes = [ObservationGroupAxis('ZEN_PNT', [0, 49, 90], fmt='edges')]\n",
    "\n",
    "# Create the ObservationGroups object\n",
    "obs_groups = ObservationGroups(axes)\n",
    "# write it to file\n",
    "filename = str(scratch_dir / 'group-def.fits')\n",
    "obs_groups.obs_groups_table.write(filename, overwrite=True)\n",
    "\n",
    "# Create a new ObservationTable with the column group_id\n",
    "# You give the runs list you want to use to produce the background model that are in your obs table. \n",
    "# Here very simple only the 4 Crab runs...\n",
    "list_ids = [23523, 23526, 23559, 23592]\n",
    "obs_table_with_group_id = obs_groups.apply(data_store.obs_table.select_obs_id(list_ids))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make table of known gamma-ray sources to exclude\n",
    "\n",
    "We need a mask to remove known sources from the observation. We use [gamma-cat](https://gamma-cat.readthedocs.io/) and exclude a circular region of at least 0.3Â° radius. Here since we use Crab runs, we will remove the Crab events from the FOV to select only the OFF events to build the acceptance curves. Of cource normally you use thousand of AGN runs to build coherent acceptance curves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "cat = SourceCatalogGammaCat()\n",
    "exclusion_table = cat.table.copy()\n",
    "exclusion_table.rename_column('ra', 'RA')\n",
    "exclusion_table.rename_column('dec', 'DEC')\n",
    "radius = exclusion_table['morph_sigma'].data\n",
    "radius[np.isnan(radius)] = 0.3\n",
    "exclusion_table['Radius'] = radius * u.deg\n",
    "exclusion_table = Table(exclusion_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run the OffDataBackgroundMaker\n",
    "\n",
    "Make the acceptance curves in the different group of observation conditions you defined above using the obs_table containaing the group id for each observation used to compute the bkg model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The truth value of a Quantity is ambiguous. In the future this will raise a ValueError. [astropy.units.quantity]\n"
     ]
    }
   ],
   "source": [
    "bgmaker = OffDataBackgroundMaker(\n",
    "    data_store=data_store,\n",
    "    outdir=str(scratch_dir),\n",
    "    run_list=None,\n",
    "    obs_table=obs_table_with_group_id,\n",
    "    ntot_group=obs_groups.n_groups,\n",
    "    excluded_sources=exclusion_table,\n",
    ")\n",
    "\n",
    "# Define the energy and offset binning to use\n",
    "ebounds = EnergyBounds.equal_log_spacing(0.1, 100, 15, 'TeV')\n",
    "offset = sqrt_space(start=0, stop=2.5, num=100) * u.deg\n",
    "\n",
    "# Make the model (i.e. stack counts and livetime)\n",
    "bgmaker.make_model(\"2D\", ebounds=ebounds, offset=offset)\n",
    "\n",
    "# Smooth the model\n",
    "bgmaker.smooth_models(\"2D\")\n",
    "\n",
    "# Write the model to disk\n",
    "bgmaker.save_models(\"2D\")\n",
    "bgmaker.save_models(modeltype=\"2D\", smooth=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations, you have produced a background model.\n",
    "\n",
    "The following files were generated in our scratch directory:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['smooth_background_2D_group_001_table.fits.gz',\n",
       " 'background_2D_group_001_table.fits.gz',\n",
       " 'group-def.fits',\n",
       " 'background_2D_group_000_table.fits.gz',\n",
       " 'smooth_background_2D_group_000_table.fits.gz']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[path.name for path in scratch_dir.glob('*')]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Inspect the background model\n",
    "\n",
    "Our template background model has two axes: offset and energy.\n",
    "\n",
    "Let's make a few plots to see what it looks like:\n",
    "1. Acceptance curve (background rate as a function of field of view offset for a given energy)\n",
    "1. Rate spectrum (background rate as a function of energy for a given offset)\n",
    "1. Rate image (background rate as a function of energy and offset)\n",
    "\n",
    "### Acceptance curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read one of the background models from file\n",
    "filename = scratch_dir / 'smooth_background_2D_group_000_table.fits.gz'\n",
    "model = EnergyOffsetBackgroundModel.read(str(filename))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1130ab710>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaQAAAEWCAYAAAApTuNLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzt3Xd4VFX6wPHvmwJJSEgooXcM0hEIXRQrIgKKqCBSBMSGurK7WLa4q/50XV1FFERcBESliIqsvQEWUEho0nuJIIROgABJ3t8f9waHmJlMMJNJeT/PMw8z555z7juTIW/uveeeI6qKMcYYE2whwQ7AGGOMAUtIxhhjighLSMYYY4oES0jGGGOKBEtIxhhjigRLSMYYY4oES0jGnAcR2S4iV5a0fRkTTJaQjClBROQyEZkvIkdEZHsedeuJiIpImsfjbx7bK4rILBHZ7z7eEpHyPvr7s4isFpFjIrJNRP78O/Z9s4gsEpETIrLARz8DPdqfFJEszz7zeP+3i8iGXMrLisgh+yOg8FlCMqWCiIQFO4ZCchx4HfCaDHIRp6rR7uMJj/IngQpAA6AhUBX4h49+BBjstrkGGCUi/c9z3weBscC/fDVW1bey2wM9gN0e/UXnse93gJoi0jFHeS8gDfg6j/amgFlCMkElIjVE5F0RSXX/qr7fY9s/RGS2iLzh/tW9RkQS89F2joi8KSJHgaEiEiki09y/fteJyBgRSXHr/1lE3s0R20siMtZH+O1EZK3b3xQRiXDbVRCRD924DrnPa3n0u0BEnhCR79339bmIVPbYPkhEdojIARH5S34+T1VdoqrTga35aedFfWCuqh5V1SPA+0AzH/v+t6ouU9UMVd0AfAB0OZ8dq+qXqjob2H0+7T2JSG0R+cA9ytsqIne5+0gD3sNJop4GA9NVNev37tvkjyUkEzQiEgL8D1gJ1ASuAP4gIt09qvUGZgJxwDzg5Xy07QPMcdu+BTwG1MP5i/8q4DaPum8C14hInNt/GHALMN3HWxgIdMc5emgE/NUtDwGmAHWBOsDJ7Lg93ArcDlQBygB/cvfbFHgFGATUACoBnsnsYhE57COm87FDRFLcpFrZo3w8cJ2bYCsANwKf+NOhiAjQFVhznvsuECISCnwMLML5PK8BHhWRS90q04BbRKSMW7+yW+eNgo7F5M0SkgmmdkC8qj6uqqdVdSvwGuB5muc7Vf1YVTNxkkOrfLRdrKpzVTVLVU8CNwNPqeohVU0BxmVXVNU9wDfATW7RNcB+VU32Ef/LqrpLVQ8C/wcMcPs6oKrvquoJVT3mbrs0R9spqrrRjWs2cJFb3g/4UFW/UdVTwN+As3+pq+p3qhrnI6b82I/zOdYF2gIxOIk72zKcZHnAfWQCE/zs+x/8mpjPZ98F5WIgQlWfcb8nG92Ysr8n83FOc17nvh4ALFfV9QGIxeTBEpIJprpADRE5nP0AHsW5VpHtF4/nJ4AI9+jFn7a7cuyvRo6ynNun8etR0234PjrK2X6H2z8iEiUir7qn3Y7iJLo49691b+8r+3rHOTGq6nGcZFDgVDVNVZPcU2x7gVHA1R4DF94BNuIki/LAFpwjSUTkUY/BAxM9+xWRUTinvXq6SfV89l1Q6gL1cnxPRgPV3DiycH7O2aftBuF8D0wQlJYLvaZo2gVsU9WEALXNOZX9HpzTX2vd17VzbJ8LvCIizXH+Yh6TRwye7evw6/WOPwIXAh1U9RcRuQhYjnPRPy97gCbZL0QkCue0XWHI/ryy42wF3OMmRdzE8x2Aqj4FPJWzAxEZBjwMXOIehZ7vvgvKLmC9qrbwUWca8JOIdMF5zzMLOAbjJztCMsG0BDgqIg+5Aw5CRaS5iLQLUNvZwCPuNZGaOH+Vn6Wq6TjXnN4GlqjqzjxiuFdEaolIRZyjs1lueQzOdaPD7rbH/Hg/2ebgXLe52L2u8Tj5+H8qIiHu4Ipw56VEZF8fyaVuBxG50G1TCecU5gJ3AAPAUmCE+/lGAiNxrtl52/dAnCR1lXsK1VecPvft/jwjcP5oDnHfR7i/n4OH79z+/uD2ESYiLUWkTXYF9zTeMpxThh+6p2BNEFhCMkHjXhfqhXP9ZBvOdYX/ArEBavs4kOLW/xLnl3/OU0rTgBbkfboOnMT1Oc6Itq04w6TBGa4c6cb0A/CpH30BoKprgHvdvvcAh9yYARCRruL7/ppLcJLhx/w6oOJzj/Zr3MQBzuCOT4FjwGqcz2KAR1/DcAaBpAA/u/WH+tj3kzhHc0tzO52Xz30PcmN/BWdwxEmca4T5oqpngGuBzjinVVPdPnMOCZ+Gc3rPBjMEkdgCfaa0EpG7gf6qeqlHWR1gPVBNVY8GLThjSiE7QjKlhohUF5Eu7mmiC3Gu9bzvsT0E54L3TEtGxhQ+G9RgSpMywKs4N3wexrl4PQFARMoBe3FO61wTrACNKc3slJ0xxpgiIaCn7ETkGhHZICKbReThXLaXFWfyxs0i8qOI1PPY9ohbvsHz7ntvfYpIfbePTW6f2Xde3yUiP4nIChH5Tpw74X3uwxhjTOEL2BGSexPgRpwpWlJwhpAOUNW1HnXuAVqq6l3iTMJ4g6re4iaNGUB7nBsFv8SZmgVvfYrIbOA9VZ3pjuxZqaqviEj57OsBItIb576Ka7ztwx29lavKlStrvXr1CuYDMsaYUiI5OXm/qsbnVS+Q15DaA5uz70cQkZk4c4ut9ajTh19nD54DvCwi4pbPdO/y3iYim93+yK1PEVkHXI4zPxg4Qzj/AbyS4+J0OX69Ac/bPhZ7e0P16tUjKSkpXx+CMcaUdiKyw596gTxlV5Nzp1ZJcctyraOqGcARnPsYvLX1Vl4JOOz28Zt9ici9IrIF+DeQPSO0P/EhIiNFJElEklJTU/N4y8YYY85XIBNSblOA5Dw/6K1OQZU7T1THq2pD4CF+nZHZn/hQ1UmqmqiqifHxeR5xGmOMOU+BTEgpnDvXVy1+u7bJ2TriTJgZi7Mwl7e23sr340xeGZajPKeZwPX5iM8YY0whCeQ1pKVAgojUx5l2pD+/XuPJNg8YgnPdph/wtaqqiMwD3haR53EGHCTgzF0mufXptpnv9jHT7fMDABFJUNVN7v56Aps89p3bPowxv8OZM2dISUkhPT092KGYQhYREUGtWrUIDz+faQcDmJBUNUOcaeg/A0KB11V1jYg8DiSp6jxgMjDdHVBwEHeNErfebJwBEBnAvdmj33Lr093lQ8BMEXkSZ2blyW75KBG5EjiDMy/YkLz2YYw5fykpKcTExFCvXj2cMUqmNFBVDhw4QEpKCvXr1z+vPuzG2HxITExUG2VnjG/r1q2jcePGloxKIVVl/fr1NGnS5JxyEUlW1cS82ttcdsaYAmfJqHT6vT93m8uuEJw4ncErC7YQGiKEhQgh2f+K829oaAihcu62UM+HCKGhbrmcuy0sJISwUCG6bBjlI8KJjggjNMR+GRhjih9LSIXg+KlMXp6/mcI6O+okpzBiIsIpH+kkqpiIMMpHOv/GRZahWmwE1WMjqBYbQdXyEYSH2sGyKf62b9/Oddddx+rVq3+zLfvG9sqVKwchsl9NnTqVpKQkXn755d9VJ9Dmzp1Lo0aNaNrUmW2tW7duPPfccyQm5nnm7bxZQioE8TFl2fZ0T7KylExVMrOcR0aWkuX+m5m9LVPJyMoiSz3Kc9Q9p02WciYzi2OnMjiWnsHRk2ecf9PPcCz9DEdPZrD3WDqb9mU4r9MzyMw6NzOKQOXosk6CKh9BjbhIqsVGUK9SFBdUiaFupShLWMaUMnPnzuW66647m5AKgyWkQhQSIoQghIcGLwZV5dipDH45ks6eI+n8cuQke46ks+dwOnuOprP9wHEWbz3AsfSMs23CQ4X6lcuRUDWGhCrRJFSJIaFqNPUrl7NEZYqcjIwMhgwZwvLly2nUqBFvvPEGUVFRZ7efPHmSG264gRtvvJE77riDJ554grfeeovatWtTuXJl2rZty5/+9Kdz+hw6dCiRkZGsX7+eHTt2MGXKFKZNm8bixYvp0KEDU6dOBWDGjBk89dRTqCo9e/bkmWeeAWDKlCk8/fTTVK9enUaNGlG2bFkAUlNTueuuu9i5cycAY8eOpUuXLl7f28KFC3nggQcA53rNN998Q3JyMo899hhVq1ZlxYoV9O3blxYtWvDiiy9y8uRJ5s6dS8OGDdmxYwfDhg0jNTWV+Ph4pkyZQp06dXItT0lJYd68eSxcuJAnn3ySd999F4B33nmHe+65h8OHDzN58mS6du1aMD80lyWkUkZEKB8RTvmIcBpVjfFa71j6GbbtP86mvWls2pfG5n3HWP3zET7+ac/ZU4+R4aG0qh1L27oVSKxbkTZ1KhAbdX73H5iS6Z//W8Pa3QW71mHTGuV5rFczr9s3bNjA5MmT6dKlC8OGDWPChAlnE0xaWhr9+/dn8ODBDB48mKSkJN59912WL19ORkYGbdq0oW3btrn2e+jQIb7++mvmzZtHr169+P777/nvf/9Lu3btWLFiBVWqVOGhhx4iOTmZChUqcPXVVzN37lw6dOjAY489RnJyMrGxsVx22WW0bt0agAceeIAHH3yQiy++mJ07d9K9e3fWrVvn9b0999xzjB8/ni5dupCWlkZERAQAK1euZN26dVSsWJEGDRowYsQIlixZwosvvshLL73E2LFjGTVqFIMHD2bIkCG8/vrr3H///cydO9dree/evbnuuuvo16/f2f1nZGSwZMkSPv74Y/75z3/y5Zdf5vvn54slJJOrmIhwWtaKo2WtuHPK089ksiU1jU1701iZcpjkHYeYuHArmVlbAEioEk1ivQp0qF+JSxrFU7FcmWCEb0qx2rVrnz3KuO222xg3btzZhNSnTx/GjBnDwIEDAfjuu+/o06cPkZGRAPTq1ctrv7169UJEaNGiBVWrVqVFixYANGvWjO3bt7Njxw66detG9hRjAwcO5JtvvgE4p/yWW25h48aNAHz55ZesXfvrfNNHjx7l2LFjXmPo0qULo0ePZuDAgfTt25datWoB0K5dO6pXrw5Aw4YNufrqqwFo0aIF8+fPB2Dx4sW89957AAwaNIgxY8b4LM9N3759AWjbti3bt2/3Wu98WUIy+RIRHkqzGrE0qxHL9a2duWhPnM5g5a4jJO84SNKOQ3y0ag8zluwiRKBNnQpc3qQKVzSuSqOq0TYcuJTxdSQTKDm/Y56vu3TpwieffMKtt96KiJCf+zCzT7OFhIScfZ79OiMjg7Aw779OvX3vs7KyWLx48dmEmJeHH36Ynj178vHHH9OxY8ezRyg54/GMNSMjI9e+vMXk6/9odr+hoaFe+/097AKA+d2iyoTRqWElRl2ewNTb27Pi71czb1QX7rs8gfSMTP796Qa6j/2Grv+ez2MfrObHrQfy9YvAmPzYuXMnixc7q8jMmDGDiy+++Oy2xx9/nEqVKnHPPfcAcPHFF/O///2P9PR00tLS+Oijj857vx06dGDhwoXs37+fzMxMZsyYwaWXXkqHDh1YsGABBw4c4MyZM7zzzjtn21x99dXnjKRbsWKFz31s2bKFFi1a8NBDD5GYmMj69ev9jq9z587MnDkTgLfeeuvs5+KtPCYmxufRWiBYQjIFLiREaFkrjgevasSH93Xlh0eu4KkbWtC4WgyzknZxy6QfuOTZ+bzwxUZ2HjgR7HBNCdOkSROmTZtGy5YtOXjwIHffffc528eOHUt6ejpjxoyhXbt29O7dm1atWtG3b18SExOJjY09r/1Wr16dp59+mssuu4xWrVrRpk0b+vTpQ/Xq1fnHP/5Bp06duPLKK2nTps3ZNuPGjSMpKYmWLVvStGlTJk6c6HMfY8eOpXnz5rRq1YrIyEh69Ojhd3zjxo1jypQptGzZkunTp/Piiy/6LO/fvz/PPvssrVu3ZsuWLefxieSfTR2UDzZ10O934nQGn635hTnJKSzacgBVaF+/Iv3a1OLaltWJLmtnkYu7devW/WbqmKIsLS2N6OhoTpw4wSWXXMKkSZPOSRomf3L7+fs7dZD97zeFKqpMGDe0rsUNrWux+/BJ3l/+M+8mpzDm3VU88dFaBrSvw5DO9agZ5985dWN+r5EjR7J27VrS09MZMmSIJaMgsiOkfLAjpMBQVZbtPMzURdv5+Kc9AFzbojojLq5Pq9pxebQ2RU1xO0IyBcuOkEyxJiK0rVuBtnUr8HCPxkxbtJ0ZP+7kfyt3k1i3AqMuv4BLG8XbCL1iRFXt51UK/d4DHBvUYIqUmnGRPHptExY/egV/v64pe46kM3TKUm559Qd+3Hog2OEZP0RERHDggI2kLG2y10PKvln3fNgpu3ywU3aF73RGFrOSdvHSV5vYd+wUXRMq86erL7RTeUWYrRhbenlbMdbfU3aWkPLBElLwpJ/JZPriHUxYsJlDJ87Qo3k1/tKzCbUqROXd2BgTVJaQAsASUvClncpg8rfbeGXhZgDu7XYBd1zSgIhgzlhrjPHJVow1JVJ02TAeuDKBr/7YjcsbV+E/X2yk+9hvmL9+X7BDM8b8TpaQTLFUMy6SCQPbMn14e0JDhNunLuWON5LYe9SuWxhTXFlCMsVa14R4Pn3gEh66pjHfbEzlqucX8t6yFBvhZUwxZAnJFHtlwkK4u1tDPnmgKwlVYxg9eyV3vJHEPjtaMqZYsYRkSowG8dHMvrMTf+3ZhG837efK5xfywYqfgx2WMcZPlpBMiRIaIozo2oBP/3AJCVVjeGDmCh6as4qTpzODHZoxJg+WkEyJVL9yOWaN7Mioyy5gdvIurh//PZv3pQU7LGOMD5aQTIkVFhrCn7pfyNTb25OadoreL3/H+8tTgh2WMcYLS0imxLu0UTwf39+V5jVjeXDWSv7y/k+czsgKdljGmBwsIZlSoVpsBG+P6MCdlzbgrR93ctvkHzmQdirYYRljPFhCMqVGWGgIj/RowthbLmLlrsP0fvl71uw+EuywjDEuS0im1Lm+dU3euasTmVnKja8s4qNVe4IdkjEGS0imlGpZK45593WhWY1Y7n17Ga8s2GKzOxgTZJaQTKlVJSaCt0Z0oFerGjzz6Xr+Onc1GZk22MGYYLElzE2pFhEeyou3XETNuEgmLtzCniPpvDSgNeXK2n8NYwqbHSGZUi8kRHi4R2OevL45Czbso/+kH0g9ZiPwjClslpCMcd3WsS7/HZLI5n1p3DRxEbsOngh2SMaUKpaQjPFweeOqvHVHBw6dOMONryxi/S9Hgx2SMaWGJSRjcmhTpwLv3NWJEBFunriYpdsPBjskY0oFS0jG5KJR1Rjm3N2JytFlue2/P7Jggy2RbkygBTQhicg1IrJBRDaLyMO5bC8rIrPc7T+KSD2PbY+45RtEpHtefYpIfbePTW6fZdzy0SKyVkRWichXIlLXo02miKxwH/MC9TmY4qlWhSjeuasTDeOjGflGMvMtKRkTUAFLSCISCowHegBNgQEi0jRHteHAIVW9AHgBeMZt2xToDzQDrgEmiEhoHn0+A7ygqgnAIbdvgOVAoqq2BOYA//bY/0lVvch99C7At29KiErRZXn7jg4kVI3mzjeSmb/ekpIxgRLII6T2wGZV3aqqp4GZQJ8cdfoA09znc4ArRETc8pmqekpVtwGb3f5y7dNtc7nbB26f1wOo6nxVzR4u9QNQKwDv1ZRgcVFleHtERy6sFsOd05P5at3eYIdkTInkMyGJSCcRGe+e7koVkZ0i8rGI3CsisXn0XRPY5fE6xS3LtY6qZgBHgEo+2norrwQcdvvwti9wjpo+8XgdISJJIvKDiFyf25sQkZFunaTU1FRv79WUcLFR4bw5ogNNqsdw15uWlIwJBK8JSUQ+AUYAn+GcNquOc5rsr0AE8IGI+DrNJbmU5ZwszFudgir/dUcitwGJwLMexXVUNRG4FRgrIg1/04nqJFVNVNXE+Pj4XHZjSovYyHDeGN6BJtXLc/eby/h2k/2BYkxB8nWENEhVh6vqPFXdraoZqpqmqstU9T+q2g1Y5KN9ClDb43UtYLe3OiISBsQCB3209Va+H4hz+/jNvkTkSuAvQG9VPXsLvqrudv/dCiwAWvt4P8Y4SWlYexpWieaON5L4YeuBYIdkTInhNSGp6v68GudRZymQ4I5+K4MzSCHnSLZ5wBD3eT/ga3WmXJ4H9HdH4dUHEoAl3vp028x3+8Dt8wMAEWkNvIqTjM5ekRaRCiJS1n1eGegCrM3rPRsTF1WGN4e3p3aFKIZNXUryDrtPyZiCcF6DGkTkp7zquNdzRuGc8lsHzFbVNSLyuMepvslAJRHZDIwGHnbbrgFm4ySIT4F7VTXTW59uXw8Bo92+Krl9g3OKLhp4J8fw7iZAkoisxElm/1JVS0jGL5Wiy/LWiA5UiSnL0NeXsvpnW+jPmN9LvK0BIyJ9vbUBJqpqqbugkpiYqElJScEOwxQhuw+f5KaJi0k/k8k7d3WiQXx0sEMypsgRkWT3er1Pvo6QZgG9gV45HtfhDGowptSrERfJ9OHtARg0eQm/HEkPckTGFF++EtIq4DlVvT3nAzhcSPEZU+Q1iI9m6u3tOXLyDINf/5HDJ04HOyRjiiVfCekPgLepjm8IQCzGFFstasUyaXBbtu8/wbCpSzl5OjPYIRlT7PgaZfetqu70ss0upBiTQ+eGlRk34CJW7DrMfTOW2XLoxuRTvkbZiciyQAViTElwTfPq/LNPc75ct4+/fbAab4OGjDG/FZZ3lXPkNiOCMcbDoI51+eXIScbP30K18pE8cGVCsEMypljIb0L6KCBRGFPC/OnqC9lzJJ0XvtxItdiy3NKuTrBDMqbIy2ty1VAR+TL7tar+NfAhGVP8iQjP3NiSSxrF8+j7q23eO2P84DMhqWomcMKPmb2NMTmEh4Yw/tbWJFSJ5p43l7Fp77Fgh2RMkebPoIZ04CcRmSwi47IfgQ7MmJIgJiKcyUPbEVEmlNunLiX12Km8GxlTSvmTkD4C/gZ8AyR7PIwxfqgZF8nkIYnsTzvFyOlJpJ+xe5SMyU2eCUlVp2U/cGbhXu4+N8b4qWWtOMbe0poVuw7z5zmrbDi4MbnIMyGJyAIRKS8iFYGVwBQReT7woRlTslzTvBp/7n4h/1u5m5e/3hzscIwpcvw5ZRerqkeBvsAUVW0LXBnYsIwpme6+tCF9W9fkP19s5NPVe4IdjjFFij8JKUxEqgM3Ax8GOB5jSjQR4am+LWhdJ44HZ620dZSM8eBPQnocZ0G8zaq6VEQaAJsCG5YxJVdEeCivDmpLhahw7ngjyUbeGePyZ1DDO6raUlXvcV9vVdUbAx+aMSVXlZgIJg1O5PCJM9z1ZjKnMmzknTHntYS5Meb3a14zluduakXyjkP89X2biNUYS0jGBFHPltW5/4oE3klOYcr324MdjjFBZQnJmCD7wxUJdG9WlSc/Wss3G23OO1N6nVdCEpHbCzoQY0qrkBDh+ZsvolHVGO6bsZwdB44HOyRjguJ8j5D+WaBRGFPKlSsbxqRBiQDcOT2Z46cyghyRMYXPa0ISkVVeHj8BVQsxRmNKhTqVonhpQGs27j3Gn+estEEOptTxtUBfVaA7cChHuQCLAhaRMaXYJY3iebhHY576eD0TFmzh3ssuCHZIxhQaXwnpQyBaVVfk3CAiCwIWkTGl3B1dG7D656M89/kGmlYvz2WNqwQ7JGMKhddTdqo6XFW/87Lt1sCFZEzplr3abJNq5bl/5nK2pqYFOyRjCkW+BjWIyMhABWKM+VVkmVAmDW5LeGgII6cncyz9TLBDMibg8jvK7q6ARGGM+Y1aFaIYf2sbtu0/zoOzVpKVZYMcTMmW34QkAYnCGJOrTg0r8beeTfhy3V7GfW1zGpuSLb8JqVdAojDGeDWkcz1ubFOLsV9u4ou1e4MdjjEB48+KsQ+4K8YK8E8RWSYiVxdCbMYYnEEO/3dDc1rWiuXBWSvYvM8GOZiSyZ8jpGHuirFXA/HA7cC/AhqVMeYcEeGhTLytLWXDQhg5PckGOZgSyZ+ElH3d6FqcJcxXYteSjCl0NeIiGT+wDTsOnGD0bBvkYEoefxJSsoh8jpOQPhORGCArsGEZY3LTsUElHr22CV+s3cuEBZuDHY4xBcrXTA3ZhgMXAVtV9YSIVMI5bWeMCYJhXeqxKuUw//liI81rxtLtQpvJwZQM/ixhnqWqy1T1sPv6gKquCnxoxpjciAj/6tuSxtXK88DMFew8cCLYIRlTIGyBPmOKocgyobx6W1sARk5P4uTpzCBHZMzvF9CEJCLXiMgGEdksIg/nsr2siMxyt/8oIvU8tj3ilm8Qke559Ski9d0+Nrl9lnHLR4vIWnfpjK9EpK5HmyFu/U0iMiRQn4MxgVCnUhQv9r+IDXuP8fB7q2y5ClPsne+KsdF+1AkFxgM9gKbAABFpmqPacOCQql4AvAA847ZtCvQHmgHXABNEJDSPPp8BXlDVBJwlM4a75cuBRFVtCcwB/u3uoyLwGNABaA88JiIV8vtZGBNM3S6swh+vasQHK3YzddH2YIdjzO9yvkdIa/2o0x7YrKpbVfU0MBPok6NOH2Ca+3wOcIV7A24fYKaqnlLVbcBmt79c+3TbXO72gdvn9QCqOl9Vs0+y/wDUcp93B75Q1YOqegj4Aif5GVOs3NPtAq5qWpUnP1rHj1sPBDscY86b11F2IjLa2yYgzyMkoCawy+N1Cs7RSK51VDVDRI4AldzyH3K0rek+z63PSsBhVc3Ipb6n4cAnPuL7TRt3hvORAHXq1MmlS2OCKyREeP7mVvQZ/z33vr2MeaMupkZcZLDDMibffB0hPQVUAGJyPKLzaJctt5tnc57k9lanoMp/3ZHIbUAi8Gw+4kNVJ6lqoqomxsfH59LEmOCLiQhn0qBE0s9kcef0ZNLP2CAHU/z4ug9pGTBXVZNzbhCREX70nQLU9nhdC9jtpU6KiIQBscDBPNrmVr4fiBORMPco6Zx9iciVwF+AS1X1lMe+u+Xoa4Ef78uYIumCKtGMveUiRryRxCPv/cTzN7fCOZttTPHg60jndmCHl22JfvS9FEhwR7+VwRmkMC9HnXlA9ui2fsDX6gwVmgf0d0fh1QcSgCXe+nTbzHf7wO3zAwARaQ26exezAAAdGklEQVS8CvRW1X0e+/4MuFpEKriDGa52y4wptq5sWpXRVzXi/eU/M/m7bcEOx5h88XqEpKobcpaJSDVV/UVV85wD370mNArnl3wo8LqqrhGRx4EkVZ0HTAami8hmnCOj/m7bNSIyG2fwRAZwr6pmujH8pk93lw8BM0XkSZyRdZPd8mdxTjO+4/61uFNVe6vqQRF5AifJATyuqgfzel/GFHWjLruANbuP8PQn62lSvTxdLqgc7JCM8Yvk594FEVmmqm0CGE+RlpiYqElJScEOw5g8pZ3K4Ibx37M/7RTzRl1M7YpRwQ7JlGIikqyqeZ5ZsxVjjSmBosuG8drgRDKzlJHTkzlxOiPvRsYEWX4T0msBicIYU+DqVS7HuAGtWf/LUcbMsZkcTNHnNSGJyEciMlBEymWXqeqEwgnLGFMQul1YhTHdG/Phqj1MXLg12OEY45OvI6RJwHXANnduuOuz54czxhQfd13agJ4tq/Pvz9azYMO+vBsYEyReE5KqfqCqA4C6wHs4Q6l3isjrInJVYQVojPl9RIRn+znLVdw3Yznb9h8PdkjG5Mqf9ZBOquosVb0B516d1sCnAY/MGFNgosqEMWlQW8JChBHTlnI0/UywQzLmN/JMSCJSVUTuE5HvgbnA50DbgEdmjClQtStGMX5gG3YcOMH9M5aTmWWDHEzR4mtQwx0i8jXOFEKNgDGq2kBVH1LVFYUWoTGmwHRuWJl/9G7Ggg2pPPPp+mCHY8w5fM1l1xn4F/ClqmYVUjzGmAC7rWNdNvxyjEnfbKVR1Rj6ta2VdyNjCoGvQQ23q+rngIrIbSLydwARqSMi7QstQmNMgft7r6Z0bliJR9/7ieQdNmOWKRr8uTF2AtAJGOC+PoazaqsxppgKDw1hwsA21IiL4M7pyfx8+GSwQzLGr4TUQVXvBdIB3NVV7X4kY4q5uKgy/HdIO05lZDFiWhLHT9n0Qia4/ElIZ0QkFHfxOhGJB+yakjElwAVVonn51jZs+OUof5i1giwbeWeCyJ+ENA54H6giIv8HfIezmqwxpgS4tFE8f7+uKV+s3Wsj70xQ+RplB4CqviUiycAVOLN9X6+q6wIemTGm0AzpXI8tqcd59ZutNIgvxy3t6gQ7JFMKeU1IIlLR4+U+YIbnNlvMzpiSQ0R4rFdTth84zl/eX03tilF0bmgL+5nC5euU3X5gBZDkPpI9HrZKnTElTFhoCOMHtqF+5XLc/eYytqSmBTskU8r4SkgvAYdw5q0bAjRQ1fruo0GhRGeMKVTlI8J5fWg7wkKEYVOXcvD46WCHZEoRXzfGPgBcBLwDDAKWi8i/RaR+YQVnjCl8tStGMWlwInuOpHPn9CTSz2QGOyRTSvgcZaeO+cAYYCJwO3BlYQRmjAmetnUr8J+bWrF0+yH+9M5KGw5uCoWvQQ3lgD7ALUA8zppIbVR1VyHFZowJol6tavDz4ZP865P11KwQySM9mgQ7JFPC+Rr2vQ/YhDO6bjPOjbHtRKQdgKq+F/jwjDHBdOclDUg5dIJXF26lZlwkgzvVC3ZIpgTzlZDewUlCjd2HJ8U5YjLGlGAiwj96NeOXI+k8Nm8NVctH0L1ZtWCHZUooUbVzw/5KTEzUpCQb8W5KnxOnMxjw2o+s33OUt+/oSNu6FYIdkilGRCRZVRPzqudrgb7bRMTX9oYicvH5BmiMKT6iyoTx+pBEqsdGMGLaUrbaPUomAHyNsquEM9T7dRG5V0RuFpHBIvK4iCwE/g3sLZwwjTHBVim6LNOGtSdEhCFTlpB67FSwQzIljK/7kF4E2uAMaojHmcuuDfAzMEhVb1TVTYUSpTGmSKhbqRyvD23H/mOnGTZ1qS1ZYQqUXUPKB7uGZIzj6/V7ueONZLomVOa1wYmEh/qzcIAprX73NSRjjPHm8sZV+b/rm7NgQ6rdOGsKTJ7LTxhjTG76t6/DgeOnefazDcRFhvOP3s0QkWCHZYoxS0jGmPN2T7eGHD5xmte+3UZsZDijr74w2CGZYizPhCQiVXFWiK2hqj1EpCnQSVUnBzw6Y0yRJiI8em0Tjpw8w7ivN1M+MpwRXW0xAHN+/LmGNBX4DKjhvt4I/CFQARljihcR4em+Lbm2RTWe/Ggds5buDHZIppjyJyFVVtXZQBaAqmYANh+9Meas0BBh7C2tubRRPI+89xMfrtod7JBMMeRPQjouIpVw5q9DRDoCRwIalTGm2CkTFsLE29rStm4F/jBzBfPX7wt2SKaY8SchjQbmAQ1F5HvgDeD+gEZljCmWIsuEMnloOxpXj+GuN5P5YeuBYIdkihF/EtIa4FKgM3An0AxYH8igjDHFV/mIcN4Y1oE6FaMYNnUpS7cfDHZIppjwJyEtVtUMVV2jqqtV9Qyw2J/OReQaEdkgIptF5OFctpcVkVnu9h9FpJ7Htkfc8g0i0j2vPkWkvtvHJrfPMm75JSKyTEQyRKRfjv1nisgK9zHPn/dkjMlbxXJleGtEB6rFRjDk9SWWlIxffM3mXU1E2gKRItJaRNq4j25AVF4di0goMB7oATQFBrhDxj0NBw6p6gXAC8AzbtumQH+co7FrgAkiEppHn88AL6hqAnDI7RtgJzAUeDuXME+q6kXuo3de78kY478q5SOYeUfHs0lpyTZLSsY3X0dI3YHngFrA88B/3Mdo4FE/+m4PbFbVrap6GpiJsyS6pz7ANPf5HOAKcW717gPMVNVTqroNZ8Xa9t76dNtc7vaB2+f1AKq6XVVX4Y4SNMYUHs+kNHTKEn60a0rGB1+zfU9T1cuAoap6mcejt5/Ll9cEdnm8TnHLcq3jDic/grPshbe23sorAYfdPrztKzcRIpIkIj+IyPW5VRCRkW6dpNTUVD+6NMZ4qlI+gpkjO1I9NoKhU5baQAfjVZ7XkFT1XRHpKSJjROTv2Q8/+s5tUqucMzB6q1NQ5Xmp485AeyswVkQa/qYT1UmqmqiqifHx8X50aYzJqUpMBDNHdqJWhUiGTlnCos37gx2SKYLyTEgiMhG4BbgP5xf/TUBdP/pOAWp7vK4F5Lxb7mwdEQkDYoGDPtp6K98PxLl9eNvXb6jqbvffrcACoHXeb8sYcz7iY8oyY2RH6lYsx+1Tl/LdJktK5lz+jLLrrKqDcQYf/BPoxLlJwZulQII7+q0MziCFnCPZ5gFD3Of9gK/VWaBpHtDfHYVXH0gAlnjr020z3+0Dt88PfAUnIhVEpKz7vDLQBVjrx/syxpynytFlefuODtSvXI7h05Yyf4PdPGt+5U9CSnf/PSEiNYAzQP28GrnXc0bhzIO3DpitqmvcJdCzR7RNBiqJyGacwRIPu23XALNxEsSnwL2qmumtT7evh4DRbl+V3L4RkXYikoJzZPeqiGTXbwIkichKnGT2L1W1hGRMgFWKLsuMOzqSUDWakW8k8enqPcEOyRQRea4YKyJ/A17CWcJ8PM61mddU1Z/rSCWKrRhrTME5cvIMt09ZwsqUI/znplZc39qfcUimOCqQFWNFJAT4SlUPq+q7ONeOGpfGZGSMKVixkeFMH96B9vUq8uDsFcxeuivvRqZE85mQVDUL596j7NenVNUmVjXGFIhyZcOYcns7uibEM+bdVUz/YUewQzJB5M81pM9F5EaxtYmNMQEQER7KpEFtubJJFf42dzX//XZrsEMyQeLvbN/vAKdE5KiIHBORowGOyxhTikSEhzJhYFt6tqjOkx+t48UvN5HX9W1T8uS5hLmqxhRGIMaY0q1MWAgv9r+IiPBQXvhyIydOZ/Bwj8bYyZnSI8+EZIwxhSUsNIRn+7Ukqkwor36zlbRTGTzRpzkhIZaUSgNLSMaYIiUkRHi8TzPKlQ1j4sItHD+VwbM3tSI81J8rDKY4s4RkjClyRISHezQmJiKMZz/bwPHTmbw0oDUR4aHBDs0EkD9z2VXM5RFeGMEZY0q3ey+7gH/2bsYXa/cyfNpSjp/KyLuRKbb8OQZeBqQCG4FN7vNt7iqsbQMZnDHGDOlcj+duasXiLQe49bUfOHj8dLBDMgHiT0L6FLhWVSuraiWc1VpnA/cAEwIZnDHGAPRrW4tXByWy/pdj9Ju4iJRDJ4IdkgkAfxJSoqp+lv1CVT8HLlHVH4CyAYvMGGM8XNW0KtOHdyD12ClufGUR63+x2yFLGn8S0kEReUhE6rqPMcBhEQnFlgU3xhSi9vUrMueuzgjCTRMX2+qzJYw/CelWnAXv5rqP2sAAIBS4OXChGWPMb11YLYZ37+lM1fIRDH59iS1fUYL4k5CiVfU+VW3tPu4D6qnqaVXdHOgAjTEmp5pxkcy5qxPNa5Tn7reW2aSsJYQ/Cek9ETm7UImIXAK8HriQjDEmb3FRZXhrREcuv9CZlPXfn663+e+KOX8S0p3AXBGpJiLXAuOAawMbljHG5C2yTCivDmrLgPa1mbBgC6Nnr+R0hl3aLq78mVx1qYjcD3yOs5z5VaqaGvDIjDHGD2GhITx1QwtqxkXy3Ocb+eVIOhMHtSU20u7fL268JiQR+R/OcuXZooAjwGQRQVV7Bzo4Y4zxh4gw6vIEasRF8tC7q7hp4iJeH9qOWhWigh2ayQdfR0jPFVoUxhhTAPq2qUW18hHc+WYyN0xYxJSh7WheMzbYYRk/SX4uAopIZeCAltIrh4mJiZqUlBTsMIwxedi49xi3T1nKoROnGde/NVc2rRrskEo1EUlW1cS86nkd1CAiHUVkgYi8JyKtRWQ1sBrYKyLXFGSwxhhTkBpVjeH9ezvTMD6aO6YnMembLTYCrxjwNcruZeApYAbwNTBCVasBlwBPF0Jsxhhz3qrERDD7zk5c27w6T328njFzVtkIvCLO1zWkMHfeOkTkcXfuOlR1vS0pbIwpDiLLhPLSgNY0rBLNuK82sePgCV69rS0VypUJdmgmF76OkDz/lDiZY5sd+xpjioWQEGH0VY14sf9FrNh5mOsnfM/mfceCHZbJha+E1EpEjorIMaCl+zz7dYtCis8YYwpEn4tqMmNkB46fyuCG8YuYv2FfsEMyOXhNSKoaqqrlVTVGVcPc59mv7Y4zY0yx07ZuRT4YdTG1K0YxfOpSG+xQxPgzdZAxxpQYNeMimXN3J3q4gx1Gz15J+pnMYIdlsIRkjCmFosqE8fKtrfnjVY14f/nP3PraD+xPOxXssEo9S0jGmFJJRLjvigReGdiGtXuOcv3479m41wY7BJMlJGNMqdajRXVmjezEqYwsbhj/PZ+v+SXYIZValpCMMaVeq9px/G/UxVxQJZqR05MZ99UmsrJssENhs4RkjDFAtdgIZt3Zib6ta/L8Fxu5881kjqWfCXZYpYolJGOMcUWEh/Kfm1vxWK+mfL1+H30nLGLngRPBDqvUsIRkjDEeRITbu9Rn+vD2pKadovf471i0eX+wwyoVLCEZY0wuOjeszAf3diE+uiy3Tf6RVxfaTbSBZgnJGGO8qFupHHPv7UKP5tV5+pP13PVmMkdO2nWlQLGEZIwxPpQr69xE+9eeTfhq3T56vfQdq38+EuywSqSAJiQRuUZENojIZhF5OJftZUVklrv9RxGp57HtEbd8g4h0z6tPEanv9rHJ7bOMW36JiCwTkQwR6Zdj/0Pc+ptEZEggPgNjTPEnIozo2oBZd3bkTGYWfScs4s0fdtgpvAIWsIQkIqHAeKAH0BQYICJNc1QbDhxS1QuAF4Bn3LZNgf5AM+AaYIKIhObR5zPAC6qaABxy+wbYCQwF3s4RX0XgMaAD0B54TEQqFMy7N8aURG3rVuSj+7vSqWEl/jp3NffNWM5RGxpeYAJ5hNQe2KyqW1X1NDAT6JOjTh9gmvt8DnCFOKv/9QFmquopVd0GbHb7y7VPt83lbh+4fV4PoKrbVXUV567vBNAd+EJVD6rqIeALnORnjDFeVSxXhilD2/Hn7hfyyepf6DnuW5bvPBTssEqEQCakmsAuj9cpblmudVQ1AzgCVPLR1lt5JeCw24e3fZ1PfIjISBFJEpGk1NTUPLo0xpQGISHCvZddwOw7O5KVBTdNXMz4+ZvJtNkdfpdAJqTc1jnP+dPyVqegyn3xq42qTlLVRFVNjI+Pz6NLY0xp0rZuRT5+oCvdm1fj2c82MOC1H9h10G6kPV+BTEgpQG2P17WA3d7qiEgYEAsc9NHWW/l+IM7tw9u+zic+Y4zxKTYynJcHtObZfi1Zu/soPV78ltlJu2zAw3kIZEJaCiS4o9/K4AxSmJejzjwge3RbP+BrdX6K84D+7ii8+kACsMRbn26b+W4fuH1+kEd8nwFXi0gFdzDD1W6ZMcbki4hwU2JtPnmgK01rlGfMnFXcOT3Z1ljKp4AlJPd6ziicX/LrgNmqukZEHheR3m61yUAlEdkMjAYedtuuAWYDa4FPgXtVNdNbn25fDwGj3b4quX0jIu1EJAW4CXhVRNa4+zgIPIGT5JYCj7tlxhhzXmpXjGLmHR35y7VNWLAhlaueX8jc5T/b0ZKfxD4o/yUmJmpSUlKwwzDGFAOb9h5jzLurWL7zMJc0iueJPs2oW6lcsMMKChFJVtXEvOrZTA3GGBMACVVjmHNXZx7r1ZRlOw5x1Qvf8NJXmzidkfMOFJPNEpIxxgRIaIgzc/hXf7yUq5pU5T9fbKTnuG9ZtMVmD8+NJSRjjAmwquUjGD+wDa8PTeTkmUxufe1H7nkrmR0Hjgc7tCIlLO8qxhhjCsLljavSuWFlJn2zlVcWbOGLtXu5tX0d7r3sAqqUjwh2eEFngxrywQY1GGMKyr6j6bzw5SZmJ+0iLEQY1LEud3VrSOXossEOrcD5O6jBElI+WEIyxhS0HQeO8+JXm5i7/GciwkMZ1Kkuw7vUL1FHTJaQAsASkjEmUDbvS2PcV5v4cNVuwkJCuLFtTUZ0bUDD+Ohgh/a7WUIKAEtIxphA277/OJO+3cqc5BTOZGbRrVE8gzvVo2tCZcJCi+c4NEtIAWAJyRhTWPannWL64h28vWQnqcdOER9Tll4ta3B96xq0qBmLs+pO8WAJKQAsIRljCtvpjCy+Xr+Xuct38/X6fZzOzKJupSiubFKVK5tUpV29CkX+yMkSUgBYQjLGBNORE2f4ZPUePl3zC4s2H+B0ZhaxkeG0q1eRdvUq0L5+RZrXjCW8iCUoS0gBYAnJGFNUpJ3K4LtNqXy9fh9Ltx9i237nJtvI8FAuqh1H6zpxtKwVR6Oq0dSuGBXUJGUJKQAsIRljiqrUY6dYsu0gS7cfJGnHQdbvOUaGu4JtWIhQu2IUdSpGUSMukuqxEVQrH0F8TFkqRZchLrIM5SPDiC4bFpDTf/4mJJupwRhjSoD4mLL0bFmdni2rA5B+JpN1e46yJfU4W1PT2H7gOLsOnmT1z0c4cPy0137KhIYQER5CRHgoEeGhhIcKqtCkennGD2wT0PdgCckYY0qgiPBQWtepQOs6FX6zLf1MJqnHTpGadoqDaac5dOI0x9IzSDuVwckzmZw87TxOZWRyJlMRgQaVA790hiUkY4wpZSLCQ6ldMYraFaOCHco5itZQDGOMMaWWJSRjjDFFgiUkY4wxRYIlJGOMMUWCJSRjjDFFgiUkY4wxRYIlJGOMMUWCJSRjjDFFgs1llw8ikgrsCHYcQVQZ2B/sIILI3n/pfv9gn8H5vv+6qhqfVyVLSMZvIpLkzwSJJZW9/9L9/sE+g0C/fztlZ4wxpkiwhGSMMaZIsIRk8mNSsAMIMnv/prR/BgF9/3YNyRhjTJFgR0jGGGOKBEtIxhhjigRLSOYcInKNiGwQkc0i8nAu24eKSKqIrHAfI4IRZ6CIyOsisk9EVnvZLiIyzv18VolIYNd0LmR+vP9uInLE4+f/98KOMZBEpLaIzBeRdSKyRkQeyKVOSf8O+PMZBOR7YCvGmrNEJBQYD1wFpABLRWSeqq7NUXWWqo4q9AALx1TgZeANL9t7AAnuowPwivtvSTEV3+8f4FtVva5wwil0GcAfVXWZiMQAySLyRY7/AyX9O+DPZwAB+B7YEZLx1B7YrKpbVfU0MBPoE+SYCpWqfgMc9FGlD/CGOn4A4kSkeuFEF3h+vP8STVX3qOoy9/kxYB1QM0e1kv4d8OczCAhLSMZTTWCXx+sUcv8i3uieqpgjIrULJ7Qiw9/PqCTrJCIrReQTEWkW7GACRUTqAa2BH3NsKjXfAR+fAQTge2AJyXiSXMpy3hfwP6CeqrYEvgSmBTyqosWfz6gkW4YzL1kr4CVgbpDjCQgRiQbeBf6gqkdzbs6lSYn7DuTxGQTke2AJyXhKATyPeGoBuz0rqOoBVT3lvnwNaFtIsRUVeX5GJZmqHlXVNPf5x0C4iFQOclgFSkTCcX4Rv6Wq7+VSpcR/B/L6DAL1PbCEZDwtBRJEpL6IlAH6A/M8K+Q4V94b5/xyaTIPGOyOtOoIHFHVPcEOqrCISDUREfd5e5zfIQeCG1XBcd/bZGCdqj7vpVqJ/g748xkE6ntgo+zMWaqaISKjgM+AUOB1VV0jIo8DSao6D7hfRHrjjMQ5CAwNWsABICIzgG5AZRFJAR4DwgFUdSLwMXAtsBk4AdwenEgDw4/33w+4W0QygJNAfy1Z0710AQYBP4nICrfsUaAOlI7vAP59BgH5HtjUQcYYY4oEO2VnjDGmSLCEZIwxpkiwhGSMMaZIsIRkjDGmSLCEZIwxpkiwhGTMeRCRWiLygYhsEpEtIvKie+9W9vYZ7vRKD4pIY3dG5OUi0jCf+xkqIjV8bB8rIpfkUt5NRD7M37sqOCIySkRK2nBoE2CWkIzJJ/eGwPeAuaqaADQCooH/c7dXAzqraktVfQG4HvhAVVur6pZ87m4okGtCEpGKQEd3QtSAcWeBz6/XgfsLOhZTsllCMib/LgfSVXUKgKpmAg8Cw0QkCvgcqOIeFT0G/AEY4a4xU05EPnInpVwtIrcAiEhbEVkoIski8pmIVBeRfkAi8JbbV2SOOPoBn2a/EGctq/Ui8h3Q16O8nDjrHC11j9L6uOVRIjLbPZKbJSI/ikiiuy1NRB4XkR9xJtH8TXxuvYYi8qlb/q2INHY/kxPAdvcufmP8YjM1GJN/zYBkzwJVPSoiO4ELcKZU+lBVL4KzR1RpqvqciNwI7FbVnu62WHfesJeAPqqa6iap/1PVYe7MGX9S1aRc4ugCzHH7icCZW/BynBkEZnnU+wvwtdtfHLBERL4E7gYOqWpLEWkOrPBoUw5Yrap/d+NbmDM+YBgwCbhLVTeJSAdgghsDQBLQFViSj8/WlGKWkIzJPyH32Z29lXv6CXhORJ7BSVrfusmgOfCFOz1YKODP3GjVgVT3eWNgm6puAhCRN4GR7rargd4i8if3dQTONDAXAy8CqOpqEVnl0XcmzuSaABfmFp84s0F3Bt5xywHKevSxz43LGL9YQjIm/9YAN3oWiEh5nBmgtwBVvDVU1Y0i0hZnLrSnReRz4H1gjap2ymccJ3GSy9nuvdQT4EZV3ZAj5tyWUciW7p6KzG7/m/jc93w4+0gwFxFujMb4xa4hGZN/XwFRIjIYzl70/w8w1b124pU7Yu6Eqr4JPAe0ATYA8SLSya0TLr8ueHYMiPHS3TqcU4QA64H6HqP4BnjU+wy4z2N25tZu+XfAzW5ZU6CFl/3kGp+7Rs42EbnJLRcRaeXRrhGw2vunYcy5LCEZk0/urMY3ADeJyCZgI5COMyNyXlrgXMNZgXNt50l3ufh+wDMishLnWk5nt/5UYKKXQQ0f4czMjaqm45yi+8gd1LDDo94TODN2rxKR1e5rcK73xLun6h4CVgFHcnm/vuIbCAx3y9dw7pL3XXAWcTTGLzbbtzHFmJt8rlPVw+fRNhQIV9V098jqK6CRm4B+b1ytgdGqOuj39mVKD7uGZEzx9kecAQr5TkhAFDDfHUUnwN0FkYxclYG/FVBfppSwIyRjjDFFgl1DMsYYUyRYQjLGGFMkWEIyxhhTJFhCMsYYUyRYQjLGGFMk/D+c27rHC6WHmAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "offset = model.bg_rate.offset_bin_center\n",
    "energies = model.bg_rate.energy  \n",
    "iE = 6\n",
    "\n",
    "x = offset\n",
    "y = model.bg_rate.data[iE,:]\n",
    "plt.plot(x, y, label=\"bkg model smooth\")\n",
    "title = \"energy band: \"+str(\"%.2f\"%energies[iE].value)+\"-\"+str(\"%.2f\"%energies[iE+1].value)+\" TeV\"\n",
    "plt.title(title)\n",
    "plt.xlabel(\"Offset (degree)\")\n",
    "plt.ylabel(\"Bkg rate (MeV-1 s-1 sr-1)\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Background rate spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Bkg rate (MeV-1 s-1 sr-1)')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = energies.log_centers\n",
    "y = model.bg_rate.data[:,10]\n",
    "plt.loglog(x, y, label=\"bkg model smooth\")\n",
    "plt.title(\"offset: \"+str(\"%.2f\"%offset[10].value)+\" deg\")\n",
    "plt.xlabel(\"Energy (TeV)\")\n",
    "plt.ylabel(\"Bkg rate (MeV-1 s-1 sr-1)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Background rate image with energy and offset axes\n",
    "\n",
    "It doesn't look good in this case.\n",
    "To do this well, you need to use more off or AGN runs to build the background model!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<matplotlib.axes._subplots.AxesSubplot at 0x1139aebe0>,\n",
       " <matplotlib.colorbar.Colorbar at 0x113a5df60>)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.bg_rate.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Make new index table\n",
    "\n",
    "Here we first copy the dataset of the 4 crab runs from gammapy-extra in a new directory containing the data you will use for the analysis. \n",
    "\n",
    "We use the same dataset to produce the bkg or for the analysis. Of course normally you produce the bkg model using thousands of AGN runs not the 4 Crab test runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a new hdu table in your dataset directory that contains the link to the acceptance curve to use to build the bkg model in your cube analysis\n",
    "data_dir = make_fresh_dir('data')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Attribute `BASE_DIR` of type <class 'gammapy.extern.pathlib.PosixPath'> cannot be added to FITS Header - skipping [astropy.io.fits.convenience]\n"
     ]
    }
   ],
   "source": [
    "ds = DataStore.from_dir(\"$GAMMAPY_EXTRA/datasets/hess-crab4-hd-hap-prod2\")\n",
    "ds.copy_obs(ds.obs_table, data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The hdu_table in this directory contains no link to a bkg model for each observation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>HDUIndexTable length=28</i>\n",
       "<table id=\"table4623613008\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>OBS_ID</th><th>HDU_TYPE</th><th>HDU_CLASS</th><th>FILE_DIR</th><th>FILE_NAME</th><th>HDU_NAME</th><th>SIZE</th><th>MTIME</th><th>MD5</th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>bytes6</th><th>bytes10</th><th>bytes26</th><th>bytes30</th><th>bytes12</th><th>int64</th><th>float64</th><th>bytes32</th></tr></thead>\n",
       "<tr><td>23523</td><td>gti</td><td>gti</td><td>run023400-023599/run023523</td><td>hess_events_023523.fits.gz</td><td>GTI</td><td>620975</td><td>1455089616.3407502</td><td>9e402094c3a3e05ae4199b7cc9a01215</td></tr>\n",
       "<tr><td>23523</td><td>events</td><td>events</td><td>run023400-023599/run023523</td><td>hess_events_023523.fits.gz</td><td>EVENTS</td><td>620975</td><td>1455089616.3407502</td><td>9e402094c3a3e05ae4199b7cc9a01215</td></tr>\n",
       "<tr><td>23523</td><td>aeff</td><td>aeff_2d</td><td>run023400-023599/run023523</td><td>hess_aeff_2d_023523.fits.gz</td><td>AEFF_2D</td><td>3727</td><td>1455089616.3407502</td><td>6430c082176f092e0aed0f2bf9840915</td></tr>\n",
       "<tr><td>23523</td><td>edisp</td><td>edisp_2d</td><td>run023400-023599/run023523</td><td>hess_edisp_2d_023523.fits.gz</td><td>EDISP_2D</td><td>28963</td><td>1455089616.3407502</td><td>f580ea6cb104e4d6735b8d2940ac6774</td></tr>\n",
       "<tr><td>23523</td><td>psf</td><td>psf_3gauss</td><td>run023400-023599/run023523</td><td>hess_psf_3gauss_023523.fits.gz</td><td>PSF_2D_GAUSS</td><td>3027</td><td>1455089616.3447502</td><td>87f2d5c5ca56575a4a083b33e9700312</td></tr>\n",
       "<tr><td>23523</td><td>psf</td><td>psf_king</td><td>run023400-023599/run023523</td><td>hess_psf_king_023523.fits.gz</td><td>PSF_2D_KING</td><td>1823</td><td>1455089616.3447502</td><td>7760e349a40883345406c7e3ea1cbd54</td></tr>\n",
       "<tr><td>23523</td><td>psf</td><td>psf_table</td><td>run023400-023599/run023523</td><td>hess_psf_table_023523.fits.gz</td><td>PSF_2D_TABLE</td><td>221574</td><td>1455089616.3487504</td><td>74b745938341d0f64b79f60da7f1ad0f</td></tr>\n",
       "<tr><td>23526</td><td>psf</td><td>psf_king</td><td>run023400-023599/run023526</td><td>hess_psf_king_023526.fits.gz</td><td>PSF_2D_KING</td><td>1834</td><td>1455089616.564754</td><td>5873e4ec0771bdfcc6d82608199a4067</td></tr>\n",
       "<tr><td>23526</td><td>psf</td><td>psf_3gauss</td><td>run023400-023599/run023526</td><td>hess_psf_3gauss_023526.fits.gz</td><td>PSF_2D_GAUSS</td><td>3002</td><td>1455089616.564754</td><td>f27364b40bbf8e35c747828e60224b28</td></tr>\n",
       "<tr><td>23526</td><td>edisp</td><td>edisp_2d</td><td>run023400-023599/run023526</td><td>hess_edisp_2d_023526.fits.gz</td><td>EDISP_2D</td><td>28882</td><td>1455089616.560754</td><td>c7e99f4d282a55c7fdd4024167bdbef5</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>23559</td><td>events</td><td>events</td><td>run023400-023599/run023559</td><td>hess_events_023559.fits.gz</td><td>EVENTS</td><td>620577</td><td>1455089616.7727578</td><td>311bd2ede3dddb3504c11b9c3dadac32</td></tr>\n",
       "<tr><td>23559</td><td>gti</td><td>gti</td><td>run023400-023599/run023559</td><td>hess_events_023559.fits.gz</td><td>GTI</td><td>620577</td><td>1455089616.7727578</td><td>311bd2ede3dddb3504c11b9c3dadac32</td></tr>\n",
       "<tr><td>23559</td><td>aeff</td><td>aeff_2d</td><td>run023400-023599/run023559</td><td>hess_aeff_2d_023559.fits.gz</td><td>AEFF_2D</td><td>3715</td><td>1455089616.776758</td><td>50eb94ec65ac146ff60845860d84a1a2</td></tr>\n",
       "<tr><td>23592</td><td>psf</td><td>psf_king</td><td>run023400-023599/run023592</td><td>hess_psf_king_023592.fits.gz</td><td>PSF_2D_KING</td><td>1818</td><td>1455089616.9967618</td><td>514f94397507d1160341387ed56e80ba</td></tr>\n",
       "<tr><td>23592</td><td>gti</td><td>gti</td><td>run023400-023599/run023592</td><td>hess_events_023592.fits.gz</td><td>GTI</td><td>598107</td><td>1455089616.9887617</td><td>3c94433be8e9f29aa198065403570dbb</td></tr>\n",
       "<tr><td>23592</td><td>events</td><td>events</td><td>run023400-023599/run023592</td><td>hess_events_023592.fits.gz</td><td>EVENTS</td><td>598107</td><td>1455089616.9887617</td><td>3c94433be8e9f29aa198065403570dbb</td></tr>\n",
       "<tr><td>23592</td><td>aeff</td><td>aeff_2d</td><td>run023400-023599/run023592</td><td>hess_aeff_2d_023592.fits.gz</td><td>AEFF_2D</td><td>3721</td><td>1455089616.9927616</td><td>5e2f5dc70fecb5060b6e1662d59d9507</td></tr>\n",
       "<tr><td>23592</td><td>edisp</td><td>edisp_2d</td><td>run023400-023599/run023592</td><td>hess_edisp_2d_023592.fits.gz</td><td>EDISP_2D</td><td>28931</td><td>1455089616.9927616</td><td>37db40409b6c37a9060aef8817a14ffe</td></tr>\n",
       "<tr><td>23592</td><td>psf</td><td>psf_3gauss</td><td>run023400-023599/run023592</td><td>hess_psf_3gauss_023592.fits.gz</td><td>PSF_2D_GAUSS</td><td>3015</td><td>1455089616.9967618</td><td>3763f28acd61d96724ad5584fe1f39c4</td></tr>\n",
       "<tr><td>23592</td><td>psf</td><td>psf_table</td><td>run023400-023599/run023592</td><td>hess_psf_table_023592.fits.gz</td><td>PSF_2D_TABLE</td><td>221709</td><td>1455089617.0007617</td><td>38be05a13aa0bd492c9979c5b7d3d47f</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<HDUIndexTable length=28>\n",
       "OBS_ID HDU_TYPE ...       MTIME                      MD5               \n",
       "int64   bytes6  ...      float64                   bytes32             \n",
       "------ -------- ... ------------------ --------------------------------\n",
       " 23523      gti ... 1455089616.3407502 9e402094c3a3e05ae4199b7cc9a01215\n",
       " 23523   events ... 1455089616.3407502 9e402094c3a3e05ae4199b7cc9a01215\n",
       " 23523     aeff ... 1455089616.3407502 6430c082176f092e0aed0f2bf9840915\n",
       " 23523    edisp ... 1455089616.3407502 f580ea6cb104e4d6735b8d2940ac6774\n",
       " 23523      psf ... 1455089616.3447502 87f2d5c5ca56575a4a083b33e9700312\n",
       " 23523      psf ... 1455089616.3447502 7760e349a40883345406c7e3ea1cbd54\n",
       " 23523      psf ... 1455089616.3487504 74b745938341d0f64b79f60da7f1ad0f\n",
       " 23526      psf ...  1455089616.564754 5873e4ec0771bdfcc6d82608199a4067\n",
       " 23526      psf ...  1455089616.564754 f27364b40bbf8e35c747828e60224b28\n",
       " 23526    edisp ...  1455089616.560754 c7e99f4d282a55c7fdd4024167bdbef5\n",
       "   ...      ... ...                ...                              ...\n",
       " 23559   events ... 1455089616.7727578 311bd2ede3dddb3504c11b9c3dadac32\n",
       " 23559      gti ... 1455089616.7727578 311bd2ede3dddb3504c11b9c3dadac32\n",
       " 23559     aeff ...  1455089616.776758 50eb94ec65ac146ff60845860d84a1a2\n",
       " 23592      psf ... 1455089616.9967618 514f94397507d1160341387ed56e80ba\n",
       " 23592      gti ... 1455089616.9887617 3c94433be8e9f29aa198065403570dbb\n",
       " 23592   events ... 1455089616.9887617 3c94433be8e9f29aa198065403570dbb\n",
       " 23592     aeff ... 1455089616.9927616 5e2f5dc70fecb5060b6e1662d59d9507\n",
       " 23592    edisp ... 1455089616.9927616 37db40409b6c37a9060aef8817a14ffe\n",
       " 23592      psf ... 1455089616.9967618 3763f28acd61d96724ad5584fe1f39c4\n",
       " 23592      psf ... 1455089617.0007617 38be05a13aa0bd492c9979c5b7d3d47f"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(data_dir)\n",
    "data_store.hdu_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to produce a background image or background cube we have to create a hdu table that contains for each observation a link to the bkg model to use depending of the observation conditions of the run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Attribute `BASE_DIR` of type <class 'gammapy.extern.pathlib.PosixPath'> cannot be added to FITS Header - skipping [astropy.io.fits.convenience]\n"
     ]
    }
   ],
   "source": [
    "#Copy the background directory in the one where is located the hdu table, here data\n",
    "shutil.move(str(scratch_dir), str(data_dir))\n",
    "\n",
    "# Create the new hdu table with a link to the background model\n",
    "group_filename = data_dir / 'background/group-def.fits'\n",
    "\n",
    "#relat_path= (scratch_dir.absolute()).relative_to(data_dir.absolute())\n",
    "hdu_index_table = bgmaker.make_total_index_table(\n",
    "    data_store=data_store,\n",
    "    modeltype='2D',\n",
    "    out_dir_background_model=scratch_dir,\n",
    "    filename_obs_group_table=str(group_filename),\n",
    "    smooth=False,\n",
    ")\n",
    "\n",
    "# Write the new hdu table\n",
    "filename = data_dir / 'hdu-index.fits.gz'\n",
    "hdu_index_table.write(str(filename), overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>HDUIndexTable masked=True length=32</i>\n",
       "<table id=\"table4625952840\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>OBS_ID</th><th>HDU_TYPE</th><th>HDU_CLASS</th><th>FILE_DIR</th><th>FILE_NAME</th><th>HDU_NAME</th><th>SIZE</th><th>MTIME</th><th>MD5</th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>str6</th><th>str10</th><th>str26</th><th>str37</th><th>str12</th><th>int64</th><th>float64</th><th>bytes32</th></tr></thead>\n",
       "<tr><td>23523</td><td>gti</td><td>gti</td><td>run023400-023599/run023523</td><td>hess_events_023523.fits.gz</td><td>GTI</td><td>620975</td><td>1455089616.3407502</td><td>9e402094c3a3e05ae4199b7cc9a01215</td></tr>\n",
       "<tr><td>23523</td><td>events</td><td>events</td><td>run023400-023599/run023523</td><td>hess_events_023523.fits.gz</td><td>EVENTS</td><td>620975</td><td>1455089616.3407502</td><td>9e402094c3a3e05ae4199b7cc9a01215</td></tr>\n",
       "<tr><td>23523</td><td>aeff</td><td>aeff_2d</td><td>run023400-023599/run023523</td><td>hess_aeff_2d_023523.fits.gz</td><td>AEFF_2D</td><td>3727</td><td>1455089616.3407502</td><td>6430c082176f092e0aed0f2bf9840915</td></tr>\n",
       "<tr><td>23523</td><td>edisp</td><td>edisp_2d</td><td>run023400-023599/run023523</td><td>hess_edisp_2d_023523.fits.gz</td><td>EDISP_2D</td><td>28963</td><td>1455089616.3407502</td><td>f580ea6cb104e4d6735b8d2940ac6774</td></tr>\n",
       "<tr><td>23523</td><td>psf</td><td>psf_3gauss</td><td>run023400-023599/run023523</td><td>hess_psf_3gauss_023523.fits.gz</td><td>PSF_2D_GAUSS</td><td>3027</td><td>1455089616.3447502</td><td>87f2d5c5ca56575a4a083b33e9700312</td></tr>\n",
       "<tr><td>23523</td><td>psf</td><td>psf_king</td><td>run023400-023599/run023523</td><td>hess_psf_king_023523.fits.gz</td><td>PSF_2D_KING</td><td>1823</td><td>1455089616.3447502</td><td>7760e349a40883345406c7e3ea1cbd54</td></tr>\n",
       "<tr><td>23523</td><td>psf</td><td>psf_table</td><td>run023400-023599/run023523</td><td>hess_psf_table_023523.fits.gz</td><td>PSF_2D_TABLE</td><td>221574</td><td>1455089616.3487504</td><td>74b745938341d0f64b79f60da7f1ad0f</td></tr>\n",
       "<tr><td>23526</td><td>psf</td><td>psf_king</td><td>run023400-023599/run023526</td><td>hess_psf_king_023526.fits.gz</td><td>PSF_2D_KING</td><td>1834</td><td>1455089616.564754</td><td>5873e4ec0771bdfcc6d82608199a4067</td></tr>\n",
       "<tr><td>23526</td><td>psf</td><td>psf_3gauss</td><td>run023400-023599/run023526</td><td>hess_psf_3gauss_023526.fits.gz</td><td>PSF_2D_GAUSS</td><td>3002</td><td>1455089616.564754</td><td>f27364b40bbf8e35c747828e60224b28</td></tr>\n",
       "<tr><td>23526</td><td>edisp</td><td>edisp_2d</td><td>run023400-023599/run023526</td><td>hess_edisp_2d_023526.fits.gz</td><td>EDISP_2D</td><td>28882</td><td>1455089616.560754</td><td>c7e99f4d282a55c7fdd4024167bdbef5</td></tr>\n",
       "<tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr>\n",
       "<tr><td>23592</td><td>gti</td><td>gti</td><td>run023400-023599/run023592</td><td>hess_events_023592.fits.gz</td><td>GTI</td><td>598107</td><td>1455089616.9887617</td><td>3c94433be8e9f29aa198065403570dbb</td></tr>\n",
       "<tr><td>23592</td><td>events</td><td>events</td><td>run023400-023599/run023592</td><td>hess_events_023592.fits.gz</td><td>EVENTS</td><td>598107</td><td>1455089616.9887617</td><td>3c94433be8e9f29aa198065403570dbb</td></tr>\n",
       "<tr><td>23592</td><td>aeff</td><td>aeff_2d</td><td>run023400-023599/run023592</td><td>hess_aeff_2d_023592.fits.gz</td><td>AEFF_2D</td><td>3721</td><td>1455089616.9927616</td><td>5e2f5dc70fecb5060b6e1662d59d9507</td></tr>\n",
       "<tr><td>23592</td><td>edisp</td><td>edisp_2d</td><td>run023400-023599/run023592</td><td>hess_edisp_2d_023592.fits.gz</td><td>EDISP_2D</td><td>28931</td><td>1455089616.9927616</td><td>37db40409b6c37a9060aef8817a14ffe</td></tr>\n",
       "<tr><td>23592</td><td>psf</td><td>psf_3gauss</td><td>run023400-023599/run023592</td><td>hess_psf_3gauss_023592.fits.gz</td><td>PSF_2D_GAUSS</td><td>3015</td><td>1455089616.9967618</td><td>3763f28acd61d96724ad5584fe1f39c4</td></tr>\n",
       "<tr><td>23592</td><td>psf</td><td>psf_table</td><td>run023400-023599/run023592</td><td>hess_psf_table_023592.fits.gz</td><td>PSF_2D_TABLE</td><td>221709</td><td>1455089617.0007617</td><td>38be05a13aa0bd492c9979c5b7d3d47f</td></tr>\n",
       "<tr><td>23526</td><td>bkg</td><td>bkg_2d</td><td>background</td><td>background_2D_group_000_table.fits.gz</td><td>bkg_2d</td><td>--</td><td>--</td><td>--</td></tr>\n",
       "<tr><td>23559</td><td>bkg</td><td>bkg_2d</td><td>background</td><td>background_2D_group_000_table.fits.gz</td><td>bkg_2d</td><td>--</td><td>--</td><td>--</td></tr>\n",
       "<tr><td>23592</td><td>bkg</td><td>bkg_2d</td><td>background</td><td>background_2D_group_000_table.fits.gz</td><td>bkg_2d</td><td>--</td><td>--</td><td>--</td></tr>\n",
       "<tr><td>23523</td><td>bkg</td><td>bkg_2d</td><td>background</td><td>background_2D_group_001_table.fits.gz</td><td>bkg_2d</td><td>--</td><td>--</td><td>--</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<HDUIndexTable masked=True length=32>\n",
       "OBS_ID HDU_TYPE ...       MTIME                      MD5               \n",
       "int64    str6   ...      float64                   bytes32             \n",
       "------ -------- ... ------------------ --------------------------------\n",
       " 23523      gti ... 1455089616.3407502 9e402094c3a3e05ae4199b7cc9a01215\n",
       " 23523   events ... 1455089616.3407502 9e402094c3a3e05ae4199b7cc9a01215\n",
       " 23523     aeff ... 1455089616.3407502 6430c082176f092e0aed0f2bf9840915\n",
       " 23523    edisp ... 1455089616.3407502 f580ea6cb104e4d6735b8d2940ac6774\n",
       " 23523      psf ... 1455089616.3447502 87f2d5c5ca56575a4a083b33e9700312\n",
       " 23523      psf ... 1455089616.3447502 7760e349a40883345406c7e3ea1cbd54\n",
       " 23523      psf ... 1455089616.3487504 74b745938341d0f64b79f60da7f1ad0f\n",
       " 23526      psf ...  1455089616.564754 5873e4ec0771bdfcc6d82608199a4067\n",
       " 23526      psf ...  1455089616.564754 f27364b40bbf8e35c747828e60224b28\n",
       " 23526    edisp ...  1455089616.560754 c7e99f4d282a55c7fdd4024167bdbef5\n",
       "   ...      ... ...                ...                              ...\n",
       " 23592      gti ... 1455089616.9887617 3c94433be8e9f29aa198065403570dbb\n",
       " 23592   events ... 1455089616.9887617 3c94433be8e9f29aa198065403570dbb\n",
       " 23592     aeff ... 1455089616.9927616 5e2f5dc70fecb5060b6e1662d59d9507\n",
       " 23592    edisp ... 1455089616.9927616 37db40409b6c37a9060aef8817a14ffe\n",
       " 23592      psf ... 1455089616.9967618 3763f28acd61d96724ad5584fe1f39c4\n",
       " 23592      psf ... 1455089617.0007617 38be05a13aa0bd492c9979c5b7d3d47f\n",
       " 23526      bkg ...                 --                               --\n",
       " 23559      bkg ...                 --                               --\n",
       " 23592      bkg ...                 --                               --\n",
       " 23523      bkg ...                 --                               --"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdu_index_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "background   background_2D_group_000_table.fits.gz\n"
     ]
    }
   ],
   "source": [
    "print(hdu_index_table[-4][\"FILE_DIR\"], \" \", hdu_index_table[-4][\"FILE_NAME\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "background   background_2D_group_001_table.fits.gz\n"
     ]
    }
   ],
   "source": [
    "print(hdu_index_table[-1][\"FILE_DIR\"], \" \", hdu_index_table[-1][\"FILE_NAME\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "- Use real AGN run\n",
    "- Change the binning for the grouping: thinner zenithal bin, add efficiency binning ....\n",
    "- Change the energy binning (ebounds) and the offset (offset) used to compute the acceptance curve\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "In this tutorial we have created a template background model in the `bkg_2d` format, i.e. with offset and energy axes (see [spec](http://gamma-astro-data-formats.readthedocs.io/en/latest/irfs/background/index.html#bkg-2d-format)).\n",
    "\n",
    "In future tutorials, we will use this background model as one of the model components for source analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
