{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/background_model.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[background_model.ipynb](../_static/notebooks/background_model.ipynb) |\n",
    "[background_model.py](../_static/notebooks/background_model.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make template background model\n",
    "\n",
    "## Introduction \n",
    "\n",
    "In this tutorial, we will create a template background model from scratch. Often, background models are pre-computed and provided for analysis, but it's educational to see how the sausage is made.\n",
    "\n",
    "We will use the \"off observations\", i.e. those without significant gamma-ray emission sources in the field of view from the [H.E.S.S. first public test data release](https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/). This model could then be used in the analysis of sources from that dataset (not done here).\n",
    "\n",
    "We will make a background model that is radially symmetric in the field of view, i.e. only depends on field of view offset angle and energy. At the end, we will save the model in the `BKG_2D` as defined in the [spec](https://gamma-astro-data-formats.readthedocs.io/en/latest/irfs/full_enclosure/bkg/index.html).\n",
    "\n",
    "Note that this is just a quick and dirty example. Actual background model production is done with more sophistication usually using 100s or 1000s of off runs, e.g. concerning non-radial symmetries, binning and smoothing of the distributions, and treating other dependencies such as zenith angle, telescope configuration or optical efficiency. Another aspect not shown here is how to use AGN observations to make background models, by cutting out the part of the field of view that contains gamma-rays from the AGN.\n",
    "\n",
    "We will mainly be using the following classes:\n",
    "        \n",
    "* [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst) to load the runs to use to build the bkg model.\n",
    "* [gammapy.irf.Background2D](..\/api/gammapy.irf.Background2D.rst) to represent and write the background model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As always, we start the notebook with some setup and imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from copy import deepcopy\n",
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.io import fits\n",
    "from astropy.table import Table, vstack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from gammapy.utils.nddata import sqrt_space\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.irf import Background2D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select off data\n",
    "\n",
    "We start by selecting the observations used to estimate the background model.\n",
    "\n",
    "In this case, we just take all \"off runs\" as defined in the observation table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of observations: 45\n"
     ]
    }
   ],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1\")\n",
    "# Select just the off data runs\n",
    "obs_table = data_store.obs_table\n",
    "obs_table = obs_table[obs_table[\"TARGET_NAME\"] == \"Off data\"]\n",
    "observations = data_store.get_observations(obs_table[\"OBS_ID\"])\n",
    "print(\"Number of observations:\", len(observations))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background model\n",
    "\n",
    "The background model we will estimate is a differential background rate model in unit `s-1 MeV-1 sr-1` as a function of reconstructed energy and field of fiew offset.\n",
    "\n",
    "We estimate it by histogramming off data events and then smoothing a bit (not using a good method) to get a less noisy estimate. To get the differential rate, we divide by observation time and also take bin sizes into account to get the rate per energy and solid angle. So overall we fill two arrays called `counts` and `exposure` with `exposure` filled so that `background_rate = counts / exposure` will give the final background rate we're interested in.\n",
    "\n",
    "The processing can be done either one observation at a time, or first for counts and then for exposure. Either way is fine. Here we do one observation at a time, starting with empty histograms and then accumulating counts and exposure. Since this is a multi-step algorithm, we put the code to do this computation in a `BackgroundModelEstimator` class.\n",
    "\n",
    "This functionality was already in Gammapy previously, and will be added back again soon, after `gammapy.irf` has been restructured and improved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BackgroundModelEstimator:\n",
    "    def __init__(self, ebounds, offset):\n",
    "        self.counts = self._make_bkg2d(ebounds, offset, unit=\"\")\n",
    "        self.exposure = self._make_bkg2d(ebounds, offset, unit=\"s MeV sr\")\n",
    "\n",
    "    @staticmethod\n",
    "    def _make_bkg2d(ebounds, offset, unit):\n",
    "        ebounds = ebounds.to(\"MeV\")\n",
    "        offset = offset.to(\"deg\")\n",
    "        shape = len(ebounds) - 1, len(offset) - 1\n",
    "        return Background2D(\n",
    "            energy_lo=ebounds[:-1],\n",
    "            energy_hi=ebounds[1:],\n",
    "            offset_lo=offset[:-1],\n",
    "            offset_hi=offset[1:],\n",
    "            data=np.zeros(shape) * u.Unit(unit),\n",
    "        )\n",
    "\n",
    "    def run(self, observations):\n",
    "        for obs in observations:\n",
    "            self.fill_counts(obs)\n",
    "            self.fill_exposure(obs)\n",
    "\n",
    "    def fill_counts(self, obs):\n",
    "        events = obs.events\n",
    "        data = self.counts.data\n",
    "        counts = np.histogram2d(\n",
    "            x=events.energy.to(\"MeV\"),\n",
    "            y=events.offset.to(\"deg\"),\n",
    "            bins=(data.axes[0].edges, data.axes[1].edges),\n",
    "        )[0]\n",
    "        data.data += counts\n",
    "\n",
    "    def fill_exposure(self, obs):\n",
    "        data = self.exposure.data\n",
    "        energy_width = np.diff(data.axes[0].edges)\n",
    "        offset = data.axes[1].center\n",
    "        offset_width = np.diff(data.axes[1].edges)\n",
    "        solid_angle = 2 * np.pi * offset * offset_width\n",
    "        time = obs.observation_time_duration\n",
    "        exposure = time * energy_width[:, None] * solid_angle[None, :]\n",
    "        data.data += exposure\n",
    "\n",
    "    @property\n",
    "    def background_rate(self):\n",
    "        rate = deepcopy(self.counts)\n",
    "        rate.data.data /= self.exposure.data.data\n",
    "        return rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.98 s, sys: 100 ms, total: 2.08 s\n",
      "Wall time: 2.13 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "ebounds = np.logspace(-1, 2, 20) * u.TeV\n",
    "offset = sqrt_space(start=0, stop=3, num=10) * u.deg\n",
    "estimator = BackgroundModelEstimator(ebounds, offset)\n",
    "estimator.run(observations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's have a quick look at what we did ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "estimator.background_rate.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You could save the background model to a file like this\n",
    "# estimator.background_rate.to_fits().writeto('background_model.fits', overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Zenith dependence\n",
    "\n",
    "The background models used in H.E.S.S. usually depend on the zenith angle of the observation. That kinda makes sense because the energy threshold increases with zenith angle, and since the background is related to (but not given by) the charged cosmic ray spectrum that is a power-law and falls steeply, we also expect the background rate to change.\n",
    "\n",
    "Let's have a look at the dependence we get for this configuration used here (Hillas reconstruction, standard cuts, see H.E.S.S. release notes for more information)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = obs_table[\"ZEN_PNT\"]\n",
    "y = obs_table[\"SAFE_ENERGY_LO\"]\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"Zenith (deg)\")\n",
    "plt.ylabel(\"Energy threshold (TeV)\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = obs_table[\"ZEN_PNT\"]\n",
    "y = obs_table[\"EVENT_COUNT\"] / obs_table[\"ONTIME\"]\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"Zenith (deg)\")\n",
    "plt.ylabel(\"Rate (events / sec)\")\n",
    "plt.ylim(0, 10);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The energy threshold increases, as expected. It's a bit surprising that the total background rate doesn't decreases with increasing zenith angle. That's a bit of luck for this configuration, and because we're looking at the rate of background events in the whole field of view. As shown below, the energy threshold increases (reducing the total rate), but the rate at a given energy increases with zenith angle (increasing the total rate). Overall the background does change with zenith angle and that dependency should be taken into account.\n",
    "\n",
    "The remaining scatter you see in the plots above (in energy threshold and rate) is due to dependence on telescope optical efficiency, atmospheric changes from run to run and other effects. If you're interested in this, [2014APh....54...25H](https://ui.adsabs.harvard.edu/abs/2014APh....54...25H) has some infos. We'll not consider this futher.\n",
    "\n",
    "When faced with the question whether and how to model the zenith angle dependence, we're faced with a complex optimisation problem: the closer we require off runs to be in zenith angle, the fewer off runs and thus event statistic we have available, which will lead do noise in the background model. The choice of zenith angle binning or \"on-off observation mathching\" strategy isn't the only thing that needs to be optimised, there's also energy and offset binnings and smoothing scales. And of course good settings will depend on the way you plan to use the background model, i.e. the science measurement you plan to do. Some say background modeling is the hardest part of IACT data analysis.\n",
    "\n",
    "Here we'll just code up something simple: make three background models, one from the off runs with zenith angle 0 to 20 deg, one from 20 to 40 deg, and one from 40 to 90 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "zenith_bins = [\n",
    "    {\"min\": 0, \"max\": 20},\n",
    "    {\"min\": 20, \"max\": 40},\n",
    "    {\"min\": 40, \"max\": 90},\n",
    "]\n",
    "\n",
    "\n",
    "def make_model(observations):\n",
    "    ebounds = np.logspace(-1, 2, 20) * u.TeV\n",
    "    offset = sqrt_space(start=0, stop=3, num=10) * u.deg\n",
    "    estimator = BackgroundModelEstimator(ebounds, offset)\n",
    "    estimator.run(observations)\n",
    "    return estimator.background_rate\n",
    "\n",
    "\n",
    "def make_models():\n",
    "    for zenith in zenith_bins:\n",
    "        mask = zenith[\"min\"] <= obs_table[\"ZEN_PNT\"]\n",
    "        mask &= obs_table[\"ZEN_PNT\"] < zenith[\"max\"]\n",
    "        obs_ids = obs_table[\"OBS_ID\"][mask]\n",
    "        observations = data_store.get_observations(obs_ids)\n",
    "        yield make_model(observations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.08 s, sys: 104 ms, total: 2.18 s\n",
      "Wall time: 2.07 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "models = list(make_models())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models[0].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models[2].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy = models[0].data.axis(\"energy\").center.to(\"TeV\")\n",
    "y = models[0].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"0 < zen < 20\")\n",
    "y = models[1].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"20 < zen < 40\")\n",
    "y = models[2].data.evaluate(energy=energy, offset=\"0.5 deg\")\n",
    "plt.plot(energy, y, label=\"40 < zen < 90\")\n",
    "plt.loglog()\n",
    "plt.xlabel(\"Energy (TeV)\")\n",
    "plt.ylabel(\"Bkg rate (s-1 sr-1 MeV-1)\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Index tables\n",
    "\n",
    "So now we have radially symmetric background models for three zenith angle bins. To be able to use it from the high-level Gammapy classes like e.g. the MapMaker though, we also have to create a [HDU index table](https://gamma-astro-data-formats.readthedocs.io/en/latest/data_storage/hdu_index/index.html) that declares which background model to use for each observation.\n",
    "\n",
    "It sounds harder than it actually is. Basically you have to some code to make a new `astropy.table.Table`. The most tricky part is that before you can make the HDU index table, you have to decide where to store the data, because the HDU index table is a reference to the data location. Let's decide in this example that we want to re-use all existing files in `$GAMMAPY_DATA/hess-dl3-dr1` and put all the new HDUs (for background models and new index files) bundled in a single FITS file called `hess-dl3-dr3-with-background.fits.gz`, which we will put  in `$GAMMAPY_DATA/hess-dl3-dr1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename = \"hess-dl3-dr3-with-background.fits.gz\"\n",
    "\n",
    "# Make a new table with one row for each observation\n",
    "# pointing to the background model HDU\n",
    "rows = []\n",
    "for obs_row in data_store.obs_table:\n",
    "    # TODO: pick the right background model based on zenith angle\n",
    "    row = {\n",
    "        \"OBS_ID\": obs_row[\"OBS_ID\"],\n",
    "        \"HDU_TYPE\": \"bkg\",\n",
    "        \"HDU_CLASS\": \"bkg_2d\",\n",
    "        \"FILE_DIR\": \"\",\n",
    "        \"FILE_NAME\": filename,\n",
    "        \"HDU_NAME\": \"BKG0\",\n",
    "    }\n",
    "    rows.append(row)\n",
    "\n",
    "hdu_table_bkg = Table(rows=rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make a copy of the original HDU index table\n",
    "hdu_table = data_store.hdu_table.copy()\n",
    "hdu_table.meta.pop(\"BASE_DIR\")\n",
    "\n",
    "# Add the rows for the background HDUs\n",
    "hdu_table = vstack([hdu_table, hdu_table_bkg])\n",
    "hdu_table.sort(\"OBS_ID\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>HDUIndexTable masked=True length=7</i>\n",
       "<table id=\"table4820976976\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>OBS_ID</th><th>HDU_TYPE</th><th>HDU_CLASS</th><th>FILE_DIR</th><th>FILE_NAME</th><th>HDU_NAME</th><th>SIZE</th></tr></thead>\n",
       "<thead><tr><th>int64</th><th>str6</th><th>str9</th><th>str4</th><th>str36</th><th>str6</th><th>int64</th></tr></thead>\n",
       "<tr><td>20136</td><td>events</td><td>events</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>events</td><td>414720</td></tr>\n",
       "<tr><td>20136</td><td>psf</td><td>psf_table</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>psf</td><td>118080</td></tr>\n",
       "<tr><td>20136</td><td>edisp</td><td>edisp_2d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>edisp</td><td>377280</td></tr>\n",
       "<tr><td>20136</td><td>bkg</td><td>bkg_2d</td><td></td><td>hess-dl3-dr3-with-background.fits.gz</td><td>BKG0</td><td>--</td></tr>\n",
       "<tr><td>20136</td><td>gti</td><td>gti</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>gti</td><td>5760</td></tr>\n",
       "<tr><td>20136</td><td>aeff</td><td>aeff_2d</td><td>data</td><td>hess_dl3_dr1_obs_id_020136.fits.gz</td><td>aeff</td><td>11520</td></tr>\n",
       "<tr><td>20137</td><td>events</td><td>events</td><td>data</td><td>hess_dl3_dr1_obs_id_020137.fits.gz</td><td>events</td><td>216000</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<HDUIndexTable masked=True length=7>\n",
       "OBS_ID HDU_TYPE HDU_CLASS ... HDU_NAME  SIZE \n",
       "int64    str6      str9   ...   str6   int64 \n",
       "------ -------- --------- ... -------- ------\n",
       " 20136   events    events ...   events 414720\n",
       " 20136      psf psf_table ...      psf 118080\n",
       " 20136    edisp  edisp_2d ...    edisp 377280\n",
       " 20136      bkg    bkg_2d ...     BKG0     --\n",
       " 20136      gti       gti ...      gti   5760\n",
       " 20136     aeff   aeff_2d ...     aeff  11520\n",
       " 20137   events    events ...   events 216000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hdu_table[:7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['PRIMARY', 'HDU_INDEX', 'OBS_INDEX', 'BKG0', 'BKG1', 'BKG2']\n"
     ]
    }
   ],
   "source": [
    "# Put index tables and background models in a FITS file\n",
    "hdu_list = fits.HDUList()\n",
    "\n",
    "hdu = fits.BinTableHDU(hdu_table)\n",
    "hdu.name = \"HDU_INDEX\"\n",
    "hdu_list.append(hdu)\n",
    "\n",
    "hdu = fits.BinTableHDU(data_store.obs_table)\n",
    "hdu_list.append(hdu)\n",
    "\n",
    "for idx, model in enumerate(models):\n",
    "    hdu = model.to_fits()\n",
    "    hdu.name = \"BKG{}\".format(idx)\n",
    "    hdu_list.append(hdu)\n",
    "\n",
    "print([_.name for _ in hdu_list])\n",
    "\n",
    "import os\n",
    "\n",
    "path = (\n",
    "    Path(os.environ[\"GAMMAPY_DATA\"])\n",
    "    / \"hess-dl3-dr1/hess-dl3-dr3-with-background.fits.gz\"\n",
    ")\n",
    "hdu_list.writeto(str(path), overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data store:\n",
      "HDU index table:\n",
      "BASE_DIR: /Users/deil/work/gammapy-tutorials/datasets/hess-dl3-dr1\n",
      "Rows: 630\n",
      "OBS_ID: 20136 -- 47829\n",
      "HDU_TYPE: ['aeff', 'bkg', 'edisp', 'events', 'gti', 'psf']\n",
      "HDU_CLASS: ['aeff_2d', 'bkg_2d', 'edisp_2d', 'events', 'gti', 'psf_table']\n",
      "\n",
      "Observation table:\n",
      "Observatory name: 'N/A'\n",
      "Number of observations: 105\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's see if it's possible to access the data\n",
    "ds2 = DataStore.from_file(path)\n",
    "ds2.info()\n",
    "obs = ds2.obs(20136)\n",
    "obs.events\n",
    "obs.aeff\n",
    "obs.bkg.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "- Play with the parameters here (energy binning, offset binning, zenith binning)\n",
    "- Try to figure out why there are outliers on the zenith vs energy threshold curve.\n",
    "- Does azimuth angle or optical efficiency have an effect on background rate?\n",
    "- Use the background models for a 3D analysis (see \"hess\" notebook)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
