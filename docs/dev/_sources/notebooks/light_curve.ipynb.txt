{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy/master?urlpath=lab/tree/light_curve.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[light_curve.ipynb](../_static/notebooks/light_curve.ipynb) |\n",
    "[light_curve.py](../_static/notebooks/light_curve.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Light curves\n",
    "\n",
    "## Introduction\n",
    "\n",
    "This tutorial explain how to compute a light curve with Gammapy.\n",
    "\n",
    "We will use the four Crab nebula observations from the [H.E.S.S. first public test data release](https://www.mpi-hd.mpg.de/hfm/HESS/pages/dl3-dr1/) and compute per-observation fluxes. The Crab nebula is not known to be variable at TeV energies, so we expect constant brightness within statistical and systematic errors.\n",
    "\n",
    "The main classes we will use are:\n",
    "\n",
    "* [gammapy.time.LightCurve](..\/api/gammapy.time.LightCurve.rst)\n",
    "* [gammapy.time.LightCurveEstimator](..\/api/gammapy.time.LightCurveEstimator.rst)\n",
    "\n",
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.spectrum import SpectrumExtraction\n",
    "from gammapy.spectrum.models import PowerLaw\n",
    "from gammapy.background import ReflectedRegionsBackgroundEstimator\n",
    "from gammapy.time import LightCurveEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectrum\n",
    "\n",
    "The `LightCurveEstimator` is based on a 1d spectral analysis within each time bin.\n",
    "So before we can make the light curve, we have to extract 1d spectra."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/hess-dl3-dr1/\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Observations\n",
      "Number of observations: 4\n",
      "Info for OBS_ID = 23523\n",
      "- Start time: 53343.92\n",
      "- Pointing pos: RA 83.63 deg / Dec 21.51 deg\n",
      "- Observation duration: 1687.0 s\n",
      "- Dead-time fraction: 6.240 %\n",
      "Info for OBS_ID = 23526\n",
      "- Start time: 53343.95\n",
      "- Pointing pos: RA 83.63 deg / Dec 22.51 deg\n",
      "- Observation duration: 1683.0 s\n",
      "- Dead-time fraction: 6.555 %\n",
      "Info for OBS_ID = 23559\n",
      "- Start time: 53345.96\n",
      "- Pointing pos: RA 85.25 deg / Dec 22.01 deg\n",
      "- Observation duration: 1686.0 s\n",
      "- Dead-time fraction: 6.398 %\n",
      "Info for OBS_ID = 23592\n",
      "- Start time: 53347.91\n",
      "- Pointing pos: RA 82.01 deg / Dec 22.01 deg\n",
      "- Observation duration: 1686.0 s\n",
      "- Dead-time fraction: 6.212 %\n",
      "\n"
     ]
    }
   ],
   "source": [
    "mask = data_store.obs_table[\"TARGET_NAME\"] == \"Crab\"\n",
    "obs_ids = data_store.obs_table[\"OBS_ID\"][mask].data\n",
    "observations = data_store.get_observations(obs_ids)\n",
    "print(observations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Target definition\n",
    "target_position = SkyCoord(ra=83.63308, dec=22.01450, unit=\"deg\")\n",
    "on_region_radius = Angle(\"0.2 deg\")\n",
    "on_region = CircleSkyRegion(center=target_position, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 907 ms, sys: 17.9 ms, total: 925 ms\n",
      "Wall time: 927 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "bkg_estimator = ReflectedRegionsBackgroundEstimator(\n",
    "    on_region=on_region, observations=observations\n",
    ")\n",
    "bkg_estimator.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 811 ms, sys: 20.9 ms, total: 832 ms\n",
      "Wall time: 832 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "ebounds = EnergyBounds.equal_log_spacing(0.7, 100, 50, unit=\"TeV\")\n",
    "extraction = SpectrumExtraction(\n",
    "    observations=observations,\n",
    "    bkg_estimate=bkg_estimator.result,\n",
    "    containment_correction=False,\n",
    "    e_reco=ebounds,\n",
    "    e_true=ebounds,\n",
    ")\n",
    "extraction.run()\n",
    "spectrum_observations = extraction.spectrum_observations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Light curve estimation\n",
    "\n",
    "OK, so now that we have prepared 1D spectra (not spectral models, just the 1D counts and exposure and 2D energy dispersion matrix), we can compute a lightcurve.\n",
    "\n",
    "To compute the light curve, a spectral model shape has to be assumed, and an energy band chosen.\n",
    "The method is then to adjust the amplitude parameter of the spectral model in each time bin to the data, resulting in a flux measurement in each time bin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creat list of time bin intervals\n",
    "# Here we do one time bin per observation\n",
    "time_intervals = [(obs.tstart, obs.tstop) for obs in observations]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assumed spectral model\n",
    "spectral_model = PowerLaw(\n",
    "    index=2, amplitude=2.0e-11 * u.Unit(\"1 / (cm2 s TeV)\"), reference=1 * u.TeV\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "energy_range = [1, 100] * u.TeV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 824 ms, sys: 21.3 ms, total: 845 ms\n",
      "Wall time: 848 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "lc_estimator = LightCurveEstimator(extraction)\n",
    "lc = lc_estimator.light_curve(\n",
    "    time_intervals=time_intervals,\n",
    "    spectral_model=spectral_model,\n",
    "    energy_range=energy_range,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results\n",
    "\n",
    "The light curve measurement result is stored in a table. Let's have a look at the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['time_min', 'time_max', 'flux', 'flux_err', 'flux_ul', 'is_ul', 'livetime', 'alpha', 'n_on', 'n_off', 'measured_excess', 'expected_excess']\n"
     ]
    }
   ],
   "source": [
    "print(lc.table.colnames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=4</i>\n",
       "<table id=\"table4416650040\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>time_min</th><th>time_max</th><th>flux</th><th>flux_err</th></tr></thead>\n",
       "<thead><tr><th></th><th></th><th>1 / (cm2 s)</th><th>1 / (cm2 s)</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>53343.92234009259</td><td>53343.94186555556</td><td>1.839834550960819e-11</td><td>1.8993229053146408e-12</td></tr>\n",
       "<tr><td>53343.95421509259</td><td>53343.97369425926</td><td>1.997585378782766e-11</td><td>2.020285941359047e-12</td></tr>\n",
       "<tr><td>53345.96198129629</td><td>53345.98149518518</td><td>2.1920429489279916e-11</td><td>2.552730381710862e-12</td></tr>\n",
       "<tr><td>53347.913196574074</td><td>53347.93271046296</td><td>2.3191550721307975e-11</td><td>2.5669916434977504e-12</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "     time_min           time_max     ...        flux_err       \n",
       "                                     ...      1 / (cm2 s)      \n",
       "     float64            float64      ...        float64        \n",
       "------------------ ----------------- ... ----------------------\n",
       " 53343.92234009259 53343.94186555556 ... 1.8993229053146408e-12\n",
       " 53343.95421509259 53343.97369425926 ...  2.020285941359047e-12\n",
       " 53345.96198129629 53345.98149518518 ...  2.552730381710862e-12\n",
       "53347.913196574074 53347.93271046296 ... 2.5669916434977504e-12"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lc.table[\"time_min\", \"time_max\", \"flux\", \"flux_err\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lc.plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$2.0740149 \\times 10^{-11} \\; \\mathrm{\\frac{1}{s\\,cm^{2}}}$$"
      ],
      "text/plain": [
       "<Quantity 2.07401493e-11 1 / (cm2 s)>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's compare to the expected flux of this source\n",
    "from gammapy.spectrum import CrabSpectrum\n",
    "\n",
    "crab_spec = CrabSpectrum().model\n",
    "crab_flux = crab_spec.integral(*energy_range).to(\"cm-2 s-1\")\n",
    "crab_flux"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = lc.plot(marker=\"o\", lw=2)\n",
    "ax.hlines(\n",
    "    crab_flux.value,\n",
    "    xmin=lc.table[\"time_min\"].min(),\n",
    "    xmax=lc.table[\"time_max\"].max(),\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Change the assumed spectral model shape (e.g. to a steeper power-law), and see how the integral flux estimate for the lightcurve changes.\n",
    "* Try a time binning where you split the observation time for every run into two time bins.\n",
    "* Try to analyse the PKS 2155 flare data from the H.E.S.S. first public test data release.\n",
    "  Start with per-observation fluxes, and then try fluxes within 5 minute time bins for one or two of the observations where the source was very bright."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
