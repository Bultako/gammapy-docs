{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy/master?urlpath=lab/tree/spectrum_simulation.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[spectrum_simulation.ipynb](../_static/notebooks/spectrum_simulation.ipynb) |\n",
    "[spectrum_simulation.py](../_static/notebooks/spectrum_simulation.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectrum simulation with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains how to use the functions and classes in [gammapy.spectrum](..\/spectrum/index.rst) in order to simulate and fit spectra.\n",
    "\n",
    "First, we will simulate and fit a pure power law without any background. Than we will add a power law shaped background component. Finally, we will see how to simulate and fit a user defined model. For all scenarios a toy detector will be simulated. For an example using real CTA IRFs, checkout [this notebook](https://github.com/gammapy/gammapy/blob/master/tutorials/spectrum_simulation_cta.ipynb).\n",
    "\n",
    "The following clases will be used:\n",
    "\n",
    "* [gammapy.irf.EffectiveAreaTable](..\/api/gammapy.irf.EffectiveAreaTable.rst)\n",
    "* [gammapy.irf.EnergyDispersion](https://docs.gammapy.org/dev/api/gammapy.irf.EnergyDispersion)\n",
    "* [gammapy.spectrum.SpectrumObservation](..\/api/gammapy.spectrum.SpectrumObservation.rst)\n",
    "* [gammapy.spectrum.SpectrumSimulation](..\/api/gammapy.spectrum.SpectrumSimulation.rst)\n",
    "* [gammapy.spectrum.models.PowerLaw](..\/api/gammapy.spectrum.models.PowerLaw.rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Same procedure as in every script ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from gammapy.irf import EnergyDispersion, EffectiveAreaTable\n",
    "from gammapy.spectrum import SpectrumSimulation\n",
    "from gammapy.spectrum.models import PowerLaw\n",
    "from gammapy.utils.fitting import Fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create detector\n",
    "\n",
    "For the sake of self consistency of this tutorial, we will simulate a simple detector. For a real application you would want to replace this part of the code with loading the IRFs or your detector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "e_true = np.logspace(-2, 2.5, 109) * u.TeV\n",
    "e_reco = np.logspace(-2, 2, 79) * u.TeV\n",
    "\n",
    "edisp = EnergyDispersion.from_gauss(\n",
    "    e_true=e_true, e_reco=e_reco, sigma=0.2, bias=0\n",
    ")\n",
    "aeff = EffectiveAreaTable.from_parametrization(energy=e_true)\n",
    "\n",
    "fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n",
    "edisp.plot_matrix(ax=axes[0])\n",
    "aeff.plot(ax=axes[1]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Power law\n",
    "\n",
    "In this section we will simulate one observation using a power law model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error      unit      min max frozen\n",
      "\t--------- --------- ----- -------------- --- --- ------\n",
      "\t    index 2.300e+00   nan                nan nan  False\n",
      "\tamplitude 1.000e-11   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "pwl = PowerLaw(\n",
    "    index=2.3, amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Observation summary report ***\n",
      "Observation Id: 1\n",
      "Livetime: 2.000 h\n",
      "On events: 339\n",
      "Off events: 0\n",
      "Alpha: 1.000\n",
      "Bkg events in On region: 0.00\n",
      "Excess: 339.00\n",
      "Gamma rate: 2.83 1 / min\n",
      "Bkg rate: 0.00 1 / min\n",
      "Sigma: nan\n",
      "energy range: 0.01 TeV - 100.00 TeV\n"
     ]
    }
   ],
   "source": [
    "livetime = 2 * u.h\n",
    "sim = SpectrumSimulation(\n",
    "    aeff=aeff, edisp=edisp, source_model=pwl, livetime=livetime\n",
    ")\n",
    "sim.simulate_obs(seed=2309, obs_id=1)\n",
    "print(sim.obs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tnfev       : 31\n",
      "\ttotal stat : -853.95\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dataset = sim.obs.to_spectrum_dataset()\n",
    "dataset.model = pwl.copy()\n",
    "\n",
    "fit = Fit([dataset])\n",
    "\n",
    "result = fit.run()\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Include background\n",
    "\n",
    "In this section we will include a background component. Furthermore, we will also simulate more than one observation and fit each one individuallt in order to get average fit results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "bkg_model = PowerLaw(\n",
    "    index=2.5, amplitude=1e-11 * u.Unit(\"cm-2 s-1 TeV-1\"), reference=1 * u.TeV\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumObservationList\n",
      "Number of observations: 30\n",
      "*** Observation summary report ***\n",
      "Observation Id: 0\n",
      "Livetime: 2.000 h\n",
      "On events: 733\n",
      "Off events: 1915\n",
      "Alpha: 0.200\n",
      "Bkg events in On region: 383.00\n",
      "Excess: 350.00\n",
      "Excess / Background: 0.91\n",
      "Gamma rate: 2.92 1 / min\n",
      "Bkg rate: 0.04 1 / min\n",
      "Sigma: 14.17\n",
      "energy range: 0.01 TeV - 100.00 TeV\n",
      "CPU times: user 170 ms, sys: 4.37 ms, total: 174 ms\n",
      "Wall time: 171 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "n_obs = 30\n",
    "seeds = np.arange(n_obs)\n",
    "\n",
    "sim = SpectrumSimulation(\n",
    "    aeff=aeff,\n",
    "    edisp=edisp,\n",
    "    source_model=pwl,\n",
    "    livetime=livetime,\n",
    "    background_model=bkg_model,\n",
    "    alpha=0.2,\n",
    ")\n",
    "\n",
    "sim.run(seeds)\n",
    "print(sim.result)\n",
    "print(sim.result[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to the fit let's have a look at the simulated observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_on = [obs.total_stats.n_on for obs in sim.result]\n",
    "n_off = [obs.total_stats.n_off for obs in sim.result]\n",
    "excess = [obs.total_stats.excess for obs in sim.result]\n",
    "\n",
    "fix, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
    "axes[0].hist(n_on)\n",
    "axes[0].set_xlabel(\"n_on\")\n",
    "axes[1].hist(n_off)\n",
    "axes[1].set_xlabel(\"n_off\")\n",
    "axes[2].hist(excess)\n",
    "axes[2].set_xlabel(\"excess\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2.18 s, sys: 43.6 ms, total: 2.22 s\n",
      "Wall time: 2.08 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results = []\n",
    "for obs in sim.result:\n",
    "    dataset = obs.to_spectrum_dataset()\n",
    "    dataset.model = pwl.copy()\n",
    "    fit = Fit([dataset])\n",
    "    result = fit.optimize()\n",
    "    results.append(\n",
    "        {\n",
    "            \"index\": result.parameters[\"index\"].value,\n",
    "            \"amplitude\": result.parameters[\"amplitude\"].value,\n",
    "        }\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spectral index: 2.31 +/- 0.09\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = np.array([_[\"index\"] for _ in results])\n",
    "plt.hist(index, bins=10)\n",
    "print(\"spectral index: {:.2f} +/- {:.2f}\".format(index.mean(), index.std()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Fit a pure power law and the user define model to the observation you just simulated. You can start with the user defined model described in the [spectrum_models.ipynb](https://github.com/gammapy/gammapy/blob/master/tutorials/spectrum_models.ipynb) notebook.\n",
    "* Vary the observation lifetime and see when you can distinguish the two models (Hint: You get the final likelihood of a fit from `fit.result[0].statval`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What's next\n",
    "\n",
    "In this tutorial we learnd how to simulate and fit data using a toy detector. Go to [gammapy.spectrum](..\/spectrum/index.rst) to see what else you can do with gammapy."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
