{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy/master?urlpath=lab/tree/sed_fitting_gammacat_fermi.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[sed_fitting_gammacat_fermi.ipynb](../_static/notebooks/sed_fitting_gammacat_fermi.ipynb) |\n",
    "[sed_fitting_gammacat_fermi.py](../_static/notebooks/sed_fitting_gammacat_fermi.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Flux point fitting in Gammapy\n",
    "\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this tutorial we're going to learn how to fit spectral models to combined Fermi-LAT and IACT flux points.\n",
    "\n",
    "The central class we're going to use for this example analysis is:  \n",
    "\n",
    "- [gammapy.spectrum.FluxPointsDataset](..\/spectrum/index.rst#reference-api)\n",
    "\n",
    "In addition we will work with the following data classes:\n",
    "\n",
    "- [gammapy.spectrum.FluxPoints](..\/api/gammapy.spectrum.FluxPoints.rst)\n",
    "- [gammapy.catalog.SourceCatalogGammaCat](..\/api/gammapy.catalog.SourceCatalogGammaCat.rst)\n",
    "- [gammapy.catalog.SourceCatalog3FHL](..\/api/gammapy.catalog.SourceCatalog3FHL.rst)\n",
    "- [gammapy.catalog.SourceCatalog3FGL](..\/api/gammapy.catalog.SourceCatalog3FGL.rst)\n",
    "\n",
    "And the following spectral model classes:\n",
    "\n",
    "- [PowerLaw](..\/api/gammapy.spectrum.models.PowerLaw.rst)\n",
    "- [ExponentialCutoffPowerLaw](..\/api/gammapy.spectrum.models.ExponentialCutoffPowerLaw.rst)\n",
    "- [LogParabola](..\/api/gammapy.spectrum.models.LogParabola.rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Let us start with the usual IPython notebook and Python imports:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy import units as u\n",
    "from gammapy.spectrum.models import (\n",
    "    PowerLaw,\n",
    "    ExponentialCutoffPowerLaw,\n",
    "    LogParabola,\n",
    ")\n",
    "from gammapy.spectrum import FluxPointsDataset, FluxPoints\n",
    "from gammapy.catalog import (\n",
    "    SourceCatalog3FGL,\n",
    "    SourceCatalogGammaCat,\n",
    "    SourceCatalog3FHL,\n",
    ")\n",
    "from gammapy.utils.fitting import Fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load spectral points\n",
    "\n",
    "For this analysis we choose to work with the source 'HESS J1507-622' and the associated Fermi-LAT sources '3FGL J1506.6-6219' and '3FHL J1507.9-6228e'. We load the source catalogs, and then access source of interest by name:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "fermi_3fgl = SourceCatalog3FGL()\n",
    "fermi_3fhl = SourceCatalog3FHL()\n",
    "gammacat = SourceCatalogGammaCat(\"$GAMMAPY_DATA/gamma-cat/gammacat.fits.gz\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "source_gammacat = gammacat[\"HESS J1507-622\"]\n",
    "source_fermi_3fgl = fermi_3fgl[\"3FGL J1506.6-6219\"]\n",
    "source_fermi_3fhl = fermi_3fhl[\"3FHL J1507.9-6228e\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The corresponding flux points data can be accessed with `.flux_points` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=6</i>\n",
       "<table id=\"table4459678576\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>e_ref</th><th>dnde</th><th>dnde_errn</th><th>dnde_errp</th></tr></thead>\n",
       "<thead><tr><th>TeV</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th></tr></thead>\n",
       "<thead><tr><th>float32</th><th>float32</th><th>float32</th><th>float32</th></tr></thead>\n",
       "<tr><td>0.8609004</td><td>2.29119e-12</td><td>8.705427e-13</td><td>8.955021e-13</td></tr>\n",
       "<tr><td>1.561512</td><td>6.981717e-13</td><td>2.203541e-13</td><td>2.304066e-13</td></tr>\n",
       "<tr><td>2.763753</td><td>1.690615e-13</td><td>6.758698e-14</td><td>7.188384e-14</td></tr>\n",
       "<tr><td>4.891597</td><td>7.729249e-14</td><td>2.401318e-14</td><td>2.607487e-14</td></tr>\n",
       "<tr><td>9.988584</td><td>1.032534e-14</td><td>5.063147e-15</td><td>5.641954e-15</td></tr>\n",
       "<tr><td>27.04035</td><td>7.449867e-16</td><td>5.72089e-16</td><td>7.259987e-16</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=6>\n",
       "  e_ref         dnde         dnde_errn       dnde_errp   \n",
       "   TeV    1 / (cm2 s TeV) 1 / (cm2 s TeV) 1 / (cm2 s TeV)\n",
       " float32      float32         float32         float32    \n",
       "--------- --------------- --------------- ---------------\n",
       "0.8609004     2.29119e-12    8.705427e-13    8.955021e-13\n",
       " 1.561512    6.981717e-13    2.203541e-13    2.304066e-13\n",
       " 2.763753    1.690615e-13    6.758698e-14    7.188384e-14\n",
       " 4.891597    7.729249e-14    2.401318e-14    2.607487e-14\n",
       " 9.988584    1.032534e-14    5.063147e-15    5.641954e-15\n",
       " 27.04035    7.449867e-16     5.72089e-16    7.259987e-16"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flux_points_gammacat = source_gammacat.flux_points\n",
    "flux_points_gammacat.table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the Fermi-LAT catalogs, integral flux points are given. Currently the flux point fitter only works with differential flux points, so we apply the conversion here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "flux_points_3fgl = source_fermi_3fgl.flux_points.to_sed_type(\n",
    "    sed_type=\"dnde\", model=source_fermi_3fgl.spectral_model\n",
    ")\n",
    "flux_points_3fhl = source_fermi_3fhl.flux_points.to_sed_type(\n",
    "    sed_type=\"dnde\", model=source_fermi_3fhl.spectral_model\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we stack the flux points into a single `FluxPoints` object and drop the upper limit values, because currently we can't handle them in the fit:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# stack flux point tables\n",
    "flux_points = FluxPoints.stack(\n",
    "    [flux_points_gammacat, flux_points_3fhl, flux_points_3fgl]\n",
    ")\n",
    "\n",
    "# drop the flux upper limit values\n",
    "flux_points = flux_points.drop_ul()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Power Law Fit\n",
    "\n",
    "First we start with fitting a simple [power law](..\/api/gammapy.spectrum.models.PowerLaw.rst#gammapy.spectrum.models.PowerLaw)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "pwl = PowerLaw(index=2, amplitude=\"1e-12 cm-2 s-1 TeV-1\", reference=\"1 TeV\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After creating the model we run the fit by passing the `'flux_points'` and `'pwl'` objects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_pwl = FluxPointsDataset(pwl, flux_points, likelihood=\"chi2assym\")\n",
    "fitter = Fit(dataset_pwl)\n",
    "result_pwl = fitter.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And print the result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tnfev       : 40\n",
      "\ttotal stat : 33.68\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(result_pwl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error      unit      min max frozen\n",
      "\t--------- --------- ----- -------------- --- --- ------\n",
      "\t    index 1.966e+00   nan                nan nan  False\n",
      "\tamplitude 1.345e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00   nan            TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we plot the data points and the best fit model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = flux_points.plot(energy_power=2)\n",
    "pwl.plot(energy_range=[1e-4, 1e2] * u.TeV, ax=ax, energy_power=2)\n",
    "\n",
    "# assign covariance for plotting\n",
    "pwl.parameters.covariance = result_pwl.parameters.covariance\n",
    "\n",
    "pwl.plot_error(energy_range=[1e-4, 1e2] * u.TeV, ax=ax, energy_power=2)\n",
    "ax.set_ylim(1e-13, 1e-11);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exponential Cut-Off Powerlaw Fit\n",
    "\n",
    "Next we fit an [exponential cut-off power](..\/api/gammapy.spectrum.models.ExponentialCutoffPowerLaw.rst#gammapy.spectrum.models.ExponentialCutoffPowerLaw) law to the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecpl = ExponentialCutoffPowerLaw(\n",
    "    index=1.8,\n",
    "    amplitude=\"2e-12 cm-2 s-1 TeV-1\",\n",
    "    reference=\"1 TeV\",\n",
    "    lambda_=\"0.1 TeV-1\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We run the fitter again by passing the flux points and the `ecpl` model instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ExponentialCutoffPowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error      unit      min max frozen\n",
      "\t--------- --------- ----- -------------- --- --- ------\n",
      "\t    index 1.869e+00   nan                nan nan  False\n",
      "\tamplitude 2.126e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00   nan            TeV nan nan   True\n",
      "\t  lambda_ 1.000e-01   nan          TeV-1 nan nan  False\n"
     ]
    }
   ],
   "source": [
    "dataset_ecpl = FluxPointsDataset(ecpl, flux_points, likelihood=\"chi2assym\")\n",
    "fitter = Fit(dataset_ecpl)\n",
    "result_ecpl = fitter.run()\n",
    "print(ecpl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We plot the data and best fit model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1e-13, 1e-11)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = flux_points.plot(energy_power=2)\n",
    "ecpl.plot(energy_range=[1e-4, 1e2] * u.TeV, ax=ax, energy_power=2)\n",
    "\n",
    "# assign covariance for plotting\n",
    "ecpl.parameters.covariance = result_ecpl.parameters.covariance\n",
    "\n",
    "ecpl.plot_error(energy_range=[1e-4, 1e2] * u.TeV, ax=ax, energy_power=2)\n",
    "ax.set_ylim(1e-13, 1e-11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Log-Parabola Fit\n",
    "\n",
    "Finally we try to fit a [log-parabola](..\/api/gammapy.spectrum.models.LogParabola.rst#gammapy.spectrum.models.LogParabola) model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_parabola = LogParabola(\n",
    "    alpha=2, amplitude=\"1e-12 cm-2 s-1 TeV-1\", reference=\"1 TeV\", beta=0.1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogParabola\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error      unit      min max frozen\n",
      "\t--------- --------- ----- -------------- --- --- ------\n",
      "\tamplitude 1.930e-12   nan cm-2 s-1 TeV-1 nan nan  False\n",
      "\treference 1.000e+00   nan            TeV nan nan   True\n",
      "\t    alpha 2.151e+00   nan                nan nan  False\n",
      "\t     beta 5.259e-02   nan                nan nan  False\n"
     ]
    }
   ],
   "source": [
    "dataset_log_parabola = FluxPointsDataset(\n",
    "    log_parabola, flux_points, likelihood=\"chi2assym\"\n",
    ")\n",
    "fitter = Fit(dataset_log_parabola)\n",
    "result_log_parabola = fitter.run()\n",
    "print(log_parabola)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = flux_points.plot(energy_power=2)\n",
    "log_parabola.plot(energy_range=[1e-4, 1e2] * u.TeV, ax=ax, energy_power=2)\n",
    "\n",
    "# assign covariance for plotting\n",
    "log_parabola.parameters.covariance = result_log_parabola.parameters.covariance\n",
    "\n",
    "log_parabola.plot_error(\n",
    "    energy_range=[1e-4, 1e2] * u.TeV, ax=ax, energy_power=2\n",
    ")\n",
    "ax.set_ylim(1e-13, 1e-11);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "- Fit a `PowerLaw2` and `ExponentialCutoffPowerLaw3FGL` to the same data.\n",
    "- Fit a `ExponentialCutoffPowerLaw` model to Vela X ('HESS J0835-455') only and check if the best fit values correspond to the values given in the Gammacat catalog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What next?\n",
    "\n",
    "This was an introduction to SED fitting in Gammapy.\n",
    "\n",
    "* If you would like to learn how to perform a full Poisson maximum likelihood spectral fit, please check out the [spectrum pipe](spectrum_pipe.ipynb) tutorial.\n",
    "* If you are interested in simulation of spectral data in the context of CTA, please check out the [spectrum simulation cta](spectrum_simulation_cta.ipynb) notebook.\n",
    "* To learn more about other parts of Gammapy (e.g. Fermi-LAT and TeV data analysis), check out the other tutorial notebooks.\n",
    "* To see what's available in Gammapy, browse the [Gammapy docs](https://docs.gammapy.org/) or use the full-text search.\n",
    "* If you have any questions, ask on the mailing list ."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
