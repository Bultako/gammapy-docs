{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "Try online [![Binder](https://mybinder.org/badge.svg)](https://beta.mybinder.org/v2/gh/gammapy/gammapy-extra/master?filepath=spectrum_models.ipynb)  \n",
    "You can also contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy-extra/tree/master/notebooks).  \n",
    "**Source files:**\n",
    "[spectrum_models.ipynb](../_static/notebooks/spectrum_models.ipynb) |\n",
    "[spectrum_models.py](../_static/notebooks/spectrum_models.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral models in Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains how to use the functions and classes in [gammapy.spectrum.models](http://docs.gammapy.org/dev/spectrum/#module-gammapy.spectrum.models) in order to work with spectral models.\n",
    "\n",
    "The following clases will be used:\n",
    "\n",
    "* [gammapy.spectrum.models.PowerLaw](..\/api/gammapy.spectrum.models.PowerLaw.rst)\n",
    "* [gammapy.utils.modelling.Parameter](..\/api/gammapy.utils.modeling.Parameter.rst)\n",
    "* [gammapy.utils.modelling.ParameterList](..\/api/gammapy.utils.modeling.ParameterList.rst)\n",
    "* [gammapy.spectrum.models.SpectralModel](..\/api/gammapy.spectrum.models.SpectralModel.rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Same procedure as in every script ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from gammapy.spectrum import models\n",
    "from gammapy.utils.modeling import Parameter, ParameterList"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a model\n",
    "\n",
    "To create a spectral model, instantiate an object of the spectral model class you're interested in."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error       unit      min max frozen\n",
      "\t--------- --------- ----- --------------- --- --- ------\n",
      "\t    index 2.000e+00   nan                 nan nan  False\n",
      "\tamplitude 1.000e-12   nan 1 / (cm2 s TeV) nan nan  False\n",
      "\treference 1.000e+00   nan             TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "pwl = models.PowerLaw()\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This will use default values for the model parameters, which is rarely what you want.\n",
    "\n",
    "Usually you will want to specify the parameters on object creation.\n",
    "One way to do this is to pass `astropy.utils.Quantity` objects like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error       unit      min max frozen\n",
      "\t--------- --------- ----- --------------- --- --- ------\n",
      "\t    index 2.300e+00   nan                 nan nan  False\n",
      "\tamplitude 1.000e-12   nan 1 / (cm2 s TeV) nan nan  False\n",
      "\treference 1.000e+00   nan             TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "pwl = models.PowerLaw(\n",
    "    index=2.3 * u.Unit(''),\n",
    "    amplitude=1e-12 * u.Unit('cm-2 s-1 TeV-1'),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you see, some of the parameters have default ``min`` and ``values`` as well as a ``frozen`` flag. This is only relevant in the context of spectral fitting and thus covered in [spectrum_analysis.ipynb](https://github.com/gammapy/gammapy-extra/blob/master/notebooks/spectrum_analysis.ipynb). Also, the parameter errors are not set. This will be covered later in this tutorial."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get and set model parameters\n",
    "\n",
    "The model parameters are stored as ``ParameterList`` on the spectal model. Each model parameter is ``Parameter`` instance. It has a ``value`` and a ``unit`` attribute, as well as a ``quantity`` property for convenience."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ParameterList\n",
      "Parameter(name='index', value=2.3, unit='', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='amplitude', value=1e-12, unit='1 / (cm2 s TeV)', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='reference', value=1.0, unit='TeV', min=nan, max=nan, frozen=True)\n",
      "\n",
      "Covariance: \n",
      "None\n",
      "Parameter(name='index', value=2.3, unit='', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='index', value=2.6, unit='', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='amplitude', value=1e-12, unit='1 / (cm2 s TeV)', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='amplitude', value=2e-12, unit='1 / (m2 s TeV)', min=nan, max=nan, frozen=False)\n"
     ]
    }
   ],
   "source": [
    "print(pwl.parameters)\n",
    "\n",
    "print(pwl.parameters['index'])\n",
    "pwl.parameters['index'].value=2.6\n",
    "print(pwl.parameters['index'])\n",
    "\n",
    "print(pwl.parameters['amplitude'])\n",
    "pwl.parameters['amplitude'].quantity = 2e-12 * u.Unit('m-2 TeV-1 s-1')\n",
    "print(pwl.parameters['amplitude'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## List available models\n",
    "\n",
    "All spectral models in gammapy are subclasses of ``SpectralModel``. The list of available models is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[gammapy.spectrum.models.ExponentialCutoffPowerLaw,\n",
       " gammapy.spectrum.models.CompoundSpectralModel,\n",
       " gammapy.spectrum.models.PowerLaw2,\n",
       " gammapy.spectrum.models.PowerLaw,\n",
       " gammapy.spectrum.models.ConstantModel,\n",
       " gammapy.spectrum.models.TableModel,\n",
       " gammapy.spectrum.models.PLSuperExpCutoff3FGL,\n",
       " gammapy.spectrum.models.AbsorbedSpectralModel,\n",
       " gammapy.spectrum.models.ExponentialCutoffPowerLaw3FGL,\n",
       " gammapy.spectrum.models.LogParabola,\n",
       " gammapy.spectrum.crab.MeyerCrabModel]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models.SpectralModel.__subclasses__()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting\n",
    "\n",
    "In order to plot a model you can use the ``plot`` function. It expects an energy range as argument. You can also chose flux and energy units as well as an energy power for the plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f26cc68d6d8>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f26cc683b00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [0.1, 10] * u.TeV\n",
    "pwl.plot(energy_range, energy_power=2, energy_unit='GeV')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameter errors\n",
    "\n",
    "Parameters are stored internally as covariance matrix. There are, however, convenience methods to set individual parameter errors on ``ParameterList``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value     error        unit      min max frozen\n",
      "\t--------- --------- --------- -------------- --- --- ------\n",
      "\t    index 2.600e+00 2.000e-01                nan nan  False\n",
      "\tamplitude 2.000e-12 2.000e-13 1 / (m2 s TeV) nan nan  False\n",
      "\treference 1.000e+00 0.000e+00            TeV nan nan   True\n",
      "\n",
      "Covariance: \n",
      "\n",
      "\tname/name index amplitude\n",
      "\t--------- ----- ---------\n",
      "\t    index  0.04       0.0\n",
      "\tamplitude   0.0     4e-26\n"
     ]
    }
   ],
   "source": [
    "errors = dict(\n",
    "    index = 0.2 * u.Unit(''),\n",
    "    amplitude = 0.1 * pwl.parameters['amplitude'].quantity\n",
    ")\n",
    "pwl.parameters.set_parameter_errors(errors)\n",
    "print(pwl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can access the parameter errors like this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  4.00000000e-02   0.00000000e+00   0.00000000e+00]\n",
      " [  0.00000000e+00   4.00000000e-26   0.00000000e+00]\n",
      " [  0.00000000e+00   0.00000000e+00   0.00000000e+00]]\n",
      "0.2\n"
     ]
    }
   ],
   "source": [
    "print(pwl.parameters.covariance)\n",
    "print(pwl.parameters.error('index'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can plot the butterfly using the ``plot_error`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f26cc2c3ba8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEOCAYAAACjJpHCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xec1PW1//HXWWABAZEOUgQERUQTFBVjTzFwFTFijSUq\nERvGLppyE2O8xhJjw4K9gojGFpXkmhhj4jUgNooIYgFFKSK9CJzfH2f2t8OyZXan7uz7+XjsA+Y7\n35n5cO9kj5/P+XzOMXdHRESkrkryPQAREanfFEhERCQtCiQiIpIWBRIREUmLAomIiKRFgURERNKi\nQCIiImlRIBERkbQokIiISFoUSEREJC2N8z2AXGjfvr337Nkz38MQEalX3nzzzSXu3qGm+4o6kJjZ\nMGBYnz59mDp1ar6HIyJSr5jZJ6ncV9RLW+7+nLuPat26db6HIiJStIo6kIiISPYpkIiISFoUSERE\nJC0KJCIikhYFEhERSUvBBxIz621m95rZpKRru5jZnWY2yczOzuf4REQauqwGEjO7z8wWmdn0CteH\nmNlsM5trZpdX9x7uPs/dR1a4NsvdzwKOBfbL/MhFRCRV2Z6RPAAMSb5gZo2AscBQoD9wgpn1N7Pd\nzOz5Cj8dq3pjMzsC+DPwQvaGH+bOhbVrs/0pIiL1U1ZPtrv7q2bWs8LlvYG57j4PwMwmAMPd/Rrg\n8Fq897PAs2b2Z+CxzIy4cqtXw6xZ0KkTdOkCJQW/ICgikjv5+JXYFZif9HhB4lqlzKydmd0JDDSz\nKxLXDjazW8zsLqqYkZjZKDObamZTFy9enPag3eGLL2DmTFixIu23ExEpGgVfa8vdlwJnVbj2CvBK\nDa8bZ2YLgWGlpaV7Zmo869fDnDnQti107w6NC/7/giIi2ZWPGclnQPekx90S1zIu3VpbmzbBVVfB\nV19t/dxXX8H06bBkSZqDFBGp5/IRSKYAfc2sl5mVAscDz2bjg8xsmJmNW758eZ1eP2UK/Pa3cOSR\n8MQTEViSbdoEn3wCs2fDunUZGLCISD2U7e2/44HXgZ3NbIGZjXT3jcBoYDIwC5jo7jOy8fnpzkgG\nD4Z33oF+/eDaa+GUU+Ddd7e+b9WqyJ18/nnkUkREGhLzIv7Nl9SP5Iw5c+bU+X3efhtefBFuugkW\nLYJhw+C88yJPUlGzZtCjB7RqVfdxi4gUAjN7090H1XRfUW9kzVQ/EjM49FCYNClmJS+8ACNGwMSJ\nWy93rVsHH3wQS14bN6b1sSIi9UJRB5JM22Yb+NnP4PHHYZdd4Lrr4OSTY/mroiVLYMaMyhP1IiLF\npKgDSbrJ9qr07Aljx8Lvfw/Ll8PIkfCb38DSpVvet3EjfPRRbBdevz6jQxARKRhFHUiy2WrXDL7/\n/djNdeqp8NJLsdw1YcLWS1orVkQy/osvlIwXkeJT1IEkWzOSZNtsA6NHRwAZMABuuCGWu956a8v7\nNm+Gzz6LUiurV2dtOCIiOVfUgSSbM5KKevaEW2+NvMnKlXDGGfCrX219YHHtWnj/fZg/f+tEvYhI\nfVTUgSTXzOC7343lrtNOg//931jueuyxrZe7Fi2K5a6vv87PWEVEMkWBJAUtW9bu/ubN4dxzY3fX\n7rvDjTfCiSfCm29ued+GDfDhh/HzzTeZG6+ISC4VdSDJVI5kxx1h551rf8iwRw+45ZbIm6xZA2ee\nCb/8JVQsRvz117FVeNGitIYpIpIXRX2yvcygQYN86tSpGXmvFSuiFEptE+br1sEDD8CDD0KTJjBq\nFBx//NbVg1u0gB12iFmNiEg+6WR7lmy7bdTe6tMndmylqlkzOOusOA0/cGCUW/nxj6FifCtrovXZ\nZ7HTS0Sk0CmQ1FHr1nG6vXfvCBKp6t49gsgf/hCzlLPOgp//fMtlLTXREpH6pKgDSS7OkbRpA7vu\nCr16QdOmqY4LDjooZidnnAGvvAJHHw0PP7zl7q6yJloffaS6XSJSuJQjySD3KJOycGHsyErVggUx\nQ/nnPyMgXXop7L33lvc0bgxdu0L79pkds4hIVZQjyQOz+EU/YEDt2vB26wZ//GP8bNgA55wDV1wB\nX35Zfs/GjVFR+IMP1ERLRAqLAkkWmEHHjrDbbjGLaNQotdcdcEAsd515Jrz6aix3PfjglmdMVq6M\nZPzCharbJSKFQYEki0pKoHPnCCidO8fjmjRtGnmTiRNhr72i7MoJJ8Abb5Tfs3lzbEGeOTO6M4qI\n5JMCSQ40ahQzk912i5mKWc2v6do1TsTfdFMsa517LowZE7u5yqxbF/3iP/1UdbtEJH+KOtmeqVa7\nmbZhQyxNLV2a2vLU+vWxo+v++yMIjRwZJVdKS8vvadIk8jJt2mRv3CLSsKSabC/qQFImV7u2amvd\nuliiWrYstfsXLoxZyt//HuVXLrsMBg/e8p7WreO55CAjIlIX2rVVDzRrFgca+/ePAFCTLl3g+usj\nbwLRB+XSS7dc7lq+vLxuVwP4bwQRKQAKJAWgefMouZJqYch9941GWueeC//+d5Sqv/fe8rMrmzdH\nv5P3349ikSIi2aRAUkBatoSddoK+fWuu41VaGj1PnnwS9tsP7rgDjjsO/vWv8nvWrIlgsmCB6naJ\nSPYokBSgbbdNvY5X587RlfG222J78fnnw8UXR+4FYnnryy9juSuLlWJEpAFTIClgbdpE/mSHHWpO\nng8eHMtdo0fHmZNjjoF77okdXxDLXnPnRt0uNdESkUwq+EBiZr3N7F4zm1Thegszm2pmh+drbLlQ\nm7IrTZrAqafCpElw4IFw552x3PXaa+X3fPVVzE4q9pIXEamrrAYSM7vPzBaZ2fQK14eY2Wwzm2tm\nl1f3Hu4+z91HVvLUGGBiJsdbyMrKrgwYANtvX33Zlc6d4ZprYOzYCDwXXAAXXhg9TiAOL37ySRxm\nVN0uEUlXtmckDwBDki+YWSNgLDAU6A+cYGb9zWw3M3u+wk/Hyt7UzH4AzAQaXHPaRo1iG/CAAdCp\nU/Wn5PfZB8aPh/POiwZaxx4L48aVB49Vq6LMiup2iUg6shpI3P1V4KsKl/cG5iZmGhuACcBwd3/P\n3Q+v8FNVoDgYGAz8GDjDzAp+iS7TGjeOqsEDBsTSV1UBpUkT+MlPype7xo2L5a5XX43n3VW3S0TS\nk49fwF2B+UmPFySuVcrM2pnZncBAM7sCwN1/4e4XAI8Bd7v7VptbzWxUIocydfHixZn9FxSQ0tJI\nxvfvX315lE6dYrnrjjviNRddFEteCxbE82V1uz75RHW7RKR2UuyYkT/uvhQ4q4rnHqjmdePMbCEw\nrLS0dM8sDa9glJ2SX706ciErV1Z+3157xXLX+PFw992x3PWTn8RPs2aRhF++XHW7RCR1+ZiRfAZ0\nT3rcLXEt49z9OXcf1TqV+iNFokWLmg81Nm4MJ58cy12HHFIeUF55JZa6vvkG5s2L7cK16fQoIg1T\nPgLJFKCvmfUys1LgeODZbHxQLnq2F6pUDjV27AhXXx3bhJs1g0suiQON8xMLj2V1u778Usl4Eala\ntrf/jgdeB3Y2swVmNtLdNwKjgcnALGCiu8/Ixuc3xBlJRcmHGps0qfyeQYPgscdii/A778Ts5I47\nIm+yeXPkUVS3S0SqUtRl5Au1H0m+bN4cVYG/+KLqhPqSJXDzzfDii7HN+OKL4aCDYldY2VmW7bdP\nrdujiNRv6keSpFD7keTLpk0RTBYtqrqY47RpcO218OGH8J3vxLJXjx7xXNlOsW23zd2YRST31I9E\nqlTW+re6Myh77AGPPhrbhN95J86ejB0La9dGAn7OnKjbtXFj7scvIoWlqANJQ062p6JJk/IzKNtt\nt/XzjRvDj38cpep/8INo9Xv00fDyy5F8V90uEYEalrbMbFoK77HY3X+YuSFlnpa2UlPTGZS3347l\nrjlzovzKpZdCz57xXKtWsfRVU9l7Eak/MpIjMbMZwBHVvR54yt13r/0Qs0/J9rpZvjwCytq1Wz+3\ncWOcP7njjihRf+KJMHJknFkxiwR9587V1wATkfohU4HkYHd/pYYPqvGefNOMpG6++ioCSmWHEpcu\njWZazz0X5VcuvBC+970IIM2axZJZy5a5H7OIZI52bSVRIKk7d1i8OCoEV5ZYf+edWO764APYe+9Y\n7urVK57r0CGS+tWVvBeRwpWxXVtmtpeZ3Wxm08xsoZnNM7NnzexMM2uVmeFKoUrug9Kly9bnR771\nLXj4YRgzBmbNguOPj3Moq1dHAJoxA5Yty8/YRSQ3alra+jOwBHgGmEr0/2gG7AQcAhwGXOfuz2d/\nqLWnHEnmffNNzE6WLNm6bMpXX8Gtt8ZyV4cOUV340EMjGLVuHcn4mloGi0jhyFSOpJO7f1nDB3Ws\npm9IQdDSVuatXx/5k8pmG+++G8tds2dH+ZVLL4Udd4zZTNeuMcMRkcKXqaWtn5vZPtXdUOhBRLKj\nadMoCNmvX2z9Tbb77vDQQ3D55ZE7+fGP4aabYMWKKAj5/vuV7wgTkfqppkDyKXBbIi/yP2a2Wy4G\nJfVHWdn6Pn2gefPy640axeHFJ5+EYcPgkUfi8UsvRSfGWbOiGGRVJVpEpP5IadeWme1IlHs/njg7\nMh4Y7+7zsju89ChHkntLl0br3opbhqdPh+uui5a+e+wBl10Wwadp08idqG6XSOHJ2vZfM9sTuAfY\n3d3rxcZO5Uhya/Pm8i3DyVWGN22Cp5+G22+PWclxx8GoUXHepG3b6MrYuOB7doo0HBkt2mhmjcxs\nqJk9CPwZ+BA4Ns0xSpEqKYlDirvtFn+WbRlu1AhGjIjlriOOiHa/I0bACy/ETGbGjPhTROqXmnZt\nHQKcQJRJmQZMAP7k7lVUYypMmpHk14YNsdxVMUjMmBG7u2bOhIEDY7mrb99I3u+wQyx7iUj+ZGr7\n76vAY8Akd6+3NV4VSArD2rWRYF+xovza5s3w7LNx/mTVqujOeOaZkTPp3Fl1u0TyKeM5EjMbDOzk\n7g+ZWTughbt/muY4c0KBpLCsXBkBJbl17/LlkTt56qnIl5x3Hhx2WBSD7NFDdbtE8iGjgcTMfgns\nB+zo7juZWVfgcXffP/2hZo92bRW2yopCzpoVy13Tp0f5lTFjYnux6naJ5F6mA8nbwEBgmrsPTFx7\nt1DLx1ekGUnhci/vI19WFHLz5iizcuutsQx29NFw9tnlO7vatMnvmEUaiky32l3vEXE88ebbpDM4\nkTJmsbNrwIDyHV4lJTB8eOzuGjEi+p8cdVQse82dG33kKyttLyL5kWogecrMxgKtzew04C/Afdkb\nljQ0jRpBt26w667Qrl1ca906lrYeeihmIldeCT/9Kfzf/8WOr0UqziNSEGqTbB8KHEqcbJ/s7i9m\nc2CZpKWt+mfNmsiflO3w2rwZ/vxnuOWWSMyPGBHLXV26RDJ+G82RRTIuU9t//+Luh2Z0ZHmgQFJ/\nrVgRO7zKijyuXAl33glPPBFbhM87Lw43du4M22+/db8UEam7TOVIOmRoPCJ1su220L8/9OwZvUxa\ntYqy9A8/HIcWr7oKTjsNXnklDjYmn1ERkdyoaUYyD7ikqufd/alsDKrCGHoDvwBau/vRiWsHA1cB\nM4AJNfWM14ykOGzeXL7Da9Om2PFVtty1bFkk5M85J1r9qm6XSPoyNSNpDRwODKvk5/AUBnGfmS0y\ns+kVrg8xs9lmNtfMLq/uPdx9nruPrHgZWEV0a1xQ0zikOJSUxBLWgAHRHKukBA4/PHZ3HXcc/OlP\nEUzuvTeaay2pt7UYROqXmmYk09x9jzq/udmBxC/8h9x9QOJaI+AD4AdEEJhC1PNqBFxT4S1OL2uc\nZWaTkmYkJe6+2cw6ATe6+4nVjUMzkuK0fn3kT77+Oh7PmROHGd9+O5bDxoyBffaJJbBmzfI7VpH6\nKNUZSU2T/7SqHLn7q2bWs8LlvYG5Zb1MzGwCMNzdryGFWU7ifcvaIS0DVNqvgWraNFr4rloVAaVv\nX7j7bnjxRbj5Zjj1VDjySBg9Ojo5dumiul0i2VDT0tbJWfjMrsD8pMcLEtcqZWbtzOxOYKCZXZG4\ndpSZ3QU8DNxWxetGmdlUM5u6ePHizI1eCk7LlhEoeveOmcd//Vcsd51wQhSEPOoouO02eO+92PUl\nIplV7YzE3adX93wuuPtS4KwK154Cqk30u/s4M1sIDCstLd0zi0OUAtGmDWy3XSTkFy6Eiy6KrcHX\nXQfXXAPPPBOl6g86KA4/Khkvkhn52HX/GdA96XG3xLWMc/fn3H1U69ats/H2UoDKSq6UNdXq2xfu\nugt+97sIMKedBhdeCK+9piZaIplS60BiZm3MLJ1ijVOAvmbWy8xKiT7wz6bxflUys2FmNm758uXZ\neHspYMklV9q2hSFDombXiSdGQcjhw+GGG6La8Pr1+R6tSP2WaqvdV8xsWzNrS3RKvNvMbkzhdeOB\n14GdzWyBmY10943AaGAyMAuY6O4z6v5PqJpmJNK0aeROdt45ZigXXBAtfnfaCX7/+8ifTJgQS2Ep\nVgsSkQpSLSP/lrsPNLOfAt3d/df1oYy8+pFIRcuWRQ2vdevgL3+Bm26CxYsjl3LJJdHyV020REKm\ny8g3NrMuwLHA82mNLIc0I5GK2rSJ5a7u3WN316RJcPLJcUL+sMOi5Mq8eXFyXkRSk2og+S2xFDXX\n3ackypboP/GlXkrugdKrVyx3TZgAu+wSO7yGDoVHHokOjiJSs5TLyNdHWtqSVKxbV35C/uWX4Y9/\nhC+/jPIrV1wBe+4ZuRaRhiajrXbrO5VIkVSsXAnz58e24Pvui1lJs2bR9+S882IXmE7GS0OS6RxJ\nvaTtv1IbrVpFja5ddomzJhMmRD7l+uvhe9+LwKKT8SJbK+pAomS71EX79pE/GTwYbr89CkGuWAGn\nnBJlV6ZMgY0b8z1KkcJRYyAxs35m9j0za1nh+pDsDUskv0pKoGvXCCjHHBO7u047DSZPhkMOgZ//\nPPqiiEgNgcTMfgY8A5wHTDez4UlP/082ByZSCEpLY2fXwIFRp+vxx6P8yvXXw4EHwqOPlrcBFmmo\napqRnAHs6e5HAgcDvzKz8xPPFXzaUTkSyZQWLaLC8MEHR+2u666LfMlJJ8HRR8O0adHBUaQhqimQ\nlLj7KgB3/5gIJkMT5VEKPpAoRyKZ1rZtLHedeGKUqj/9dPjrX2N2cvnlcUpepKGpKZB8aWbfLnuQ\nCCqHA+2B3bI5MJFCVVIC228PgwbBL38Zy13f+lYsdw0eHMtdKgQpDUlNgeQUYIuUortvdPdTgAOz\nNiqReqAsf/KDH0RnxhtuiMONJ50UnRnfekuFIKVhqKmx1YKyv5tZG6KPSNlrCj7FmHSyPd9DkSLW\nsmWcP+nUCQ44AO65Bx58EPbfH845J07Ht22b71GKZE+q1X+vAk4FPgTKXuDu/t3sDS1zdLJdcmXT\nptgWPHUq/OEP8M9/Rhn73/4Wjj0WmjTJ9whFUpfqyfZUm40eC+zo7hvSG5ZIcWvUKM6ftG8fp+Kf\ney4CykknwUMPxeHGb31LpVakuKR6sn06sF02ByJSTJo2hT59YlfX00/DqFHwj3/Ad74TfU9UWViK\nSaqB5BrgLTObbGbPlv1kc2AixaB166gefOWV8MQTsdPrxhvj2iOPwDff5HuEIulLdWnrQeBa4D1A\nx65EasEMOneOvvEDBsCzz8ZW4ZNPLl/u+va3tdwl9VeqyfYp7r5XDsaTUepHIoVo1SqYMwfGjYP7\n748ActZZcSalXbt8j06kXEb7kSROsq8Hnk38CYC7T0tnkLmiXVtSaNzjFPzUqTE7eeUV6NEjWv2e\ncIJ2d0lhyHQg+Xsll7X9VyRNGzfCZ5/BM8/Egcb58+G7343lrj331HKX5Jc6JCZRIJFCt3p1+XLX\nfffFtTPPhF/8Ajp2zO/YpOHKaIdEM/sfM9su6XEbM/tdOgMUkXItWkTC/cor4amnYpvwLbfAXntF\nHkW1u6SQpbr9d6i7f132wN2XAf+VnSGJNFwdOsChh8as5NZb49rpp8PQofDGGypVL4Up1UDSyMya\nlj0ws+ZA02ruF5E6atwYevaEU0+N3Mm558Lrr8NBB8HPfgaff57vEYpsKdVA8ijwspmNNLORwF+J\nsyVZZ2a9zexeM5uUdK3EzK42s1vN7Ce5GIdIrrVsGeVUfvWr6H2y//4wdizss0/kUtasyfcIRUJK\ngcTdrwV+B+yS+LnK3a+r6XVmdp+ZLTKz6RWuDzGz2WY218wur+Gz57n7yAqXhwPdgG+ABVu/SqQ4\nmEVV4e9/Pzoz3nZb1PM688xY7nrttdj5JZJP1e7aMjPzGrZ1VXePmR0IrAIecvcBiWuNgA+AHxBB\nYApwAtCIKMWS7HR3X5R43SR3Pzrx98uBZe5+V/L1qmjXlhSL5cth3rxIwN9zT+RMTjstujP26KHt\nwpJZmdq19XczO8/MelR481Iz+66ZPQhUubTk7q8CFcvT7Q3MTcw0NgATgOHu/p67H17hZ1EVb70A\nWJb4u9KP0mC0bh3LXWPGxHLXgQfCnXfCfvvB7bdHoBHJtZoCyRBgEzDezD43s5lm9hEwh5hF3OTu\nD9TyM7sC85MeL0hcq5SZtTOzO4GBZnZF4vJTwA/N7FbgH1W8bpSZTTWzqYvVSFuKSElJlKo/5JDY\n2XX77dGtcfRoGDYM/va36NQokis1dUhcB9wO3G5mTYhe7WuTtwJnm7svBc6qcG0NUDFvUvF144Bx\nEEtbWRugSJ40awY77xy9T/baCx5+OFr+Dh0aO74uuSSaajVqlO+RSrFLddcW7v6Nuy/MQBD5jGjZ\nW6Zb4lrGmdkwMxu3XPN9KWLt2sVhxgsvjOWugw+OXV2HHBLJ+UWL1DtesivlQJJBU4C+ZtbLzEqB\n44likCJSR2VnT/bfP/qd3HlnNNe64AI46iiYPBlWrsz3KKVYZTWQmNl44HVgZzNbYGYj3X0jMBqY\nDMwCJrr7jGx8vrs/5+6jWrdunY23Fyk4rVpB//5wxBHw2GMRSN56C4YPh4sugunTVW5FMq+m7b+T\ngZeAF939/ZyNKkPUj0QasnXr4NNPY7vwzTfDSy9Bly5w8cVw7LGw/fbKn0j1MlL918w6Ezu3hgA7\nAW8QgeV/3X11hsaadTpHIg3ZkiVRqv6NN+C66+DDD6Mo5JgxsO++kazX+ROpTMbLyJtZCbAPMBT4\nHrAW+EsqJ9zzTYFEGrqNG6PXyaJFMHFinJLfsAFOOgnOOSd2f7Vqle9RSqHJej8SM2sP/NDdH63T\nG+SAlrZEtrRiRSx3ffZZlKl/4YXoJ3/RRfCjH0H37pGkFwE1ttqCZiQi5TZvjgrCixZFIv7aa6Op\n1uDBcNllcSalSxflTyTDja3qK50jEdlaSQl06wb9+kWu5OGH4/Die+9FEv5Xv4IpU6KnfAP470zJ\nAM1IRBow95iZfP55BI5bb4Xnn4+KwxdeCIcdFsUgt9023yOVfMj6jMTMTqvra0WkMJSVqd91V+jV\nC37zm6gq3Lp1VBQeORL++leYO1f1u6Rq6SxtXZmxUYhIXpWWQt++EUwGDYKHHoJLL4WZM+H44+Gq\nq2Dq1EjUq/+JVFTTOZJ3q3oK2MndC3p/h3ZtidTexo2wYAEsXQpffRXLXc89Bx07xnLXD38Yhxk7\ndtT5k2KXqQOJXwI/pLz3x/9/Cvi3u2+f1ihzRDkSkdpbsQI++STOm7z7buzumj07dnVddlkk67t1\ng+22y/dIJVsylSN5Hmjp7p9U+PkYeCUD4xSRArXttpE76dQpmmk99FCchn///Vjuuu66CDAffKD+\n8Q2ddm2JSI3WrIGPP4a1a2HZsihP/8wz0KFDFIY89ND4+/bbQ5Mm+R6tZIoOJKIciUgmucOXX8LC\nhXGo8b33Yrnr/fdhzz1juatv3zgp36lTnFeR+i1TOZJp7r5HDR9U4z35phmJSOasWxe5k1WrYNMm\n+NOfot3v6tWx5HXGGdC2bbQDbts236OVdGQqkKwl+rNXeQvQ2t171H6IuaNAIpJ5ixdHza5Nm+Dr\nr2HsWHj66ejYeP75MGQItGwZ9btatMj3aKUuMhVIdkjhsza5+4LaDC7XFEhEsuObb+JsydeJBtzT\np0cSfuZM2GOPWO7q0wfatIkdXqWl+R2v1I5yJEkUSESya9my8sOKmzZFIn7s2Fj+OvZYOPPM2AXW\nsWPkUFQQsn5Q0UYRyZk2bWKrcLt2ESSOOgqefDJa/E6YACNGRA2vhQthxoxotiXFo6hnJNq1JZJ7\nyQcZIZa5rr02AsjAgeW7u5o3j+UuFYQsXBld2jKz/u4+s8K1g939lboPMXe0tCWSW5s3RyJ+0aLy\nx88+G+dPVq6EY46J5a5WraJAZLdu0KxZfscsW8v00tZEMxtjobmZ3Qpck94QRaRYlZTEbq1+/SJA\nlJTAkUfGctePfgSPP16+3LVsWcxa5s9XQcj6KtVAsg/QHfg3MAX4HNgvW4MSkeLQogX07x8dF83K\ny9M//HCcM/nNb+CnP41DjYsWxa6vL79UQ636JtVA8g2wFmgONAM+cvfNWRuViBQNsyidsssusM02\nca1fP7j3Xvjv/47dXiefHHmUZcui8vCMGeVbiqXwpRpIphCBZC/gAOAEM3sia6MSkaLTvHl5xeCS\nkvg54gh46qlY5nryyfjzmWeipteHH6ogZH2RarJ9kLtPrXDtZHd/OGsjyyAl20UKy/r1sbNr5cry\na7Nnx6zk3Xdht92i0nC/fvFcu3axFKaCkLmV6V1blZZAcfdP6zC2WjGz3sAviFIsRyeuHQCcCDQG\n+rv7d6p7DwUSkcKUXGYFYnfXCy/ALbfEMteIEXD22ZFbKSlRQchcy3QgeQ9worZWM6AXMNvdd63h\ndfcBhwOL3H1A0vUhwM1AI+Aed/99CmOYVBZIkq4dCXRy97uqe60CiUjh2rAh8iTLl5dfW7kS7roL\nJk6McyajR8cyWElJlFlRQcjcyOj2X3ffzd13T/zZF9gbeD2Flz4ADKkwsEbAWGAo0J/It/Q3s93M\n7PkKPx1reP8fA4+l8m8QkcJUWhr1uHr1gsaN41qrVnDJJfDII7DDDvC738Hpp8OsWRF4Pvoodnqt\nWpXfsUvcLc59AAAQmElEQVRoXJcXufs0M9snhfteNbOeFS7vDcx193kAZjYBGO7u1xCzl5QkltuW\nu/vKGm8WkYLXtm3MPj79NJa1AHbaCe65p3y565RT4hzKOefE87NnR3mWrl2hadP8jb2hSymQmNlF\nSQ9LgD2IsyR10RWYn/R4AXFOparPbgdcDQw0sysSAQdgJHB/Na8bBYwC6NGjoKvci0hC48bQu3ds\n/f3006gubAaHHQYHHVS+3PXyy7HcNXx4BJ2vv47ciQpC5keqKatWST9NgT8Dw7M1qGTuvtTdz3L3\nHZOCCO7+a3f/dzWvG+fug9x9UIcOHXIxVBHJkO22Ky8CWaZlS7j4Ynj0UdhxR7j6ajj11Dhz4g5f\nfBEHGhcv1oHGXEtpRuLuV2bwMz8jTsmX6Za4lnFJRRuz8fYikkWNGkHPnrHklVwEsk+fmJm89BLc\ndFMEkyOPhHPPjQD06adxSr57dxWEzJVqA4mZPUfs1qqUux9Rh8+cAvQ1s15EADmeSJqLiGxl221j\ndrJgQcw2IJa7hg6FAw6Au++OUvV/+1tsFf7Rj6Id8Jw58dru3VUQMttq6pB4UHUvdvd/VPvmZuOB\ng4H2wJfAr939XjP7L+AmYvvvfe5+dS3HXSva/itSHFatgo8/jgONyT78MDozvvlmlGIZMwYGJA4c\nmEH79lGmpXGdthc1XJlqtdsjF4cOs0X9SESKz+bN8PnnsXyV/OvLHf7yl1juWrw4EvGjR8euLoil\nsi5dokujWX7GXt9kKpBMc/c9En9/0t1HZHCMOaMZiUjxWb06cidr1259/Z574LHHovrw2WdHx8ay\n3VxNm8Z24bIAI1XL1IHE5LjdO70hiYhkTosWsYxVVqI++fr558P48bDzzlG/65RTooYXxLLYvHlx\nBkUFITOjpkDiVfy9XjCzYWY2bnly7QURKRplJer79SsvUV+md2+4/Xa45po4a3L66XDllfDVV/H8\nqlVxUv7jj+O8itRdTUtbm4DVxMykOVAWvw1wd68Xm+u0tCVS/MrOkixcuPU5kjVrov/Jo4/GDq6z\nz46CkGXJ95KS8gONKghZLqNFG+srJdtFGp5162KWsXr11s99/HHs7vrPf6L8ymWXwbe/Xf58kyaR\nP0k+CNmQKZAk0YxEpGFxj11dn38eu7wqPvfyy/DHP0Zb38MOg5/9bMvgsc02cf6kZcvcjrvQZLT6\nr4hIfWIWS1X9+28dDMzg+9+HSZPgtNNg8uTY1TVhAmzcGPesWRPJ+Hnztj6zIltTIBGRotW0aezc\n6t5969xH8+ZRVuXxx6Mj4w03RO/4t94qv2fZsqjltWBBefMt2VpRBxLt2hIRiEOI/ftHn5OKdtgB\nbr01cicrVsAZZ8B//zcsWRLPu8cSmApCVk05EhFpUCq29022di3cd1801CothTPPhGOP3bK0SrNm\n0K1btP8tdsqRiIhUokOHmJ1UVhk4ebnrW9+CG2+EE0+EadPK71m3DubOjaKQ69blbtyFTIFERBqc\n0lLo2zeWtSprhNWjB9x8c+RN1qyBUaPgl78sX+6CWAabOTPK1pcl6Ruqog4kypGISHXat4/ZSWXL\nVGZw8MHwxBPw059GmfoRI2LZqyxwuMdS2fTpkUdpAJmCSilHIiICLF0K8+dXvTtr/vyYofzrX1F+\n5bLLYFCF7EHTppE/2W677I83F5QjERGphXbtooFWVUn07t2jRP0f/hC5kbPOgp//PA4+llm/Pnqj\nfPBBwyoIqUAiIpLQpEm08u3Vq/ImWGZw0EEwcWJsE37lFTj6aHj44S3zJCtXNqyCkAokIiIVtG0b\nuZOqlqiaNYutwRMnwp57RmL+hBNgypQt71u6NPInCxduXaqlmCiQiIhUokkT2HHHqmcnEPmQP/4x\nfjZsiKrCV1wRifcyZR0dZ8woL2FfbIo6kGjXloikq23byJ1Ul0A/4ICYnZx5Jrz6aix3Pfjglsta\nGzbARx/B++9HL5Riol1bIiIpWras5nMjn30WBxn/8Q/o2RMuvRT22Wfr+9q0iRlNaWnWhps27doS\nEcmwNm1idlJdv/euXWNn1003RcA591wYMyaabiVbtizyJ1WVa6lPFEhERGqhceM4R9K7d9W5E4D9\n949SK2edBa+9Fstd998fS1xlyro6zpix5an5+kaBRESkDlKZnTRtGqfiJ02CffeFsWPh+OPh9de3\nvO+bb+CTT6LkysqV2R13NiiQiIjUUaqzky5d4Prr4ZZbYhZy3nmRO6m43LV2bRxmnDu3fhWEVCAR\nEUlTKrMTgO98J5a7zjkH/v3vqN11771bLncBLF8es5PqSrYUkoIPJGbW28zuNbNJSdd6mNnTZnaf\nmV2ez/GJiEDqs5PSUjj9dHjyyQgsd9wBxx0XNbySlfWdnz49/izkDbZZDSSJX/SLzGx6hetDzGy2\nmc2tKRC4+zx3H1nh8m7AJHc/HRiY4WGLiNRZ2eykpsKNnTvHctdtt0XplfPPh4svjsOLyTZujJnJ\nzJkxUylE2Z6RPAAMSb5gZo2AscBQoD9wgpn1N7PdzOz5Cj8dq3jf/wNGmtnfgJeyOH4RkVpr3Ljm\nU/FlBg+GCRNg9Gh44w045hi4554oAJksuaHW2rXZG3tdZDWQuPurQMWiAHsDcxMzjQ3ABGC4u7/n\n7odX+Fm01ZuG04Bfu/t3gcOy9y8QEam7mmp2lSkthVNPjd1d++8Pd94ZLX5fe23re1esiIKQhdRQ\nKx85kq7A/KTHCxLXKmVm7czsTmCgmV2RuPwS8LPE9Y+reN0oM5tqZlMXL16cmZGLiNRSKjW7ynTu\nDNdeG9uEGzeGCy6ACy+EBQu2vK/QGmplvUSKmfUEnnf3AYnHRwND3P2niccnA/u4++hsjUElUkSk\nEJSdF0kl1/HNN/DYY7HMtWlTzFhOOSUqD1eUrYZahVwi5TOge9LjbolrGaeijSJSSMr6nfTsWXmv\n+Ir3/uQnsdx10EEwblzs7vrnP7e+N98NtfIRSKYAfc2sl5mVAscDz+ZhHCIieVFTN8ZknTrBNdfE\nNuHS0ljqqmy5C/LXUCvb23/HA68DO5vZAjMb6e4bgdHAZGAWMNHdZ2Tj8939OXcf1TqV/2+JiORQ\n2exkhx1qnp0A7LUXjB8feZM334xk/F13VX4CPtcNtYq6jLyZDQOG9enT54w5c+bkezgiIpXasCFy\nJytWpHb/4sVRXXjyZNh+e7joolj+Mtv63m7dYlZTF4WcI8kZzUhEpD4oLYW+faFHDyhJ4bdyhw5w\n9dWxTbhZM7jkkjjQOH9+za/NhqIOJCIi9UmHDnHupFWr1O4fNCh2dl14IbzzTix33XFH7gs+FnUg\n0a4tEalvmjaFnXaC7t1Tm500bgwnnhi1u77//SgCecwx8Pe/5+58SVHnSMroHImI1Efr18cOrNr0\neJ82Da67Lsqp7Lsv3HBDFIesC+VI0IxEROq3pk1h550jYV5ZIr0ye+wBjzwSBSDffRcuuyy7YwTN\nSERE6oV16+Cjj2p34HDJkjirMnhw3T5TMxIRkSLSrBn06xfbfVOdnbRvHzW+sk2BRESknjCLtr39\n+kHz5vkeTbmiDiTKkYhIMdpmG9hll6gWnOrsJJuKOpDoQKKIFCsz6No1kvGVVQTOpaIOJCIixa5F\ni5iddKyqn2wOKJCIiNRzJSVxgHGnnaLcSs4/P/cfmTvKkYhIQ9KqVZRYad8+t59b1IFEORIRaWga\nNYrS9H36RKn6XKihg7CIiNRHrVvH7GTDhux/lgKJiEiRatw4frKtqJe2REQk+xRIREQkLUUdSLRr\nS0Qk+4o6kGjXlohI9hV1IBERkexTIBERkbQokIiISFoUSEREJC0NotWumS0Gvgaq277Vuprn2wNL\nMj2uLKvu31PIn5XOe9X2tanen8p9Nd1TbN8vyN13TN+v/H2/dnD3DjXe5e4N4gcYV9fngan5Hn+m\n/72F+lnpvFdtX5vq/anc19C+X5n+/3uuPkffr+z8NKSlrefSfL6+yeW/J5Oflc571fa1qd6fyn0N\n7fsFufs36ftV4N+vBrG0lS4zm+rug/I9DilO+n5JNuXi+9WQZiTpGJfvAUhR0/dLsinr3y/NSERE\nJC2akYiISFoUSEREJC0KJCIikhYFkjSYWW8zu9fMJuV7LFIczKyFmT1oZneb2Yn5Ho8Un2z83mqw\ngcTM7jOzRWY2vcL1IWY228zmmtnl1b2Hu89z95HZHanUd7X8rh0FTHL3M4Ajcj5YqZdq8x3Lxu+t\nBhtIgAeAIckXzKwRMBYYCvQHTjCz/ma2m5k9X+GnY+6HLPXUA6T4XQO6AfMTt23K4RilfnuA1L9j\nGZeDtvCFyd1fNbOeFS7vDcx193kAZjYBGO7u1wCH53aEUixq810DFhDB5G0a9n/oSS3U8js2M9Of\nry/qlrpS/l+DEP+j7lrVzWbWzszuBAaa2RXZHpwUlaq+a08BI8zsDoqzrIrkTqXfsWz83mqwM5JM\ncPelwFn5HocUD3dfDZyW73FI8crG7y3NSLb0GdA96XG3xDWRTNN3TbItZ98xBZItTQH6mlkvMysF\njgeezfOYpDjpuybZlrPvWIMNJGY2Hngd2NnMFpjZSHffCIwGJgOzgInuPiOf45T6T981ybZ8f8dU\ntFFERNLSYGckIiKSGQokIiKSFgUSERFJiwKJiIikRYFERETSokAiIiJpUSCRBs/MNpnZ20k/1bYP\nyBUz+9jM3jOzQWb2p8TY5prZ8qSxfqeK1440s4crXOuUKDXexMweN7OvzOzI3PxrpJjpHIk0eGa2\nyt1bZvg9GycOhKXzHh8Dg9x9SdK1g4FL3L3aatRm1gb4AOju7usS10YDu7v7qMTjR4jeJ0+nM04R\nzUhEqpCYEVxpZtMSM4N+iestEo2E/mNmb5nZ8MT1U83sWTP7G/CymZWY2e1m9r6Z/dXMXjCzo83s\nu2b2dNLn/MDM/pTGOPcys3+Y2Ztm9qKZdXL3ZcC/gcOSbj0eGF/XzxGpigKJCDSvsLR1XNJzS9x9\nD+AO4JLEtV8Af3P3vYFDgOvNrEXiuT2Ao939IKLbYU+iqdDJwL6Je/4O9DOzDonHpwH31WXgZtYU\nuBkY4e57Ao8AVyWeHk8ED8yse2Is/6jL54hUR2XkRWCtu3+7iueeSvz5JhEYAA4FjjCzssDSDOiR\n+Ptf3f2rxN/3B55w983AF2b2dwB390T+4iQzu58IMKfUcey7ALsC/2tmAI2IvhMQBfpuNbOWwHFJ\nYxHJKAUSkeqtT/y5ifL/vRgxA5idfKOZ7QOsTvF97ycaV60jfsHXNZ9iwLvufkDFJ9x9jZn9leiK\ndzxwTh0/Q6RaWtoSqb3JwHmWmAKY2cAq7vsX0e2wxMw6AQeXPeHunwOfA78kgkpdzSS63u2dGEup\nme2a9Px44FJgO3f/TxqfI1IlBRKRrXMkv6/h/quAJsC7ZjaD8pxERU8Sy0wzidzFNGB50vOPAvPd\nfVZdB+7u64GjgRvN7F3gLWCfpFsmE8tuE+r6GSI10fZfkSwys5buvsrM2gH/AfZz9y8Sz90GvOXu\n91bx2o+psP03w2PT9l/JCM1IRLLreTN7G/gncFVSEHkT2J2YqVRlMbGNeFCmB2VmjwP7ETkakbRo\nRiIiImnRjERERNKiQCIiImlRIBERkbQokIiISFoUSEREJC0KJCIikpb/B44miFxBYOIXAAAAAElF\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f26cc547da0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = pwl.plot_error(energy_range, color='blue', alpha=0.2)\n",
    "pwl.plot(energy_range, ax=ax, color='blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Integral fluxes\n",
    "\n",
    "You've probably asked yourself already, if it's possible to integrated models. Yes, it is. Where analytical solutions are available, these are used by default. Otherwise, a numerical integration is performed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.2186014196061302e-12 1 / (m2 s)\n"
     ]
    }
   ],
   "source": [
    "integral = pwl.integral(emin=1 * u.TeV, emax= 10*u.TeV)\n",
    "print(integral)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## User-defined model\n",
    "\n",
    "Now we'll see how you can define a custom model. To do that you need to subclass ``SpectralModel``. All ``SpectralModel`` subclasses need to have an ``__init__`` function, which sets up the ``ParameterList`` of the model and a ``static`` function called ``evaluate`` where the mathematical expression for the model is defined.\n",
    "\n",
    "As an example we will use a PowerLaw plus a Gaussian (with fixed width)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class UserModel(models.SpectralModel):\n",
    "    def __init__(self, index, amplitude, reference, mean, width):\n",
    "        self.parameters = ParameterList([\n",
    "                Parameter('index', index, parmin=0),\n",
    "                Parameter('amplitude', amplitude, parmin=0),\n",
    "                Parameter('reference', reference, frozen=True),\n",
    "                Parameter('mean', mean, parmin=0),\n",
    "                Parameter('width', width, parmin=0, frozen=True)\n",
    "            ])\n",
    "    @staticmethod\n",
    "    def evaluate(energy, index, amplitude, reference, mean, width):\n",
    "        pwl = models.PowerLaw.evaluate(energy=energy, index=index, amplitude=amplitude, reference=reference)\n",
    "        gauss = amplitude * np.exp(-1 *(energy - mean) ** 2/( 2 * width ** 2))\n",
    "        return pwl + gauss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UserModel\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error       unit      min max frozen\n",
      "\t--------- --------- ----- --------------- --- --- ------\n",
      "\t    index 2.000e+00   nan                 nan nan  False\n",
      "\tamplitude 1.000e-12   nan 1 / (cm2 s TeV) nan nan  False\n",
      "\treference 1.000e+00   nan             TeV nan nan   True\n",
      "\t     mean 5.000e+00   nan             TeV nan nan  False\n",
      "\t    width 2.000e-01   nan             TeV nan nan   True\n"
     ]
    }
   ],
   "source": [
    "model = UserModel(\n",
    "    index=2 * u.Unit(''),\n",
    "    amplitude=1e-12 * u.Unit('cm-2 s-1 TeV-1'),\n",
    "    reference=1 * u.TeV,\n",
    "    mean=5 * u.TeV,\n",
    "    width=0.2 * u.TeV,\n",
    ")\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f26cc12ed68>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f26cc105d30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "energy_range = [1, 10] * u.TeV\n",
    "\n",
    "fig, ax = plt.subplots(1)\n",
    "model.plot(ax=ax, energy_range=energy_range)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What's next?\n",
    "\n",
    "In this tutorial we learnd how to work with spectral models. Go to [gammapy.spectrum](..\/spectrum/index.rst) to see what else you can do with gammapy.spectrum."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
