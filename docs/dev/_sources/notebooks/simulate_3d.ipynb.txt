{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-extra/master?urlpath=lab)\n",
    " and then double-click on **simulate_3d.ipynb** file.\n",
    "- You can also contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy-extra/tree/master/notebooks).\n",
    "- **Source files:**\n",
    "[simulate_3d.ipynb](../_static/notebooks/simulate_3d.ipynb) |\n",
    "[simulate_3d.py](../_static/notebooks/simulate_3d.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3D simulation and fitting\n",
    "\n",
    "This tutorial shows how to do a 3D map-based simulation and fit.\n",
    "\n",
    "For a tutorial on how to do a 3D map analyse of existing data, see the `analysis_3d` tutorial.\n",
    "\n",
    "This can be useful to do a performance / sensitivity study, or to evaluate the capabilities of Gammapy or a given analysis method.\n",
    "\n",
    "In Gammapy we currently don't have an event sampler, i.e. unbinned analysis as in ctools is not available. Note that other science tools, e.g. Sherpa for Chandra, also just do binned simulations and analysis like we do here.\n",
    "\n",
    "Warning: this is work in progress, several missing pieces: background, PSF, diffuse and point source models, model serialisation.\n",
    "\n",
    "We aim to have a first usable version ready and documented here for the Gammapy v0.8 release on May 7, 2018."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports and versions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from gammapy.irf import EffectiveAreaTable2D, EnergyDispersion2D, EnergyDependentMultiGaussPSF, Background3D\n",
    "from gammapy.maps import WcsGeom, MapAxis, WcsNDMap, Map\n",
    "from gammapy.spectrum.models import PowerLaw\n",
    "from gammapy.image.models import SkyGaussian\n",
    "from gammapy.utils.random import get_random_state\n",
    "from gammapy.cube import (\n",
    "    make_map_exposure_true_energy,\n",
    "    SkyModel,\n",
    "    MapFit,\n",
    "    MapEvaluator,\n",
    "    SourceLibrary,\n",
    "    PSFKernel,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gammapy package:\n",
      "\n",
      "\tpath                   : /Users/deil/work/code/gammapy/gammapy \n",
      "\tversion                : 0.8.dev6624 \n",
      "\tgithash                : f914c2dde9255456dc95a91356de6737cdbb476f \n",
      "\n"
     ]
    }
   ],
   "source": [
    "!gammapy info --no-envvar --no-dependencies --no-system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load CTA IRFs\n",
    "\n",
    "def get_irfs():\n",
    "    filename = '$GAMMAPY_EXTRA/datasets/cta-1dc/caldb/data/cta//1dc/bcf/South_z20_50h/irf_file.fits'\n",
    "    psf = EnergyDependentMultiGaussPSF.read(filename, hdu='POINT SPREAD FUNCTION')\n",
    "    aeff = EffectiveAreaTable2D.read(filename, hdu='EFFECTIVE AREA')\n",
    "    edisp = EnergyDispersion2D.read(filename, hdu='ENERGY DISPERSION')\n",
    "    bkg = Background3D.read(filename, hdu='BACKGROUND')\n",
    "    return dict(psf=psf, aeff=aeff, edisp=edisp, bkg=bkg)\n",
    "\n",
    "irfs = get_irfs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/deil/work/code/gammapy-extra'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.environ['GAMMAPY_EXTRA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "spatial_model = SkyGaussian\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t name   value   error unit min max frozen\n",
      "\t----- --------- ----- ---- --- --- ------\n",
      "\tlon_0 2.000e-01   nan  deg nan nan  False\n",
      "\tlat_0 1.000e-01   nan  deg nan nan  False\n",
      "\tsigma 5.000e-01   nan  deg nan nan  False\n",
      "\n",
      "spectral_model = PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error       unit         min    max frozen\n",
      "\t--------- --------- ----- --------------- --------- --- ------\n",
      "\t    index 3.000e+00   nan                       nan nan  False\n",
      "\tamplitude 1.000e-11   nan 1 / (cm2 s TeV)       nan nan  False\n",
      "\treference 1.000e+00   nan             TeV 0.000e+00 nan   True\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define sky model to simulate the data\n",
    "spatial_model = SkyGaussian(\n",
    "    lon_0='0.2 deg',\n",
    "    lat_0='0.1 deg',\n",
    "    sigma='0.5 deg',\n",
    ")\n",
    "spectral_model = PowerLaw(\n",
    "    index=3,\n",
    "    amplitude='1e-11 cm-2 s-1 TeV-1',\n",
    "    reference='1 TeV',\n",
    ")\n",
    "sky_model = SkyModel(\n",
    "    spatial_model=spatial_model,\n",
    "    spectral_model=spectral_model,\n",
    ")\n",
    "print(sky_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Define map geometry\n",
    "axis = MapAxis.from_edges(\n",
    "    np.logspace(-1., 1., 10), unit='TeV',\n",
    ")\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(0, 0), binsz=0.02, width=(9, 5),\n",
    "    coordsys='GAL', axes=[axis],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Define some observation parameters\n",
    "# Here we just have a single observation,\n",
    "# we are not simulating many pointings / observations\n",
    "pointing = SkyCoord(1, 0.5, unit='deg', frame='galactic')\n",
    "livetime = 1 * u.hour\n",
    "offset_max = 2 * u.deg\n",
    "offset = Angle('2 deg')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The truth value of a Quantity is ambiguous. In the future this will raise a ValueError. [astropy.units.quantity]\n",
      "/Users/deil/software/anaconda3/envs/gammapy-dev/lib/python3.6/site-packages/astropy/units/quantity.py:639: RuntimeWarning: invalid value encountered in true_divide\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "# Compute maps, PSF and EDISP - just as you would for analysis of real data\n",
    "\n",
    "exposure_map = make_map_exposure_true_energy(\n",
    "    pointing=pointing,\n",
    "    livetime=livetime,\n",
    "    aeff=irfs['aeff'],\n",
    "    geom=geom,\n",
    ")\n",
    "\n",
    "psf = irfs['psf'].to_energy_dependent_table_psf(theta=offset)\n",
    "psf_kernel = PSFKernel.from_table_psf(\n",
    "    psf,\n",
    "    geom,\n",
    "    max_radius=1 * u.deg,\n",
    ")\n",
    "\n",
    "edisp = irfs['edisp'].to_energy_dispersion(offset=offset)\n",
    "\n",
    "# Background: Assume constant background in FoV\n",
    "# TODO: Fill CTA background\n",
    "bkg = Map.from_geom(geom)\n",
    "bkg.quantity = np.ones(bkg.data.shape) * 1e-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(exposure_map.data[2,:,:]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(psf_kernel.psf_kernel_map.data[2,:,:]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 9 µs, sys: 0 ns, total: 9 µs\n",
      "Wall time: 12.6 µs\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# The idea is that we have this class that can compute `npred`\n",
    "# maps, i.e. \"predicted counts per pixel\" given the model and\n",
    "# the observation infos: exposure, background, PSF and EDISP\n",
    "evaluator = MapEvaluator(\n",
    "    sky_model=sky_model, \n",
    "    exposure=exposure_map,\n",
    "    psf=psf_kernel,\n",
    "    background=bkg,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Accessing and saving a lot of the following maps is for debugging.\n",
    "# Just for a simulation one doesn't need to store all these things.\n",
    "# dnde = evaluator.compute_dnde()\n",
    "# flux = evaluator.compute_flux()\n",
    "npred = evaluator.compute_npred()\n",
    "npred_map = WcsNDMap(geom, npred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "npred_map.sum_over_axes().plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# The npred map contains negative values, this is probably a bug in the PSFKernel application\n",
    "npred[npred<0] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# This one line is the core of how to simulate data when\n",
    "# using binned simulation / analysis: you Poisson fluctuate\n",
    "# npred to obtain simulated observed counts.\n",
    "# Compute counts as a Poisson fluctuation\n",
    "rng = get_random_state(42)\n",
    "counts = rng.poisson(npred)\n",
    "counts_map = WcsNDMap(geom, counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts_map.sum_over_axes().plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit\n",
    "\n",
    "Now let's analyse the simulated data.\n",
    "Here we just fit it again with the same model we had before, but you could do any analysis you like here, e.g. fit a different model, or do a region-based analysis, ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter(name='sigma', value=1.0, unit='deg', min=nan, max=nan, frozen=False)\n",
      "SkyModel\n",
      "\n",
      "spatial_model = SkyGaussian\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t name   value   error unit min max frozen\n",
      "\t----- --------- ----- ---- --- --- ------\n",
      "\tlon_0 0.000e+00   nan  deg nan nan  False\n",
      "\tlat_0 0.000e+00   nan  deg nan nan  False\n",
      "\tsigma 1.000e+00   nan  deg nan nan  False\n",
      "\n",
      "spectral_model = PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value   error       unit         min    max frozen\n",
      "\t--------- --------- ----- --------------- --------- --- ------\n",
      "\t    index 2.000e+00   nan                       nan nan  False\n",
      "\tamplitude 1.000e-11   nan 1 / (cm2 s TeV)       nan nan  False\n",
      "\treference 1.000e+00   nan             TeV 0.000e+00 nan   True\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define sky model to fit the data\n",
    "spatial_model = SkyGaussian(\n",
    "    lon_0='0 deg',\n",
    "    lat_0='0 deg',\n",
    "    sigma='1 deg',\n",
    ")\n",
    "spectral_model = PowerLaw(\n",
    "    index=2,\n",
    "    amplitude='1e-11 cm-2 s-1 TeV-1',\n",
    "    reference='1 TeV',\n",
    ")\n",
    "model = SkyModel(\n",
    "    spatial_model=spatial_model,\n",
    "    spectral_model=spectral_model,\n",
    ")\n",
    "\n",
    "model.parameters.set_parameter_errors({\n",
    "    'lon_0': '0.1 deg',\n",
    "    'lat_0': '0.1 deg',\n",
    "    'sigma': '0.1 deg',\n",
    "    'index': '0.1',\n",
    "    'amplitude': '1e-12 cm-2 s-1 TeV-1',\n",
    "})\n",
    "\n",
    "# model.parameters['sigma'].min = 0\n",
    "print(model.parameters['sigma'])\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 683920.5984619583</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 214</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 214</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 3.380189579013175e-05</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#ZTJMCbjNNB').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>lon_0</td>\n",
       "                <td>0.191999</td>\n",
       "                <td>0.0141163</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>lat_0</td>\n",
       "                <td>0.125071</td>\n",
       "                <td>0.0140851</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>sigma</td>\n",
       "                <td>0.505716</td>\n",
       "                <td>0.00951979</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>4</td>\n",
       "                <td>index</td>\n",
       "                <td>3.01737</td>\n",
       "                <td>0.0533328</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>5</td>\n",
       "                <td>amplitude</td>\n",
       "                <td>1.00666e-11</td>\n",
       "                <td>9.53716e-13</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>6</td>\n",
       "                <td>reference</td>\n",
       "                <td>1</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"ZTJMCbjNNB\" style=\"display:none;\">\n",
       "            <textarea rows=\"18\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & $lon_{0}$ & 1.920e-01 & 1.412e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "2 & $lat_{0}$ & 1.251e-01 & 1.409e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & $\\sigma$ & 5.057e-01 & 9.520e-03 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "4 & index & 3.017e+00 & 5.333e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "5 & amplitude & 1.007e-11 & 9.537e-13 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "6 & reference & 1.000e+00 & 0.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 25.2 s, sys: 2.44 s, total: 27.7 s\n",
      "Wall time: 7.03 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = MapFit(\n",
    "    model=model,\n",
    "    counts=counts_map,\n",
    "    exposure=exposure_map,\n",
    "    background=bkg,\n",
    ")\n",
    "\n",
    "fit.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True values:\n",
      "\n",
      "ParameterList\n",
      "Parameter(name='lon_0', value=0.2, unit='deg', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='lat_0', value=0.1, unit='deg', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='sigma', value=0.5, unit='deg', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='index', value=3.0, unit='', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='amplitude', value=1e-11, unit='1 / (cm2 s TeV)', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='reference', value=1.0, unit='TeV', min=0.0, max=nan, frozen=True)\n",
      "\n",
      "Covariance: \n",
      "None\n",
      "\n",
      "\n",
      "Fit result:\n",
      "\n",
      "ParameterList\n",
      "Parameter(name='lon_0', value=0.1919994759882923, unit='deg', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='lat_0', value=0.1250707396008336, unit='deg', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='sigma', value=0.5057161629253165, unit='deg', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='index', value=3.0173668505205438, unit='', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='amplitude', value=1.0066644453420628e-11, unit='1 / (cm2 s TeV)', min=nan, max=nan, frozen=False)\n",
      "Parameter(name='reference', value=1.0, unit='TeV', min=0.0, max=nan, frozen=True)\n",
      "\n",
      "Covariance: \n",
      "[[ 1.99269536e-04  4.97510840e-07 -7.04797232e-06  1.31642036e-05\n",
      "  -4.46821505e-16  0.00000000e+00]\n",
      " [ 4.97510840e-07  1.98389861e-04  1.02981529e-06 -5.08808132e-06\n",
      "   5.03723491e-17  0.00000000e+00]\n",
      " [-7.04797232e-06  1.02981529e-06  9.06263917e-05 -4.64993731e-05\n",
      "   2.05026314e-15  0.00000000e+00]\n",
      " [ 1.31642036e-05 -5.08808132e-06 -4.64993731e-05  2.84438869e-03\n",
      "  -4.89108445e-14  0.00000000e+00]\n",
      " [-4.46821505e-16  5.03723491e-17  2.05026314e-15 -4.89108445e-14\n",
      "   9.09573496e-25  0.00000000e+00]\n",
      " [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00\n",
      "   0.00000000e+00  0.00000000e+00]]\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('True values:\\n\\n{}\\n\\n'.format(sky_model.parameters))\n",
    "print('Fit result:\\n\\n{}\\n\\n'.format(model.parameters))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# TODO: show e.g. how to make a residual image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## iminuit\n",
    "\n",
    "What we have done for now is to write a very thin wrapper for http://iminuit.readthedocs.io/\n",
    "as a fitting backend. This is just a prototype, we will improve this interface and\n",
    "add other fitting backends (e.g. Sherpa or scipy.optimize or emcee or ...)\n",
    "\n",
    "As a power-user, you can access ``fit.iminuit`` and get the full power of what is developed there already.\n",
    "E.g. the ``fit.fit()`` call ran ``Minuit.migrad()`` and ``Minuit.hesse()`` in the background, and you have\n",
    "access to e.g. the covariance matrix, or can check a likelihood profile, or can run ``Minuit.minos()``\n",
    "to compute asymmetric errors or ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <table>\n",
       "                <tr>\n",
       "                    <td><a onclick=\"$('#bHHzFDGYqj').toggle()\" href=\"#\">+</a></td>\n",
       "        \n",
       "            <td>\n",
       "            <div style=\"width:20px;position:relative; width: -moz-fit-content;\">\n",
       "            <div style=\"display:inline-block;-webkit-writing-mode:vertical-rl;-moz-writing-mode: vertical-rl;writing-mode: vertical-rl;\">\n",
       "            lon_0\n",
       "            </div>\n",
       "            </div>\n",
       "            </td>\n",
       "            \n",
       "            <td>\n",
       "            <div style=\"width:20px;position:relative; width: -moz-fit-content;\">\n",
       "            <div style=\"display:inline-block;-webkit-writing-mode:vertical-rl;-moz-writing-mode: vertical-rl;writing-mode: vertical-rl;\">\n",
       "            lat_0\n",
       "            </div>\n",
       "            </div>\n",
       "            </td>\n",
       "            \n",
       "            <td>\n",
       "            <div style=\"width:20px;position:relative; width: -moz-fit-content;\">\n",
       "            <div style=\"display:inline-block;-webkit-writing-mode:vertical-rl;-moz-writing-mode: vertical-rl;writing-mode: vertical-rl;\">\n",
       "            sigma\n",
       "            </div>\n",
       "            </div>\n",
       "            </td>\n",
       "            \n",
       "            <td>\n",
       "            <div style=\"width:20px;position:relative; width: -moz-fit-content;\">\n",
       "            <div style=\"display:inline-block;-webkit-writing-mode:vertical-rl;-moz-writing-mode: vertical-rl;writing-mode: vertical-rl;\">\n",
       "            index\n",
       "            </div>\n",
       "            </div>\n",
       "            </td>\n",
       "            \n",
       "            <td>\n",
       "            <div style=\"width:20px;position:relative; width: -moz-fit-content;\">\n",
       "            <div style=\"display:inline-block;-webkit-writing-mode:vertical-rl;-moz-writing-mode: vertical-rl;writing-mode: vertical-rl;\">\n",
       "            amplitude\n",
       "            </div>\n",
       "            </div>\n",
       "            </td>\n",
       "            \n",
       "                </tr>\n",
       "                \n",
       "            <tr>\n",
       "                <td>lon_0</td>\n",
       "            \n",
       "                <td style=\"background-color:rgb(255,117,117)\">\n",
       "                1.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(163,254,186)\">\n",
       "                0.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(168,247,182)\">\n",
       "                -0.05\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(165,252,185)\">\n",
       "                0.02\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(166,249,184)\">\n",
       "                -0.03\n",
       "                </td>\n",
       "                \n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>lat_0</td>\n",
       "            \n",
       "                <td style=\"background-color:rgb(163,254,186)\">\n",
       "                0.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(255,117,117)\">\n",
       "                1.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(164,253,185)\">\n",
       "                0.01\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(164,253,186)\">\n",
       "                -0.01\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(163,253,186)\">\n",
       "                0.00\n",
       "                </td>\n",
       "                \n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>sigma</td>\n",
       "            \n",
       "                <td style=\"background-color:rgb(168,247,182)\">\n",
       "                -0.05\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(164,253,185)\">\n",
       "                0.01\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(255,117,117)\">\n",
       "                1.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(171,241,180)\">\n",
       "                -0.09\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(184,223,170)\">\n",
       "                0.23\n",
       "                </td>\n",
       "                \n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>index</td>\n",
       "            \n",
       "                <td style=\"background-color:rgb(165,252,185)\">\n",
       "                0.02\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(164,253,186)\">\n",
       "                -0.01\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(171,241,180)\">\n",
       "                -0.09\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(255,117,117)\">\n",
       "                1.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(251,122,120)\">\n",
       "                -0.96\n",
       "                </td>\n",
       "                \n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>amplitude</td>\n",
       "            \n",
       "                <td style=\"background-color:rgb(166,249,184)\">\n",
       "                -0.03\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(163,253,186)\">\n",
       "                0.00\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(184,223,170)\">\n",
       "                0.23\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(251,122,120)\">\n",
       "                -0.96\n",
       "                </td>\n",
       "                \n",
       "                <td style=\"background-color:rgb(255,117,117)\">\n",
       "                1.00\n",
       "                </td>\n",
       "                \n",
       "            </tr>\n",
       "            </table>\n",
       "\n",
       "            <pre id=\"bHHzFDGYqj\" style=\"display:none;\">\n",
       "            <textarea rows=\"19\" cols=\"50\" onclick=\"this.select()\" readonly>%\\usepackage[table]{xcolor} % include this for color\n",
       "%\\usepackage{rotating} % include this for rotate header\n",
       "%\\documentclass[xcolor=table]{beamer} % for beamer\n",
       "\\begin{tabular}{|c|c|c|c|c|c|}\n",
       "\\hline\n",
       "\\rotatebox{90}{} & \\rotatebox{90}{$lon_{0}$} & \\rotatebox{90}{$lat_{0}$} & \\rotatebox{90}{$\\sigma$} & \\rotatebox{90}{index} & \\rotatebox{90}{amplitude}\\\\\n",
       "\\hline\n",
       "$lon_{0}$ & \\cellcolor[RGB]{255,117,117} 1.00 & \\cellcolor[RGB]{163,254,186} 0.00 & \\cellcolor[RGB]{168,247,182} -0.05 & \\cellcolor[RGB]{165,252,185} 0.02 & \\cellcolor[RGB]{166,249,184} -0.03\\\\\n",
       "\\hline\n",
       "$lat_{0}$ & \\cellcolor[RGB]{163,254,186} 0.00 & \\cellcolor[RGB]{255,117,117} 1.00 & \\cellcolor[RGB]{164,253,185} 0.01 & \\cellcolor[RGB]{164,253,186} -0.01 & \\cellcolor[RGB]{163,253,186} 0.00\\\\\n",
       "\\hline\n",
       "$\\sigma$ & \\cellcolor[RGB]{168,247,182} -0.05 & \\cellcolor[RGB]{164,253,185} 0.01 & \\cellcolor[RGB]{255,117,117} 1.00 & \\cellcolor[RGB]{171,241,180} -0.09 & \\cellcolor[RGB]{184,223,170} 0.23\\\\\n",
       "\\hline\n",
       "index & \\cellcolor[RGB]{165,252,185} 0.02 & \\cellcolor[RGB]{164,253,186} -0.01 & \\cellcolor[RGB]{171,241,180} -0.09 & \\cellcolor[RGB]{255,117,117} 1.00 & \\cellcolor[RGB]{251,122,120} -0.96\\\\\n",
       "\\hline\n",
       "amplitude & \\cellcolor[RGB]{166,249,184} -0.03 & \\cellcolor[RGB]{163,253,186} 0.00 & \\cellcolor[RGB]{184,223,170} 0.23 & \\cellcolor[RGB]{251,122,120} -0.96 & \\cellcolor[RGB]{255,117,117} 1.00\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check correlation between model parameters\n",
    "# As expected in this simple case,\n",
    "# spatial parameters are uncorrelated,\n",
    "# but the spectral model amplitude and index are correlated as always\n",
    "fit.minuit.print_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# You can use likelihood profiles to check if your model is\n",
    "# well constrained or not, and if the fit really converged\n",
    "fit.minuit.draw_profile('sigma');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
