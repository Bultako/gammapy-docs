{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/image_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[image_analysis.ipynb](../_static/notebooks/image_analysis.ipynb) |\n",
    "[image_analysis.py](../_static/notebooks/image_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fitting 2D images with Gammapy\n",
    "\n",
    "Gammapy does not have any special handling for 2D images, but treats them as a subset of maps. Thus, classical 2D image analysis can be done in 2 independent ways: \n",
    "\n",
    "1. Using the sherpa package, see: [image_fitting_with_sherpa.ipynb](image_fitting_with_sherpa.ipynb),\n",
    "\n",
    "2. Within gammapy, by assuming 2D analysis to be a sub-set of the generalised `maps`. Thus, analysis should proceed exactly as demonstrated in [analysis_3d.ipynb](analysis_3d.ipynb), taking care of a few things that we mention in this tutorial\n",
    "\n",
    "We consider 2D `images` to be a special case of 3D `maps`, ie, maps with only one energy bin. This is a major difference while analysing in `sherpa`, where the `maps` must not contain any energy axis. In this tutorial, we do a classical image analysis using three example observations of the Galactic center region with CTA - i.e., study the source flux and morphology.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "\n",
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord\n",
    "from astropy.convolution import Tophat2DKernel\n",
    "from regions import CircleSkyRegion\n",
    "\n",
    "from gammapy.detect import compute_lima_on_off_image\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.irf import make_mean_psf\n",
    "from gammapy.maps import Map, MapAxis, WcsGeom\n",
    "from gammapy.cube import (\n",
    "    MapDatasetMaker,\n",
    "    SafeMaskMaker,\n",
    "    PSFKernel,\n",
    "    MapDataset,\n",
    "    MapDatasetMaker,\n",
    "    MapDatasetOnOff,\n",
    "    RingBackgroundMaker,\n",
    ")\n",
    "from gammapy.modeling.models import (\n",
    "    SkyModel,\n",
    "    BackgroundModel,\n",
    "    PowerLaw2SpectralModel,\n",
    "    PointSpatialModel,\n",
    ")\n",
    "from gammapy.modeling import Fit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare modeling input data\n",
    "\n",
    "### The counts, exposure and the background maps\n",
    "This is the same drill - use `DataStore` object to access the CTA observations and retrieve a list of observations by passing the observations IDs to the `.get_observations()` method, then use `MapMaker` to make the maps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data store:\n",
      "HDU index table:\n",
      "BASE_DIR: /Users/deil/work/gammapy-tutorials/datasets/cta-1dc/index/gps\n",
      "Rows: 24\n",
      "OBS_ID: 110380 -- 111630\n",
      "HDU_TYPE: ['aeff', 'bkg', 'edisp', 'events', 'gti', 'psf']\n",
      "HDU_CLASS: ['aeff_2d', 'bkg_3d', 'edisp_2d', 'events', 'gti', 'psf_3gauss']\n",
      "\n",
      "\n",
      "Observation table:\n",
      "Observatory name: 'N/A'\n",
      "Number of observations: 4\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define which data to use and print some information\n",
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps/\")\n",
    "data_store.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$2 \\; \\mathrm{h}$$"
      ],
      "text/plain": [
       "<Quantity 2. h>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_store.obs_table[\"ONTIME\"].quantity.sum().to(\"hour\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select some observations from these dataset by hand\n",
    "obs_ids = [110380, 111140, 111159]\n",
    "observations = data_store.get_observations(obs_ids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "emin, emax = [0.1, 10] * u.TeV\n",
    "energy_axis = MapAxis.from_bounds(\n",
    "    emin.value, emax.value, 10, unit=\"TeV\", name=\"energy\", interp=\"log\"\n",
    ")\n",
    "geom = WcsGeom.create(\n",
    "    skydir=(0, 0),\n",
    "    binsz=0.02,\n",
    "    width=(10, 8),\n",
    "    coordsys=\"GAL\",\n",
    "    proj=\"CAR\",\n",
    "    axes=[energy_axis],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that even when doing a 2D analysis, it is better to use fine energy bins in the beginning and then sum them over. This is to ensure that the background shape can be approximated by a power law function in each energy bin. The `run_images()` can be used to compute maps in fine bins and then squash them to have one bin. This can be done by specifying `keep_dims = True`. This will compute a summed counts and background maps, and a spectral weighted exposure map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "stacked = MapDataset.create(geom)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Tried to get polar motions for times after IERS data is valid. Defaulting to polar motion from the 50-yr mean for those. This may affect precision at the 10s of arcsec level [astropy.coordinates.builtin_frames.utils]\n",
      "/Users/deil/work/code/gammapy-docs/build/dev/gammapy/gammapy/utils/interpolation.py:159: Warning: Interpolated values reached float32 precision limit\n",
      "  \"Interpolated values reached float32 precision limit\", Warning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7.93 s, sys: 1.22 s, total: 9.15 s\n",
      "Wall time: 9.17 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "maker = MapDatasetMaker(geom=geom, offset_max=4.0 * u.deg)\n",
    "maker_safe_mask = SafeMaskMaker(methods=[\"offset-max\"], offset_max=4.0 * u.deg)\n",
    "\n",
    "for obs in observations:\n",
    "    dataset = maker.run(obs)\n",
    "    dataset = maker_safe_mask.run(dataset, obs)\n",
    "    stacked.stack(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectrum = PowerLaw2SpectralModel(index=2)\n",
    "dataset_2d = stacked.to_image(spectrum=spectrum)\n",
    "\n",
    "maps2D = {\n",
    "    \"counts\": dataset_2d.counts,\n",
    "    \"exposure\": dataset_2d.exposure,\n",
    "    \"background\": dataset_2d.background_model.map,\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For a typical 2D analysis, using an energy dispersion usually does not make sense. A PSF map can be made as in the regular 3D case, taking care to weight it properly with the spectrum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mean PSF\n",
    "geom2d = maps2D[\"exposure\"].geom\n",
    "src_pos = SkyCoord(0, 0, unit=\"deg\", frame=\"galactic\")\n",
    "table_psf = make_mean_psf(observations, src_pos)\n",
    "\n",
    "table_psf_2d = table_psf.table_psf_in_energy_band(\n",
    "    (emin, emax), spectrum=spectrum\n",
    ")\n",
    "\n",
    "# PSF kernel used for the model convolution\n",
    "psf_kernel = PSFKernel.from_table_psf(\n",
    "    table_psf_2d, geom2d, max_radius=\"0.3 deg\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, the analysis proceeds as usual. Just take care to use the proper geometry in this case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define a mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "region = CircleSkyRegion(center=src_pos, radius=0.6 * u.deg)\n",
    "mask = Map.from_geom(geom2d, data=geom2d.region_mask([region]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling the source\n",
    "\n",
    "This is the important thing to note in this analysis. Since modeling and fitting in `~gammapy.maps` needs to have a combination of spectral models, we have to use a dummy Powerlaw as for the spectral model and fix its index to 2. Since we are interested only in the integral flux, we will use the `PowerLaw2SpectralModel` model which directly fits an integral flux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "spatial_model = PointSpatialModel(\n",
    "    lon_0=\"0.01 deg\", lat_0=\"0.01 deg\", frame=\"galactic\"\n",
    ")\n",
    "spectral_model = PowerLaw2SpectralModel(\n",
    "    emin=emin, emax=emax, index=2.0, amplitude=\"3e-12 cm-2 s-1\"\n",
    ")\n",
    "model = SkyModel(spatial_model=spatial_model, spectral_model=spectral_model)\n",
    "model.parameters[\"index\"].frozen = True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling the background\n",
    "\n",
    "Gammapy fitting framework assumes the background to be an integrated model.\n",
    "Thus, we will define the background as a model, and freeze its parameters for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "background_model = BackgroundModel(maps2D[\"background\"])\n",
    "background_model.parameters[\"norm\"].frozen = True\n",
    "background_model.parameters[\"tilt\"].frozen = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = MapDataset(\n",
    "    model=model,\n",
    "    counts=maps2D[\"counts\"],\n",
    "    exposure=maps2D[\"exposure\"],\n",
    "    background_model=background_model,\n",
    "    mask_fit=mask,\n",
    "    psf=psf_kernel,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.08 s, sys: 12.4 ms, total: 1.09 s\n",
      "Wall time: 1.1 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fit = Fit([dataset])\n",
    "result = fit.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see the actual best-fit parameters, do a print on the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SkyModel\n",
      "\n",
      "   name     value    error   unit      min        max    frozen\n",
      "--------- ---------- ----- -------- ---------- --------- ------\n",
      "    lon_0 -5.364e-02   nan      deg        nan       nan  False\n",
      "    lat_0 -5.058e-02   nan      deg -9.000e+01 9.000e+01  False\n",
      "amplitude  4.292e-11   nan cm-2 s-1        nan       nan  False\n",
      "    index  2.000e+00   nan                 nan       nan   True\n",
      "     emin  1.000e-01   nan      TeV        nan       nan   True\n",
      "     emax  1.000e+01   nan      TeV        nan       nan   True\n"
     ]
    }
   ],
   "source": [
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=9</i>\n",
       "<table id=\"table5028112928\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>name</th><th>value</th><th>error</th><th>unit</th><th>min</th><th>max</th><th>frozen</th></tr></thead>\n",
       "<thead><tr><th>str9</th><th>float64</th><th>float64</th><th>str8</th><th>float64</th><th>float64</th><th>bool</th></tr></thead>\n",
       "<tr><td>lon_0</td><td>-5.364e-02</td><td>3.237e-03</td><td>deg</td><td>nan</td><td>nan</td><td>False</td></tr>\n",
       "<tr><td>lat_0</td><td>-5.058e-02</td><td>3.355e-03</td><td>deg</td><td>-9.000e+01</td><td>9.000e+01</td><td>False</td></tr>\n",
       "<tr><td>amplitude</td><td>4.292e-11</td><td>1.798e-12</td><td>cm-2 s-1</td><td>nan</td><td>nan</td><td>False</td></tr>\n",
       "<tr><td>index</td><td>2.000e+00</td><td>0.000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td></tr>\n",
       "<tr><td>emin</td><td>1.000e-01</td><td>0.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td></tr>\n",
       "<tr><td>emax</td><td>1.000e+01</td><td>0.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td></tr>\n",
       "<tr><td>norm</td><td>1.000e+00</td><td>0.000e+00</td><td></td><td>0.000e+00</td><td>nan</td><td>True</td></tr>\n",
       "<tr><td>tilt</td><td>0.000e+00</td><td>0.000e+00</td><td></td><td>nan</td><td>nan</td><td>True</td></tr>\n",
       "<tr><td>reference</td><td>1.000e+00</td><td>0.000e+00</td><td>TeV</td><td>nan</td><td>nan</td><td>True</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=9>\n",
       "   name     value      error     unit      min        max    frozen\n",
       "   str9    float64    float64    str8    float64    float64   bool \n",
       "--------- ---------- --------- -------- ---------- --------- ------\n",
       "    lon_0 -5.364e-02 3.237e-03      deg        nan       nan  False\n",
       "    lat_0 -5.058e-02 3.355e-03      deg -9.000e+01 9.000e+01  False\n",
       "amplitude  4.292e-11 1.798e-12 cm-2 s-1        nan       nan  False\n",
       "    index  2.000e+00 0.000e+00                 nan       nan   True\n",
       "     emin  1.000e-01 0.000e+00      TeV        nan       nan   True\n",
       "     emax  1.000e+01 0.000e+00      TeV        nan       nan   True\n",
       "     norm  1.000e+00 0.000e+00           0.000e+00       nan   True\n",
       "     tilt  0.000e+00 0.000e+00                 nan       nan   True\n",
       "reference  1.000e+00 0.000e+00      TeV        nan       nan   True"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.to_table()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/deil/work/code/gammapy-docs/build/dev/gammapy/gammapy/modeling/parameter.py:511: RuntimeWarning: invalid value encountered in true_divide\n",
      "  return self.covariance / np.outer(err, err)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[ 1.        , -0.00390349, -0.04426207,         nan],\n",
       "       [-0.00390349,  1.        , -0.05877198,         nan],\n",
       "       [-0.04426207, -0.05877198,  1.        ,         nan],\n",
       "       [        nan,         nan,         nan,         nan]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.parameters.correlation[:4, :4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classical Ring Background Analysis\n",
    "\n",
    "No we repeat the same analysis but using a classical ring background estimation. We define an exclusion mask and then use the `~gammapy.cube.RingBackgroundMaker`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "geom_image = geom.to_image().to_cube([energy_axis.squash()])\n",
    "\n",
    "regions = CircleSkyRegion(center=spatial_model.position, radius=0.3 * u.deg)\n",
    "\n",
    "exclusion_mask = Map.from_geom(geom_image)\n",
    "exclusion_mask.data = geom_image.region_mask([regions], inside=False)\n",
    "exclusion_mask.sum_over_axes().plot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "ring_maker = RingBackgroundMaker(\n",
    "    r_in=\"0.3 deg\", width=\"0.3 deg\", exclusion_mask=exclusion_mask\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Tried to get polar motions for times after IERS data is valid. Defaulting to polar motion from the 50-yr mean for those. This may affect precision at the 10s of arcsec level [astropy.coordinates.builtin_frames.utils]\n",
      "/Users/deil/work/code/gammapy-docs/build/dev/gammapy/gammapy/utils/interpolation.py:159: Warning: Interpolated values reached float32 precision limit\n",
      "  \"Interpolated values reached float32 precision limit\", Warning\n",
      "/Users/deil/work/code/astropy/astropy/units/quantity.py:481: RuntimeWarning: invalid value encountered in true_divide\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 7.15 s, sys: 1.16 s, total: 8.31 s\n",
      "Wall time: 8.32 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "stacked_on_off = MapDatasetOnOff.create(geom=geom_image)\n",
    "\n",
    "for obs in observations:\n",
    "    dataset = maker.run(obs)\n",
    "    dataset = maker_safe_mask.run(dataset, obs)\n",
    "    dataset_image = dataset.to_image()\n",
    "    dataset_on_off = ring_maker.run(dataset_image)\n",
    "    stacked_on_off.stack(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the estimate of the ring background we compute a Li&Ma significance image: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "scale = geom.pixel_scales[0].to(\"deg\")\n",
    "# Using a convolution radius of 0.05 degrees\n",
    "theta = 0.1 * u.deg / scale\n",
    "tophat = Tophat2DKernel(theta)\n",
    "tophat.normalize(\"peak\")\n",
    "\n",
    "lima_maps = compute_lima_on_off_image(\n",
    "    stacked_on_off.counts,\n",
    "    stacked_on_off.counts_off,\n",
    "    stacked_on_off.acceptance,\n",
    "    stacked_on_off.acceptance_off,\n",
    "    tophat,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "significance_map = lima_maps[\"significance\"]\n",
    "excess_map = lima_maps[\"excess\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That is what the excess and significance look like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<Figure size 720x720 with 4 Axes>,\n",
       " <matplotlib.axes._subplots.WCSAxesSubplot at 0x1263001d0>,\n",
       " <matplotlib.colorbar.Colorbar at 0x12822b160>)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "ax1 = plt.subplot(221, projection=significance_map.geom.wcs)\n",
    "ax2 = plt.subplot(222, projection=excess_map.geom.wcs)\n",
    "\n",
    "ax1.set_title(\"Significance map\")\n",
    "significance_map.get_image_by_idx((0,)).plot(ax=ax1, add_cbar=True)\n",
    "\n",
    "ax2.set_title(\"Excess map\")\n",
    "significance_map.get_image_by_idx((0,)).plot(ax=ax2, add_cbar=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally we take a look at the signficance distribution outside the exclusion region:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a 2D mask for the images\n",
    "significance_map_off = significance_map * exclusion_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fit results: mu = -0.04, std = 1.15\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "significance_all = significance_map.data[np.isfinite(significance_map.data)]\n",
    "significance_off = significance_map_off.data[\n",
    "    np.isfinite(significance_map_off.data)\n",
    "]\n",
    "\n",
    "plt.hist(\n",
    "    significance_all,\n",
    "    density=True,\n",
    "    alpha=0.5,\n",
    "    color=\"red\",\n",
    "    label=\"all bins\",\n",
    "    bins=21,\n",
    ")\n",
    "\n",
    "plt.hist(\n",
    "    significance_off,\n",
    "    density=True,\n",
    "    alpha=0.5,\n",
    "    color=\"blue\",\n",
    "    label=\"off bins\",\n",
    "    bins=21,\n",
    ")\n",
    "\n",
    "# Now, fit the off distribution with a Gaussian\n",
    "mu, std = norm.fit(significance_off)\n",
    "x = np.linspace(-8, 8, 50)\n",
    "p = norm.pdf(x, mu, std)\n",
    "plt.plot(x, p, lw=2, color=\"black\")\n",
    "plt.legend()\n",
    "plt.xlabel(\"Significance\")\n",
    "plt.yscale(\"log\")\n",
    "plt.ylim(1e-5, 1)\n",
    "xmin, xmax = np.min(significance_all), np.max(significance_all)\n",
    "plt.xlim(xmin, xmax)\n",
    "\n",
    "print(f\"Fit results: mu = {mu:.2f}, std = {std:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "1. Update the exclusion mask in the ring background example by thresholding the significance map and re-run the background estimator \n",
    "1. Plot residual maps as done in the [analysis_3d](analysis_3d.ipynb) notebook\n",
    "1. Iteratively add and fit sources as explained in [image_fitting_with_sherpa](image_fitting_with_sherpa.ipynb) notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
