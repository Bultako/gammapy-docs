{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.cube import SafeMaskMaker\n",
    "from gammapy.maps import Map, WcsGeom\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.modeling.models import PowerLawSpectralModel\n",
    "from gammapy.modeling import Fit, Datasets\n",
    "from gammapy.spectrum import (\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    "    FluxPointsEstimator,\n",
    "    FluxPointsDataset,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 101430\n",
      "- Median energy: 0.1 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 843\n",
      "- Median energy: 0.107 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The truth value of a Quantity is ambiguous. In the future this will raise a ValueError. [astropy.units.quantity]\n",
      "/Users/deil/work/code/gammapy-docs/build/dev/gammapy/gammapy/utils/interpolation.py:159: Warning: Interpolated values reached float32 precision limit\n",
      "  \"Interpolated values reached float32 precision limit\", Warning\n",
      "No thresholds defined for obs Info for OBS_ID = 111630\n",
      "- Start time: 59300.83\n",
      "- Pointing pos: RA 130.89 deg / Dec -44.63 deg\n",
      "- Observation duration: 1800.0 s\n",
      "- Dead-time fraction: 2.000 %\n",
      "\n"
     ]
    }
   ],
   "source": [
    "e_true = np.logspace(-2.5, 1, 100) * u.TeV\n",
    "e_reco = np.logspace(-2, 1, 30) * u.TeV\n",
    "\n",
    "dataset_maker = SpectrumDatasetMaker(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 98\n",
      "\ttotal stat : 5.69\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.model = model\n",
    "    dataset.mask_fit = dataset.counts.energy_mask(emin=emin_fit, emax=emax_fit)\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "model.parameters.covariance = joint_result.parameters.covariance\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.model = model\n",
    "\n",
    "fpe = FluxPointsEstimator(datasets=[dataset], e_edges=e_edges)\n",
    "\n",
    "flux_points = fpe.run()\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, model=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1211ea400>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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1q0b11xzDS+++CJ33XWXx3vz8/MZNGgQjz32GPfeey+vvPIKDz74IOPGjWPMmDFMnGhsAjtnzhyys7MJCgry65vIZn3H75jj79y5Mzt27OC7775j+vTp9O/fH8psLPrPPO6/40a++PB1SvZuhoNb4OguOHkQik6AzerrH0EIIRrV3twC1mUf42SR8ftvXfYx1mUfO+1hf8dQ/+bNm2vd6TvMmjWLVatWsWHDBu69995KX9OhQwfnNrZXX301X375Jb/88gudOnVy1ri/9tprWbNmTYX3BgYGOnMNHNv1ViYlJYWrrrqKt99+G4vFf++b/bfldaSUIi0tjbS0NONEbi6FBYWsW7eOFStX0KpVKy4YfgEXX3wxAwemud5oDjRGAwLDXKMDpqo3exBCCH9U/k5+8kvfsC77GDlzRjfK51ssFsrKypyPi4pc0wzHjh3j1KlTlJaWUlRU5LENr0P57W2VUtVuh+vOfWtds9ns3E63vI8//pg1a9awePFi/vrXv/LTTz/5ZQDQrO/4a3LNNVNYvmI5z819jmHDhvHZZ58xf/585/M7d+2irLQYivLgxD44uhMO/gCHt0Lubjh1BEryUbqsQZNghBCipUlOTub7778H4Pvvvyc7O9v53E033cRf//pXrrrqKu67775K3//bb7/xzTfGtERWVhbnnXce3bt3Jycnx7m97VtvvcXQoUNr3abw8HBOnjwJQFlZGXv27GH48OE8+eST5OXlObfs9Tf+F6rUgWOOv0uXLlW+JsBi4ZxzBnPOOYMpvr+EY0ePAXD02DEyMzJp07YNI0eMJH1UOmd2OxOlAGuRcRQar0227uLI8SLI6woBjpGBEFCV7UckhBD+ISEquNE+6/LLL+fNN9+kb9++pKWlOYfn33zzTSwWC1deeSU2m41zzjmHzz77jAsuuMDj/T169OCNN97g5ptvpmvXrtxyyy0EBwczf/58Jk2ahNVqJS0tjWnTar+/W0ZGBlOnTmXu3LksWLCAG264gePHj6O15u677yYqKqpB/wwai9e35W0KYpJ66BH3z/M4F2c9SCt9ssr32EqLObxtIwd/XsfRX39CaxthMfH0HH09UR26erw2+/d88out9Epw1QvQKEpUEMUqmGL711J1esmD9U2qEUK0bPXZlteR1OcPv3dycnIYM2ZMhWz/lqSpb8vrF8wBQbTrfQ7t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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "ax_spectrum, ax_residual = flux_points_dataset.peek()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residual.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
