{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**This is a fixed-text formatted version of a Jupyter notebook**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-webpage/master?urlpath=lab/tree/pulsar_analysis.ipynb)\n",
    "- You can contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy/tree/master/tutorials).\n",
    "- **Source files:**\n",
    "[pulsar_analysis.ipynb](../_static/notebooks/pulsar_analysis.ipynb) |\n",
    "[pulsar_analysis.py](../_static/notebooks/pulsar_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pulsar analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook shows how to do a pulsar analysis with Gammapy. It's based on a Vela simulation file from the CTA DC1, which already contains a column of phases. We will produce a phasogram, a phase-resolved map and a phase-resolved spectrum of the Vela pulsar using the class PhaseBackgroundEstimator. \n",
    "\n",
    "The phasing in itself is not done here, and it requires specific packages like Tempo2 or [PINT](https://nanograv-pint.readthedocs.io)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Opening the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first do the imports and load the only observation containing Vela in the CTA 1DC dataset shipped with Gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.utils.regions import SphericalCircleSkyRegion\n",
    "from astropy.coordinates import SkyCoord\n",
    "import astropy.units as u\n",
    "\n",
    "from gammapy.cube import SafeMaskMaker\n",
    "from gammapy.maps import Map, WcsGeom\n",
    "from gammapy.data import DataStore\n",
    "from gammapy.modeling.models import PowerLawSpectralModel\n",
    "from gammapy.modeling import Fit, Datasets\n",
    "from gammapy.spectrum import (\n",
    "    PhaseBackgroundMaker,\n",
    "    SpectrumDatasetMaker,\n",
    "    FluxPointsEstimator,\n",
    "    FluxPointsDataset,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data store (which is a subset of CTA-DC1 data):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_store = DataStore.from_dir(\"$GAMMAPY_DATA/cta-1dc/index/gps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define obsevation ID and print events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 101430\n",
      "- Median energy: 0.1 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "id_obs_vela = [111630]\n",
    "obs_list_vela = data_store.get_observations(id_obs_vela)\n",
    "print(obs_list_vela[0].events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our observation, let's select the events in 0.2Â° radius around the pulsar position."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EventList info:\n",
      "- Number of events: 843\n",
      "- Median energy: 0.107 TeV\n",
      "- OBS_ID = 111630\n"
     ]
    }
   ],
   "source": [
    "pos_target = SkyCoord(ra=128.836 * u.deg, dec=-45.176 * u.deg, frame=\"icrs\")\n",
    "on_radius = 0.2 * u.deg\n",
    "on_region = SphericalCircleSkyRegion(pos_target, on_radius)\n",
    "\n",
    "# Apply angular selection\n",
    "events_vela = obs_list_vela[0].events.select_region(on_region)\n",
    "print(events_vela)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load the phases of the selected events in a dedicated array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "&lt;Column name=&apos;PHASE&apos; dtype=&apos;float32&apos; length=10&gt;\n",
       "<table>\n",
       "<tr><td>0.81847286</td></tr>\n",
       "<tr><td>0.45646095</td></tr>\n",
       "<tr><td>0.111507416</td></tr>\n",
       "<tr><td>0.43416595</td></tr>\n",
       "<tr><td>0.76837444</td></tr>\n",
       "<tr><td>0.3639946</td></tr>\n",
       "<tr><td>0.58693695</td></tr>\n",
       "<tr><td>0.51095676</td></tr>\n",
       "<tr><td>0.5606985</td></tr>\n",
       "<tr><td>0.2505703</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Column name='PHASE' dtype='float32' length=10>\n",
       " 0.81847286\n",
       " 0.45646095\n",
       "0.111507416\n",
       " 0.43416595\n",
       " 0.76837444\n",
       "  0.3639946\n",
       " 0.58693695\n",
       " 0.51095676\n",
       "  0.5606985\n",
       "  0.2505703"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phases = events_vela.table[\"PHASE\"]\n",
    "\n",
    "# Let's take a look at the first 10 phases\n",
    "phases[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phasogram"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the phases, we can make a phasogram. A phasogram is a histogram of phases and it works exactly like any other histogram (you can set the binning, evaluate the errors based on the counts in each bin, etc)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "nbins = 30\n",
    "phase_min, phase_max = (0, 1)\n",
    "values, bin_edges = np.histogram(\n",
    "    phases, range=(phase_min, phase_max), bins=nbins\n",
    ")\n",
    "bin_width = (phase_max - phase_min) / nbins\n",
    "\n",
    "bin_center = (bin_edges[:-1] + bin_edges[1:]) / 2\n",
    "\n",
    "\n",
    "# Poissonian uncertainty on each bin\n",
    "values_err = np.sqrt(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "plt.xlim(0, 1)\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add some fancy additions to our phasogram: a patch on the ON- and OFF-phase regions and one for the background level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Off events: 234\n"
     ]
    }
   ],
   "source": [
    "# Evaluate background level\n",
    "off_phase_range = (0.7, 1.0)\n",
    "on_phase_range = (0.5, 0.6)\n",
    "\n",
    "mask_off = (off_phase_range[0] < phases) & (phases < off_phase_range[1])\n",
    "\n",
    "count_bkg = mask_off.sum()\n",
    "print(f\"Number of Off events: {count_bkg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# bkg level normalized by the size of the OFF zone (0.3)\n",
    "bkg = count_bkg / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    "\n",
    "# error on the background estimation\n",
    "bkg_err = (\n",
    "    np.sqrt(count_bkg) / nbins / (off_phase_range[1] - off_phase_range[0])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's redo the same plot for the basis\n",
    "plt.bar(\n",
    "    x=bin_center,\n",
    "    height=values,\n",
    "    width=bin_width,\n",
    "    color=\"#d53d12\",\n",
    "    alpha=0.8,\n",
    "    edgecolor=\"black\",\n",
    "    yerr=values_err,\n",
    ")\n",
    "\n",
    "# Plot background level\n",
    "x_bkg = np.linspace(0, 1, 50)\n",
    "\n",
    "kwargs = {\"color\": \"black\", \"alpha\": 0.5, \"ls\": \"--\", \"lw\": 2}\n",
    "\n",
    "plt.plot(x_bkg, (bkg - bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "plt.plot(x_bkg, (bkg + bkg_err) * np.ones_like(x_bkg), **kwargs)\n",
    "\n",
    "plt.fill_between(\n",
    "    x_bkg, bkg - bkg_err, bkg + bkg_err, facecolor=\"grey\", alpha=0.5\n",
    ")  # grey area for the background level\n",
    "\n",
    "# Let's make patches for the on and off phase zones\n",
    "on_patch = plt.axvspan(\n",
    "    on_phase_range[0], on_phase_range[1], alpha=0.3, color=\"gray\", ec=\"black\"\n",
    ")\n",
    "\n",
    "off_patch = plt.axvspan(\n",
    "    off_phase_range[0],\n",
    "    off_phase_range[1],\n",
    "    alpha=0.4,\n",
    "    color=\"white\",\n",
    "    hatch=\"x\",\n",
    "    ec=\"black\",\n",
    ")\n",
    "\n",
    "# Legends \"ON\" and \"OFF\"\n",
    "plt.text(0.55, 5, \"ON\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.text(0.895, 5, \"OFF\", color=\"black\", fontsize=17, ha=\"center\")\n",
    "plt.xlabel(\"Phase\")\n",
    "plt.ylabel(\"Counts\")\n",
    "plt.xlim(0, 1)\n",
    "plt.title(f\"Phasogram with angular cut of {on_radius}\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the phases are computed, we want to do a phase-resolved sky map : a map of the ON-phase events minus alpha times the OFF-phase events. Alpha is the ratio between the size of the ON-phase zone (here 0.1) and the OFF-phase zone (0.3).\n",
    "It's a map of the excess events in phase, which are the pulsed events."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = WcsGeom.create(binsz=0.02 * u.deg, skydir=pos_target, width=\"5 deg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's create an ON-map and an OFF-map:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "on_map = Map.from_geom(geom)\n",
    "off_map = Map.from_geom(geom)\n",
    "\n",
    "events_vela_on = events_vela.select_parameter(\"PHASE\", on_phase_range)\n",
    "events_vela_off = events_vela.select_parameter(\"PHASE\", off_phase_range)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "on_map.fill_events(events_vela_on)\n",
    "off_map.fill_events(events_vela_off)\n",
    "\n",
    "# Defining alpha as the ratio of the ON and OFF phase zones\n",
    "alpha = (on_phase_range[1] - on_phase_range[0]) / (\n",
    "    off_phase_range[1] - off_phase_range[0]\n",
    ")\n",
    "\n",
    "# Create and fill excess map\n",
    "# The pulsed events are the difference between the ON-phase count and alpha times the OFF-phase count\n",
    "excess_map = on_map - off_map * alpha\n",
    "\n",
    "# Plot excess map\n",
    "excess_map.smooth(kernel=\"gauss\", width=0.2 * u.deg).plot(add_cbar=True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Phase-resolved spectrum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do a phase-resolved spectrum. In order to do that, there is the class PhaseBackgroundMaker. In a phase-resolved analysis, the background is estimated in the same sky region but in the OFF-phase zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: AstropyDeprecationWarning: The truth value of a Quantity is ambiguous. In the future this will raise a ValueError. [astropy.units.quantity]\n",
      "/Users/deil/work/code/gammapy-docs/build/dev/gammapy/gammapy/utils/interpolation.py:159: Warning: Interpolated values reached float32 precision limit\n",
      "  \"Interpolated values reached float32 precision limit\", Warning\n",
      "No thresholds defined for obs Info for OBS_ID = 111630\n",
      "- Start time: 59300.83\n",
      "- Pointing pos: RA 130.89 deg / Dec -44.63 deg\n",
      "- Observation duration: 1800.0 s\n",
      "- Dead-time fraction: 2.000 %\n",
      "\n"
     ]
    }
   ],
   "source": [
    "e_true = np.logspace(-2.5, 1, 100) * u.TeV\n",
    "e_reco = np.logspace(-2, 1, 30) * u.TeV\n",
    "\n",
    "dataset_maker = SpectrumDatasetMaker(\n",
    "    e_reco=e_reco, e_true=e_true, region=on_region\n",
    ")\n",
    "phase_bkg_maker = PhaseBackgroundMaker(\n",
    "    on_phase=on_phase_range, off_phase=off_phase_range\n",
    ")\n",
    "safe_mask_maker = SafeMaskMaker(\n",
    "    methods=[\"aeff-default\", \"edisp-bias\"], bias_percent=20\n",
    ")\n",
    "\n",
    "datasets = []\n",
    "\n",
    "for obs in obs_list_vela:\n",
    "    dataset = dataset_maker.run(obs)\n",
    "    dataset_on_off = phase_bkg_maker.run(dataset, obs)\n",
    "    dataset_on_off = safe_mask_maker.run(dataset_on_off, obs)\n",
    "    datasets.append(dataset_on_off)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's a look at the datasets we just created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "datasets[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll fit a model to the spectrum with the `Fit` class. First we load a power law model with an initial value for the index and the amplitude and then wo do a likelihood fit. The fit results are printed below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OptimizeResult\n",
      "\n",
      "\tbackend    : minuit\n",
      "\tmethod     : minuit\n",
      "\tsuccess    : True\n",
      "\tmessage    : Optimization terminated successfully.\n",
      "\tnfev       : 98\n",
      "\ttotal stat : 5.69\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = PowerLawSpectralModel(\n",
    "    index=4, amplitude=\"1.3e-9 cm-2 s-1 TeV-1\", reference=\"0.02 TeV\"\n",
    ")\n",
    "\n",
    "emin_fit, emax_fit = (0.04 * u.TeV, 0.4 * u.TeV)\n",
    "\n",
    "for dataset in datasets:\n",
    "    dataset.model = model\n",
    "    dataset.mask_fit = dataset.counts.energy_mask(emin=emin_fit, emax=emax_fit)\n",
    "\n",
    "joint_fit = Fit(datasets)\n",
    "joint_result = joint_fit.run()\n",
    "\n",
    "model.parameters.covariance = joint_result.parameters.covariance\n",
    "print(joint_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you might want to do the stacking here even if in our case there is only one observation which makes it superfluous.\n",
    "We can compute flux points by fitting the norm of the global model in energy bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_edges = np.logspace(np.log10(0.04), np.log10(0.4), 7) * u.TeV\n",
    "\n",
    "dataset = Datasets(datasets).stack_reduce()\n",
    "\n",
    "dataset.model = model\n",
    "\n",
    "fpe = FluxPointsEstimator(datasets=[dataset], e_edges=e_edges)\n",
    "\n",
    "flux_points = fpe.run()\n",
    "flux_points.table[\"is_ul\"] = flux_points.table[\"ts\"] < 1\n",
    "\n",
    "amplitude_ref = 0.57 * 19.4e-14 * u.Unit(\"1 / (cm2 s MeV)\")\n",
    "spec_model_true = PowerLawSpectralModel(\n",
    "    index=4.5, amplitude=amplitude_ref, reference=\"20 GeV\"\n",
    ")\n",
    "\n",
    "flux_points_dataset = FluxPointsDataset(data=flux_points, model=model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x124e07b00>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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nj1cccUV/O1vfyM3N5dbbrmFlJQUevbsyX/+8x/A2FZ3woQJjBkzhpEjR1Z4vaysLDp37sxtt93GBRdcwMiRI8nPzwdg165dXHLJJXTv3p1evXqxe/fuCq9TWpMmTXjwwQfp3bs3l1xyCevXr2fo0KG0a9eOhQsXAlBQUMDNN99Mt27d6Nmzp7PiYH5+PmlpaSQnJzNx4kRne8DY5GfAgAH06tWLCRMmOEsa1wqtdYM/evfurYUQorH6+eefPR4PGTKkzPHKK69orbXOzc0t9/m5c+dqrbU+fvx4meeqIywsTGuttdVq1ePHj9eff/651lrrZcuW6dtuu02XlJRom82mL7/8cv31119rrbVOTEzUx48f11prPXPmTP3+++9rrbXOycnRHTp00GfOnNFz587V8fHx+sSJE5Veb+/evdpsNuvNmzdrrbWeMGGC83p9+/bVn3zyidZa6/z8fJ2bm1tpu9wBesmSJVprrceOHatHjBihi4qK9JYtW3T37t211lo///zz+qabbtJaa71t2zbdunVrnZ+fr1944QV98803a621/t///qfNZrP+/vvv9fHjx/VFF12kz5w5o7XWevbs2frxxx93/t19//33ZdpR+u/Y3rYNupw+sd7X6ldKtQMeBiK01uMrOieEEKL+ctTqz8rKonfv3owYMQLAY1tegDNnzrBz504GDx7s8f7ly5ezcOFCnn/+ecC4i/71118BGDFiBNHR0ZVer02bNrRt29a5X0Dv3r3Jysri9OnTHDx4kKuuugqA4ODgs2pXYGAgo0aNAoxtfIOCgggICHBu6Quwdu1apk+fDkCnTp1ITExkx44drF69mrvvvhuA5ORkkpOTAfjuu+/4+eefufDCCwEoKipy7mVQG7za8Sul3gZGA8e01l3dzo8C/g6YgTe11hXuE6m13gPcqpSaX9k5IYQQ1fPVV19V+FxoaGilz8fGxlb6fEUcc/ynTp1i9OjRvPLKK9x9992VbsvrTmvNxx9/zPnnn+9xft26dYSFhXm8rrzrZWVleWy/azabyc/PR1ewX0112xUQEODcmreiLX0r+gyg3G19tdaMGDGCjIyMSj+7prw9x/8OMMr9hFLKDLwCXAp0AdKVUl2UUt2UUotLHXFebp8QQog6FBERwZw5c3j++ecpLi6ucFve0lJTU3n55ZednejmzZvLvX51r+fQ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c4QQQpwDrTVaa0wmE08++SSzZs0iNDSUMWPGkJ6ezqhRowgKCvJ1M+sNpdRGrXWZ6rZVZfU/4Pb9hFLP/aX2mucdWutFWuspERERvm6KEEKIc6SUcm4e9PDDD/P1118zadIkVq5cydixY2nXrh1Wq9XHraz/qkru26S1UfXH/fvyHtdnktwnhBANV3FxMatWrWLPnj3ceeedAIwaNYr27duTlpbGwIEDnQFDY1KjO348i+2UrqxQ7ystyHI+IYRo+AICAhg1apSz0y8oKCA8PJy33nqLiy66iKSkJGbMmMH27dt93NL6oaqOX1fwfXmP6x0Z6hdCiMYnODiYjz76iGPHjvH++++TnJzMSy+9xLfffgtAdnZ2ow4CqhrqtwG5GHf3IUCe4ykg+P/bu/coy8ryzuPfXzcwzc0bF21b6AYkLT26EOwBEYgNKiFIIChIGXSQi728gpnMJLDAkYwEZMJkieINEAgZRZCIt6hoDBRq0DQdWsNFooONtC3XIALSNJdn/jinsLqs6lvVrlN19vezVq06+3Le96ndffZz3r3f/b5VtWnjEU4AL/VLUrs98MADbL755myxxRZ85CMf4eSTT+blL385AwMDDAwMPDOMcD/ZqEv9VTWzqp5VVVtX1Sbd10PL0yLpS5K0zTbbsMUWWwDwpje9iQ9/+MPMmjWLU045hXnz5rH//vuzevXqHkc5OdrX20GS1GoveMELOPnkk7nhhhu44447OOuss1iwYAGbbdYZs+7000/noosu4sEHH+xxpM3wOX5JkrqeeOIJdt99d2677bZnOg0ODAxw2GGHsdVW6xywdkrZ2F7905qd+yRJG2LTTTfllltuYcmSJZx00kncdNNNHHPMMZx//vkArF69mscff7zHUY5PXyd+SZI2VBIWLlzIueeey5133sn111/PscceC8AXv/hFnv/853PcccdxzTXXTMsBg0z8kiSNYcaMGey///7Mnj0bgBe/+MUcccQRfOELX+Dggw/mhS98Ie9617t47LHHehzp+jPxS5K0nvbcc08uueQS7rnnHq6++moOOOAAvv/97zNr1iwArrjiCpYuXcpU7j9n5z5Jksbh6aefZsaMGTz11FPMnj2b++67j1133ZWBgQHe/OY3s9tuu/UkLjv3SZLUgKF5AGbOnMmPf/xjLrzwQnbYYQfOPPNMFixYwFlnTa05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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "ax_spectrum, ax_residual = flux_points_dataset.peek()\n",
    "\n",
    "ax_spectrum.set_ylim([1e-14, 3e-11])\n",
    "ax_residual.set_ylim([-1.7, 1.7])\n",
    "\n",
    "spec_model_true.plot(\n",
    "    ax=ax_spectrum,\n",
    "    energy_range=(emin_fit, emax_fit),\n",
    "    label=\"Reference model\",\n",
    "    c=\"black\",\n",
    "    linestyle=\"dashed\",\n",
    "    energy_power=2,\n",
    ")\n",
    "\n",
    "ax_spectrum.legend(loc=\"best\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial suffers a bit from the lack of statistics: there were 9 Vela observations in the CTA DC1 while there is only one here. When done on the 9 observations, the spectral analysis is much better agreement between the input model and the gammapy fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
