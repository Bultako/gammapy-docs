{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-extra/master?urlpath=lab)\n",
    " and then double-click on **spectrum_analysis.ipynb** file.\n",
    "- You can also contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy-extra/tree/master/notebooks).\n",
    "- **Source files:**\n",
    "[spectrum_analysis.ipynb](../_static/notebooks/spectrum_analysis.ipynb) |\n",
    "[spectrum_analysis.py](../_static/notebooks/spectrum_analysis.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spectral analysis with Gammapy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains in detail how to use the classes in [gammapy.spectrum](..\/spectrum/index.rst) and related ones. Note, that there is also [spectrum_pipe.ipynb](spectrum_pipe.ipynb) which explains how to do the analysis using a high-level interface. This notebook is aimed at advanced users who want to script taylor-made analysis pipelines and implement new methods.\n",
    "\n",
    "Based on a datasets of 4 Crab observations with H.E.S.S. (simulated events for now) we will perform a full region based spectral analysis, i.e. extracting source and background counts from certain \n",
    "regions, and fitting them using the forward-folding approach. We will use the following classes\n",
    "\n",
    "Data handling:\n",
    "\n",
    "* [gammapy.data.DataStore](..\/api/gammapy.data.DataStore.rst)\n",
    "* [gammapy.data.DataStoreObservation](..\/api/gammapy.data.DataStoreObservation.rst)\n",
    "* [gammapy.data.ObservationStats](..\/api/gammapy.data.ObservationStats.rst)\n",
    "* [gammapy.data.ObservationSummary](..\/api/gammapy.data.ObservationSummary.rst)\n",
    "\n",
    "To extract the 1-dim spectral information:\n",
    "\n",
    "* [gammapy.spectrum.SpectrumObservation](..\/api/gammapy.spectrum.SpectrumObservation.rst)\n",
    "* [gammapy.spectrum.SpectrumExtraction](..\/api/gammapy.spectrum.SpectrumExtraction.rst)\n",
    "* [gammapy.background.ReflectedRegionsBackgroundEstimator](..\/api/gammapy.background.ReflectedRegionsBackgroundEstimator.rst)\n",
    "\n",
    "\n",
    "For the global fit (using Sherpa and WSTAT in the background):\n",
    "\n",
    "* [gammapy.spectrum.SpectrumFit](..\/api/gammapy.spectrum.SpectrumFit.rst)\n",
    "* [gammapy.spectrum.models.PowerLaw](..\/api/gammapy.spectrum.models.PowerLaw.rst)\n",
    "* [gammapy.spectrum.models.ExponentialCutoffPowerLaw](..\/api/gammapy.spectrum.models.ExponentialCutoffPowerLaw.rst)\n",
    "* [gammapy.spectrum.models.LogParabola](..\/api/gammapy.spectrum.models.LogParabola.rst)\n",
    "\n",
    "To compute flux points (a.k.a. \"SED\" = \"spectral energy distribution\")\n",
    "\n",
    "* [gammapy.spectrum.SpectrumResult](..\/api/gammapy.spectrum.SpectrumResult.rst)\n",
    "* [gammapy.spectrum.FluxPoints](..\/api/gammapy.spectrum.FluxPoints.rst)\n",
    "* [gammapy.spectrum.SpectrumEnergyGroupMaker](..\/api/gammapy.spectrum.SpectrumEnergyGroupMaker.rst)\n",
    "* [gammapy.spectrum.FluxPointEstimator](..\/api/gammapy.spectrum.FluxPointEstimator.rst)\n",
    "\n",
    "Feedback welcome!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "As usual, we'll start with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gammapy: 0.8.dev6870\n",
      "numpy: 1.16.0.dev0+65f15a5\n",
      "astropy 3.0.3\n",
      "regions 0.2\n",
      "sherpa 4.10.0\n"
     ]
    }
   ],
   "source": [
    "# Check package versions\n",
    "import gammapy\n",
    "import numpy as np\n",
    "import astropy\n",
    "import regions\n",
    "import sherpa\n",
    "\n",
    "print('gammapy:', gammapy.__version__)\n",
    "print('numpy:', np.__version__)\n",
    "print('astropy', astropy.__version__)\n",
    "print('regions', regions.__version__)\n",
    "print('sherpa', sherpa.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import astropy.units as u\n",
    "from astropy.coordinates import SkyCoord, Angle\n",
    "from astropy.table import vstack as vstack_table\n",
    "from regions import CircleSkyRegion\n",
    "from gammapy.data import DataStore, ObservationList\n",
    "from gammapy.data import ObservationStats, ObservationSummary\n",
    "from gammapy.background.reflected import ReflectedRegionsBackgroundEstimator\n",
    "from gammapy.utils.energy import EnergyBounds\n",
    "from gammapy.spectrum import SpectrumExtraction, SpectrumObservation, SpectrumFit, SpectrumResult\n",
    "from gammapy.spectrum.models import PowerLaw, ExponentialCutoffPowerLaw, LogParabola\n",
    "from gammapy.spectrum import FluxPoints, SpectrumEnergyGroupMaker, FluxPointEstimator\n",
    "from gammapy.maps import Map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configure logger\n",
    "\n",
    "Most high level classes in gammapy have the possibility to turn on logging or debug output. We well configure the logger in the following. For more info see https://docs.python.org/2/howto/logging.html#logging-basic-tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup the logger\n",
    "import logging\n",
    "logging.basicConfig()\n",
    "log = logging.getLogger('gammapy.spectrum')\n",
    "log.setLevel(logging.WARNING)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data\n",
    "\n",
    "First, we select and load some H.E.S.S. observations of the Crab nebula (simulated events for now).\n",
    "\n",
    "We will access the events, effective area, energy dispersion, livetime and PSF for containement correction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_DIR = '$GAMMAPY_EXTRA/datasets/hess-crab4-hd-hap-prod2'\n",
    "\n",
    "datastore = DataStore.from_dir(DATA_DIR)\n",
    "obs_ids = [23523, 23526, 23559, 23592]\n",
    "\n",
    "obs_list = datastore.obs_list(obs_ids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Target Region\n",
    "\n",
    "The next step is to define a signal extraction region, also known as on region. In the simplest case this is just a [CircleSkyRegion](http://astropy-regions.readthedocs.io/en/latest/api/regions.CircleSkyRegion.html#regions.CircleSkyRegion), but here we will use the ``Target`` class in gammapy that is useful for book-keeping if you run several analysis in a script."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_position = SkyCoord(ra=83.63, dec=22.01, unit='deg', frame='icrs')\n",
    "on_region_radius = Angle('0.11 deg')\n",
    "on_region = CircleSkyRegion(center=target_position, radius=on_region_radius)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create exclusion mask\n",
    "\n",
    "We will use the reflected regions method to place off regions to estimate the background level in the on region.\n",
    "To make sure the off regions don't contain gamma-ray emission, we create an exclusion mask.\n",
    "\n",
    "Using http://gamma-sky.net/ we find that there's only one known gamma-ray source near the Crab nebula: the AGN called [RGB J0521+212](http://gamma-sky.net/#/cat/tev/23) at GLON = 183.604 deg and GLAT = -8.708 deg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<matplotlib.figure.Figure at 0x7f493d2d07f0>,\n",
       " <matplotlib.axes._subplots.WCSAxesSubplot at 0x7f49367bb128>,\n",
       " None)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f493d2d07f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "exclusion_region = CircleSkyRegion(\n",
    "    center=SkyCoord(183.604, -8.708, unit='deg', frame='galactic'),\n",
    "    radius=0.5 * u.deg,\n",
    ")\n",
    "\n",
    "skydir = target_position.galactic\n",
    "exclusion_mask = Map.create(\n",
    "    npix=(150, 150), binsz=0.05, skydir=skydir,\n",
    "    proj='TAN', coordsys='GAL',\n",
    ")\n",
    "\n",
    "mask = exclusion_mask.geom.region_mask([exclusion_region], inside=False)\n",
    "exclusion_mask.data = mask\n",
    "exclusion_mask.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Estimate background\n",
    "\n",
    "Next we will manually perform a background estimate by placing [reflected regions](..\/background/reflected.rst) around the pointing position and looking at the source statistics. This will result in a  [gammapy.background.BackgroundEstimate](..\/api/gammapy.background.BackgroundEstimate.rst) that serves as input for other classes in gammapy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "background_estimator = ReflectedRegionsBackgroundEstimator(\n",
    "    obs_list=obs_list,\n",
    "    on_region=on_region,\n",
    "    exclusion_mask = exclusion_mask)\n",
    "\n",
    "background_estimator.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(background_estimator.result[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<matplotlib.figure.Figure at 0x7f4935ebc6d8>,\n",
       " <matplotlib.axes._subplots.WCSAxesSubplot at 0x7f4950c9ca20>,\n",
       " None)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4935ebc6d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,8))\n",
    "background_estimator.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Source statistic\n",
    "\n",
    "Next we're going to look at the overall source statistics in our signal region. For more info about what debug plots you can create check out the [ObservationSummary](..\/api/gammapy.data.ObservationSummary.rst#gammapy.data.ObservationSummary) class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Observation summary report ***\n",
      "Observation Id: 23526\n",
      "Livetime: 0.437 h\n",
      "On events: 168\n",
      "Off events: 70\n",
      "Alpha: 0.083\n",
      "Bkg events in On region: 5.83\n",
      "Excess: 162.17\n",
      "Excess / Background: 27.80\n",
      "Gamma rate: 6.41 1 / min\n",
      "Bkg rate: 0.22 1 / min\n",
      "Sigma: 24.18\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4935d985c0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4935e02160>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stats = []\n",
    "for obs, bkg in zip(obs_list, background_estimator.result):\n",
    "    stats.append(ObservationStats.from_obs(obs, bkg))\n",
    "    \n",
    "print(stats[1])\n",
    "\n",
    "obs_summary = ObservationSummary(stats)\n",
    "fig = plt.figure(figsize=(10,6))\n",
    "ax1=fig.add_subplot(121)\n",
    "\n",
    "obs_summary.plot_excess_vs_livetime(ax=ax1)\n",
    "ax2=fig.add_subplot(122)\n",
    "obs_summary.plot_significance_vs_livetime(ax=ax2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Extract spectrum\n",
    "\n",
    "Now, we're going to extract a spectrum using the [SpectrumExtraction](..\/api/gammapy.spectrum.SpectrumExtraction.rst) class. We provide the reconstructed energy binning we want to use. It is expected to be a Quantity with unit energy, i.e. an array with an energy unit. We use a utility function to create it. We also provide the true energy binning to use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_reco = EnergyBounds.equal_log_spacing(0.1, 40, 40, unit='TeV')\n",
    "e_true = EnergyBounds.equal_log_spacing(0.05, 100., 200, unit='TeV')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instantiate a [SpectrumExtraction](..\/api/gammapy.spectrum.SpectrumExtraction.rst) object that will do the extraction. The containment_correction parameter is there to allow for PSF leakage correction if one is working with full enclosure IRFs. We also compute a threshold energy and store the result in OGIP compliant files (pha, rmf, arf). This last step might be omitted though."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Observation summary report ***\n",
      "Observation Id: 23523\n",
      "Livetime: 0.439 h\n",
      "On events: 139\n",
      "Off events: 48\n",
      "Alpha: 0.083\n",
      "Bkg events in On region: 4.00\n",
      "Excess: 135.00\n",
      "Excess / Background: 33.75\n",
      "Gamma rate: 0.09 1 / s\n",
      "Bkg rate: 0.00 1 / min\n",
      "Sigma: 22.53\n",
      "energy range: 0.68 TeV - 100.00 TeV\n"
     ]
    }
   ],
   "source": [
    "ANALYSIS_DIR = 'crab_analysis'\n",
    "\n",
    "extraction = SpectrumExtraction(\n",
    "    obs_list=obs_list,\n",
    "    bkg_estimate=background_estimator.result,\n",
    "    containment_correction=False,\n",
    ")\n",
    "extraction.run()\n",
    "\n",
    "# Add a condition on correct energy range in case it is not set by default\n",
    "extraction.compute_energy_threshold(method_lo='area_max', area_percent_lo=10.0)\n",
    "\n",
    "print(extraction.observations[0])\n",
    "# Write output in the form of OGIP files: PHA, ARF, RMF, BKG\n",
    "# extraction.run(obs_list=obs_list, bkg_estimate=background_estimator.result, outdir=ANALYSIS_DIR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Look at observations\n",
    "\n",
    "Now we will look at the files we just created. We will use the [SpectrumObservation](..\/api/gammapy.spectrum.SpectrumObservation.rst) object that are still in memory from the extraction step. Note, however, that you could also read them from disk if you have written them in the step above . The ``ANALYSIS_DIR`` folder contains 4 ``FITS`` files for each observation. These files are described in detail at https://gamma-astro-data-formats.readthedocs.io/en/latest/ogip/index.html. In short they correspond to the on vector, the off vector, the effectie area, and the energy dispersion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4935fe25f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#filename = ANALYSIS_DIR + '/ogip_data/pha_obs23523.fits'\n",
    "#obs = SpectrumObservation.read(filename)\n",
    "\n",
    "# Requires IPython widgets\n",
    "#_ = extraction.observations.peek()\n",
    "\n",
    "extraction.observations[0].peek()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit spectrum\n",
    "\n",
    "Now we'll fit a global model to the spectrum. First we do a joint likelihood fit to all observations. If you want to stack the observations see below. We will also produce a debug plot in order to show how the global fit matches one of the individual observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 192.12261834907127</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 45</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 45</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 3.2610608604528247e-09</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#WaAekVoZLT').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>par_000_index</td>\n",
       "                <td>2.17735</td>\n",
       "                <td>0.0443972</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>par_001_amplitude</td>\n",
       "                <td>0.201051</td>\n",
       "                <td>0.0101986</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>par_002_reference</td>\n",
       "                <td>1</td>\n",
       "                <td>1</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"WaAekVoZLT\" style=\"display:none;\">\n",
       "            <textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & par $000_{index}$ & 2.177e+00 & 4.440e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "2 & par $001_{amplitude}$ & 2.011e-01 & 1.020e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & par $002_{reference}$ & 1.000e+00 & 1.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = PowerLaw(\n",
    "    index=2 * u.Unit(''),\n",
    "    amplitude=2e-11 * u.Unit('cm-2 s-1 TeV-1'),\n",
    "    reference=1 * u.TeV,\n",
    ")\n",
    "\n",
    "joint_fit = SpectrumFit(obs_list=extraction.observations, model=model)\n",
    "\n",
    "joint_fit.fit()\n",
    "joint_fit.est_errors()\n",
    "#fit.run(outdir = ANALYSIS_DIR)\n",
    "\n",
    "joint_result = joint_fit.result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/hfm/adonath/github/adonath/gammapy/gammapy/spectrum/core.py:166: RuntimeWarning: invalid value encountered in sqrt\n",
      "  yerr = np.sqrt(counts) if show_poisson_errors else 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fit result info \n",
      "--------------- \n",
      "Model: PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value     error         unit         min    max\n",
      "\t--------- --------- --------- --------------- --------- ---\n",
      "\t    index 2.177e+00 4.440e-02                       nan nan\n",
      "\tamplitude 2.011e-11 1.020e-12 1 / (cm2 s TeV)       nan nan\n",
      "\treference 1.000e+00 0.000e+00             TeV 0.000e+00 nan\n",
      "\n",
      "Covariance: \n",
      "\n",
      "\t   name           index                amplitude        reference\n",
      "\t--------- ---------------------- ---------------------- ---------\n",
      "\t    index  0.0019711125245443425 2.2041623118932997e-14       0.0\n",
      "\tamplitude 2.2041623118932997e-14 1.0401220287176485e-24       0.0\n",
      "\treference                    0.0                    0.0       0.0 \n",
      "\n",
      "Statistic: 34.711 (wstat)\n",
      "Fit Range: [  0.68129207 100.        ] TeV\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f493587ce80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax0, ax1 = joint_result[0].plot(figsize=(8,8))\n",
    "ax0.set_ylim(0, 20)\n",
    "print(joint_result[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute Flux Points\n",
    "\n",
    "To round up out analysis we can compute flux points by fitting the norm of the global model in energy bands. We'll use a fixed energy binning for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SpectrumEnergyGroups:\n",
      "energy_group_idx bin_idx_min bin_idx_max  bin_type      energy_min          energy_max    \n",
      "                                                           TeV                 TeV        \n",
      "---------------- ----------- ----------- --------- ------------------- -------------------\n",
      "               0           0          26 underflow                0.01 0.31622776601683794\n",
      "               1          27          36    normal 0.31622776601683794  1.1364636663857242\n",
      "               2          37          44    normal  1.1364636663857242  3.1622776601683795\n",
      "               3          45          53    normal  3.1622776601683795                10.0\n",
      "               4          54          62    normal                10.0  31.622776601683793\n",
      "               5          63          71  overflow  31.622776601683793               100.0\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Define energy binning\n",
    "ebounds = [0.3, 1.1, 3, 10.1, 30] * u.TeV\n",
    "\n",
    "stacked_obs = extraction.observations.stack()\n",
    "\n",
    "seg = SpectrumEnergyGroupMaker(obs=stacked_obs)\n",
    "seg.compute_groups_fixed(ebounds=ebounds)\n",
    "\n",
    "print(seg.groups)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 27.72505640738217</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 23</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 23</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 5.593091309622754e-05</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#LacTkuCDmj').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>par_000_index</td>\n",
       "                <td>2.17735</td>\n",
       "                <td>0.0443972</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>par_001_amplitude</td>\n",
       "                <td>0.543612</td>\n",
       "                <td>0.0385834</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>par_002_reference</td>\n",
       "                <td>0.599484</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"LacTkuCDmj\" style=\"display:none;\">\n",
       "            <textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & par $000_{index}$ & 2.177e+00 & 4.440e-02 &  &  &  &  & FIXED\\\\\n",
       "\\hline\n",
       "2 & par $001_{amplitude}$ & 5.436e-01 & 3.858e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & par $002_{reference}$ & 5.995e-01 & 0.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 5.067687670617161</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 50</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 50</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 1.194722808297817e-07</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#fsqkfaIelF').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>par_000_index</td>\n",
       "                <td>2.17735</td>\n",
       "                <td>0.0443972</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>par_001_amplitude</td>\n",
       "                <td>0.0606801</td>\n",
       "                <td>0.0042341</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>par_002_reference</td>\n",
       "                <td>1.89574</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"fsqkfaIelF\" style=\"display:none;\">\n",
       "            <textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & par $000_{index}$ & 2.177e+00 & 4.440e-02 &  &  &  &  & FIXED\\\\\n",
       "\\hline\n",
       "2 & par $001_{amplitude}$ & 6.068e-02 & 4.234e-03 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & par $002_{reference}$ & 1.896e+00 & 0.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 15.1545840395334</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 70</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 70</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 7.300997491286103e-10</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#OdqOFhoHFv').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>par_000_index</td>\n",
       "                <td>2.17735</td>\n",
       "                <td>0.0443972</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>par_001_amplitude</td>\n",
       "                <td>0.00486985</td>\n",
       "                <td>0.000529319</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>par_002_reference</td>\n",
       "                <td>5.62341</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"OdqOFhoHFv\" style=\"display:none;\">\n",
       "            <textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & par $000_{index}$ & 2.177e+00 & 4.440e-02 &  &  &  &  & FIXED\\\\\n",
       "\\hline\n",
       "2 & par $001_{amplitude}$ & 4.870e-03 & 5.293e-04 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & par $002_{reference}$ & 5.623e+00 & 0.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 9.685075852138072</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 116</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 116</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 8.424910894392727e-08</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#mfuHCauhIa').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>par_000_index</td>\n",
       "                <td>2.17735</td>\n",
       "                <td>0.0443972</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>par_001_amplitude</td>\n",
       "                <td>0.000274219</td>\n",
       "                <td>6.18287e-05</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>par_002_reference</td>\n",
       "                <td>17.7828</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"mfuHCauhIa\" style=\"display:none;\">\n",
       "            <textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & par $000_{index}$ & 2.177e+00 & 4.440e-02 &  &  &  &  & FIXED\\\\\n",
       "\\hline\n",
       "2 & par $001_{amplitude}$ & 2.742e-04 & 6.183e-05 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & par $002_{reference}$ & 1.778e+01 & 0.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpe = FluxPointEstimator(\n",
    "    obs=stacked_obs,\n",
    "    groups=seg.groups,\n",
    "    model=joint_result[0].model,\n",
    ")\n",
    "fpe.compute_points()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=4</i>\n",
       "<table id=\"table139952407069528\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>e_ref</th><th>e_min</th><th>e_max</th><th>dnde</th><th>dnde_err</th><th>dnde_ul</th><th>is_ul</th><th>sqrt_ts</th><th>dnde_errp</th><th>dnde_errn</th></tr></thead>\n",
       "<thead><tr><th>TeV</th><th>TeV</th><th>TeV</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th><th></th><th></th><th>1 / (cm2 s TeV)</th><th>1 / (cm2 s TeV)</th></tr></thead>\n",
       "<thead><tr><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>bool</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>\n",
       "<tr><td>0.5994842503189408</td><td>0.31622776601683794</td><td>1.1364636663857242</td><td>5.4361211860700376e-11</td><td>3.858342065561906e-12</td><td>6.253497811942222e-11</td><td>False</td><td>28.99215095532436</td><td>3.891540614006588e-12</td><td>3.865842298407796e-12</td></tr>\n",
       "<tr><td>1.8957356524063753</td><td>1.1364636663857242</td><td>3.1622776601683795</td><td>6.068009834273361e-12</td><td>4.234097839406054e-13</td><td>6.95920307528216e-12</td><td>False</td><td>30.851202827948235</td><td>4.4475818013779324e-13</td><td>4.2394856989674153e-13</td></tr>\n",
       "<tr><td>5.623413251903491</td><td>3.1622776601683795</td><td>10.0</td><td>4.869847125060083e-13</td><td>5.293191177782862e-14</td><td>5.991063404314755e-13</td><td>False</td><td>19.537446472755406</td><td>5.381169619284784e-14</td><td>5.1742940462665775e-14</td></tr>\n",
       "<tr><td>17.78279410038923</td><td>10.0</td><td>31.622776601683793</td><td>2.7421872223185665e-14</td><td>6.182869965862286e-15</td><td>4.159279388521472e-14</td><td>False</td><td>9.29830505133507</td><td>6.5686654669582465e-15</td><td>5.7318149583502736e-15</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=4>\n",
       "      e_ref               e_min        ...       dnde_errn       \n",
       "       TeV                 TeV         ...    1 / (cm2 s TeV)    \n",
       "     float64             float64       ...        float64        \n",
       "------------------ ------------------- ... ----------------------\n",
       "0.5994842503189408 0.31622776601683794 ...  3.865842298407796e-12\n",
       "1.8957356524063753  1.1364636663857242 ... 4.2394856989674153e-13\n",
       " 5.623413251903491  3.1622776601683795 ... 5.1742940462665775e-14\n",
       " 17.78279410038923                10.0 ... 5.7318149583502736e-15"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f49356ca470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpe.flux_points.plot()\n",
    "fpe.flux_points.table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The final plot with the best fit model and the flux points can be quickly made like this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4, 50)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4935968da0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spectrum_result = SpectrumResult(\n",
    "    points=fpe.flux_points,\n",
    "    model=joint_result[0].model,\n",
    ")\n",
    "ax0, ax1 = spectrum_result.plot(\n",
    "    energy_range=joint_fit.result[0].fit_range,\n",
    "    energy_power=2, flux_unit='erg-1 cm-2 s-1',\n",
    "    fig_kwargs=dict(figsize=(8,8)),\n",
    "    point_kwargs=dict(color='navy')\n",
    ")\n",
    "\n",
    "ax0.set_xlim(0.4, 50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stack observations\n",
    "\n",
    "And alternative approach to fitting the spectrum is stacking all observations first and the fitting a model to the stacked observation. This works as follows. A comparison to the joint likelihood fit is also printed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td title=\"Minimum value of function\">FCN = 82.02876916301891</td>\n",
       "                <td title=\"Total number of call to FCN so far\">TOTAL NCALL = 27</td>\n",
       "                <td title=\"Number of call in last migrad\">NCALLS = 27</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td title=\"Estimated distance to minimum\">EDM = 1.6189944909262913e-08</td>\n",
       "                <td title=\"Maximum EDM definition of convergence\">GOAL EDM = 1e-05</td>\n",
       "                <td title=\"Error def. Amount of increase in FCN to be defined as 1 standard deviation\">\n",
       "                UP = 1.0</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        \n",
       "        <table>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Validity of the migrad call\">Valid</td>\n",
       "                <td align=\"center\" title=\"Validity of parameters\">Valid Param</td>\n",
       "                <td align=\"center\" title=\"Is Covariance matrix accurate?\">Accurate Covar</td>\n",
       "                <td align=\"center\" title=\"Positive definiteness of covariance matrix\">PosDef</td>\n",
       "                <td align=\"center\" title=\"Was covariance matrix made posdef by adding diagonal element\">Made PosDef</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" title=\"Was last hesse call fail?\">Hesse Fail</td>\n",
       "                <td align=\"center\" title=\"Validity of covariance\">HasCov</td>\n",
       "                <td align=\"center\" title=\"Is EDM above goal EDM?\">Above EDM</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" title=\"Did last migrad call reach max call limit?\">Reach calllim</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">True</td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "                <td align=\"center\"></td>\n",
       "                <td align=\"center\" style=\"background-color:#92CCA6\">False</td>\n",
       "            </tr>\n",
       "        </table>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <table>\n",
       "            <tr>\n",
       "                <td><a href=\"#\" onclick=\"$('#QrvvWOKhCB').toggle()\">+</a></td>\n",
       "                <td title=\"Variable name\">Name</td>\n",
       "                <td title=\"Value of parameter\">Value</td>\n",
       "                <td title=\"Parabolic error\">Parab Error</td>\n",
       "                <td title=\"Minos lower error\">Minos Error-</td>\n",
       "                <td title=\"Minos upper error\">Minos Error+</td>\n",
       "                <td title=\"Lower limit of the parameter\">Limit-</td>\n",
       "                <td title=\"Upper limit of the parameter\">Limit+</td>\n",
       "                <td title=\"Is the parameter fixed in the fit\">FIXED</td>\n",
       "            </tr>\n",
       "        \n",
       "            <tr>\n",
       "                <td>1</td>\n",
       "                <td>par_000_index</td>\n",
       "                <td>2.17716</td>\n",
       "                <td>0.0443526</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>2</td>\n",
       "                <td>par_001_amplitude</td>\n",
       "                <td>0.201094</td>\n",
       "                <td>0.0102002</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "                <td></td>\n",
       "            </tr>\n",
       "            \n",
       "            <tr>\n",
       "                <td>3</td>\n",
       "                <td>par_002_reference</td>\n",
       "                <td>1</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0</td>\n",
       "                <td>0.0</td>\n",
       "                <td></td>\n",
       "                <td>FIXED</td>\n",
       "            </tr>\n",
       "            \n",
       "            </table>\n",
       "        \n",
       "            <pre id=\"QrvvWOKhCB\" style=\"display:none;\">\n",
       "            <textarea rows=\"12\" cols=\"50\" onclick=\"this.select()\" readonly>\\begin{tabular}{|c|r|r|r|r|r|r|r|c|}\n",
       "\\hline\n",
       " & Name & Value & Para Error & Error+ & Error- & Limit+ & Limit- & FIXED\\\\\n",
       "\\hline\n",
       "1 & par $000_{index}$ & 2.177e+00 & 4.435e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "2 & par $001_{amplitude}$ & 2.011e-01 & 1.020e-02 &  &  &  &  & \\\\\n",
       "\\hline\n",
       "3 & par $002_{reference}$ & 1.000e+00 & 0.000e+00 &  &  & 0.000e+00 & 0.000e+00 & FIXED\\\\\n",
       "\\hline\n",
       "\\end{tabular}</textarea>\n",
       "            </pre>\n",
       "            "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<hr>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fit result info \n",
      "--------------- \n",
      "Model: PowerLaw\n",
      "\n",
      "Parameters: \n",
      "\n",
      "\t   name     value     error         unit         min    max\n",
      "\t--------- --------- --------- --------------- --------- ---\n",
      "\t    index 2.177e+00 4.435e-02                       nan nan\n",
      "\tamplitude 2.011e-11 1.020e-12 1 / (cm2 s TeV)       nan nan\n",
      "\treference 1.000e+00 0.000e+00             TeV 0.000e+00 nan\n",
      "\n",
      "Covariance: \n",
      "\n",
      "\t   name           index                amplitude        reference\n",
      "\t--------- ---------------------- ---------------------- ---------\n",
      "\t    index  0.0019671545350380365 2.2049405177420073e-14       0.0\n",
      "\tamplitude 2.2049405177420073e-14 1.0404393839774619e-24       0.0\n",
      "\treference                    0.0                    0.0       0.0 \n",
      "\n",
      "Statistic: 82.029 (wstat)\n",
      "Fit Range: [  0.46415888 100.        ] TeV\n",
      "\n",
      " method index index_err    amplitude     amplitude_err \n",
      "                        1 / (cm2 s TeV) 1 / (cm2 s TeV)\n",
      "------- ----- --------- --------------- ---------------\n",
      "stacked  2.18    0.0444        2.01e-11        1.02e-12\n",
      "  joint  2.18    0.0444        2.01e-11        1.02e-12\n"
     ]
    }
   ],
   "source": [
    "stacked_obs = extraction.observations.stack()\n",
    "\n",
    "stacked_fit = SpectrumFit(obs_list=stacked_obs, model=model)\n",
    "stacked_fit.fit()\n",
    "stacked_fit.est_errors()\n",
    "\n",
    "\n",
    "stacked_result = stacked_fit.result\n",
    "print(stacked_result[0])\n",
    "\n",
    "stacked_table = stacked_result[0].to_table(format='.3g')\n",
    "stacked_table['method'] = 'stacked'\n",
    "joint_table = joint_result[0].to_table(format='.3g')\n",
    "joint_table['method'] = 'joint'\n",
    "total_table = vstack_table([stacked_table, joint_table])\n",
    "print(total_table['method', 'index', 'index_err', 'amplitude', 'amplitude_err'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "Some things we might do:\n",
    "\n",
    "- Fit a different spectral model (ECPL or CPL or ...)\n",
    "- Use different method or parameters to compute the flux points\n",
    "- Do a chi^2 fit to the flux points and compare\n",
    "\n",
    "TODO: give pointers how to do this (and maybe write a notebook with solutions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Start exercises here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## What next?\n",
    "\n",
    "In this tutorial we learned how to extract counts spectra from an event list and generate the corresponding IRFs. Then we fitted a model to the observations and also computed flux points.\n",
    "\n",
    "Here's some suggestions where to go next:\n",
    "\n",
    "* if you want think this is way too complicated and just want to run a quick analysis check out [this notebook](spectrum_pipe.ipynb)\n",
    "* if you interested in available fit statistics checkout [gammapy.stats](..\/stats/index.rst)\n",
    "* if you want to simulate spectral look at [this tutorial](..\/spectrum/simulation.rst)\n",
    "* if you want to compare your spectra to e.g. Fermi spectra published in catalogs have a look at [this](..\/spectrum/plotting_fermi_spectra.rst)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
