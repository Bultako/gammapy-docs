{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<script type=\"text/javascript\" src=\"../_static/linksdl.js\"></script>\n",
    "<div class='alert alert-info'>\n",
    "**This is a fixed-text formatted version of a Jupyter notebook.**\n",
    "\n",
    "- Try online [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/gammapy/gammapy-extra/master?urlpath=lab)\n",
    " and then double-click on **cta_sensitivity.ipynb** file.\n",
    "- You can also contribute with your own notebooks in this\n",
    "[GitHub repository](https://github.com/gammapy/gammapy-extra/tree/master/notebooks).\n",
    "- **Source files:**\n",
    "[cta_sensitivity.ipynb](../_static/notebooks/cta_sensitivity.ipynb) |\n",
    "[cta_sensitivity.py](../_static/notebooks/cta_sensitivity.py)\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Computation of the CTA sensitivity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "This notebook explains how to derive the CTA sensitivity for a point-like IRF at a fixed zenith angle and fixed offset. The significativity is computed for the 1D analysis (On-OFF regions) and the LiMa formula.\n",
    "\n",
    "We will be using the following Gammapy classes:\n",
    "\n",
    "* [gammapy.irf.CTAIrf](..\/api/gammapy.irf.CTAIrf.rst)\n",
    "* [gammapy.spectrum.SensitivityEstimator](..\/api/gammapy.spectrum.SensitivityEstimator.rst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "As usual, we'll start with some setup ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gammapy.irf import CTAPerf\n",
    "from gammapy.spectrum import SensitivityEstimator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load IRFs\n",
    "\n",
    "First import the CTA IRFs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/deil/software/anaconda3/envs/gammapy-dev/lib/python3.6/site-packages/astropy/units/quantity.py:639: RuntimeWarning: invalid value encountered in true_divide\n",
      "  result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "filename = '$GAMMAPY_EXTRA/datasets/cta/perf_prod2/point_like_non_smoothed/South_5h.fits.gz'\n",
    "irf = CTAPerf.read(filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute sensitivity\n",
    "\n",
    "Choose a few parameters, then run the sentitivity computation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "sens = SensitivityEstimator(\n",
    "    irf=irf,\n",
    "    livetime='5h',\n",
    ")\n",
    "sens.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Print and plot the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ENERGY            FLUX         \n",
      "    TeV         erg / (cm2 s)     \n",
      "----------- ----------------------\n",
      "0.015848933  1.265689381204479e-10\n",
      "0.025118865 2.4123499127545202e-11\n",
      "0.039810717  1.591399267815591e-11\n",
      " 0.06309573  4.267142041868311e-12\n",
      "        0.1 3.0445372299444074e-12\n",
      " 0.15848933  1.553676402532959e-12\n",
      " 0.25118864 1.0770960555265993e-12\n",
      " 0.39810714  7.832358940563628e-13\n",
      "  0.6309573  5.938073879545129e-13\n",
      "        1.0 4.2875940141105596e-13\n",
      "  1.5848932 3.6285184450653055e-13\n",
      "  2.5118864  3.212565097862236e-13\n",
      "  3.9810715  3.391524766517475e-13\n",
      "   6.309573  3.951098391300483e-13\n",
      "       10.0  5.184815854344552e-13\n",
      "  15.848931  8.365662980458095e-13\n",
      "  25.118862 1.2677100480242012e-12\n",
      "   39.81071 2.0089332372979073e-12\n",
      "  63.095726 3.2424648871487123e-12\n",
      "   99.99999  5.102125664442202e-12\n",
      "   158.4893  9.048305001092968e-12\n"
     ]
    }
   ],
   "source": [
    "sens.print_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1221e55898>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sens.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<i>Table length=21</i>\n",
       "<table id=\"table4800355800\" class=\"table-striped table-bordered table-condensed\">\n",
       "<thead><tr><th>ENERGY</th><th>FLUX</th></tr></thead>\n",
       "<thead><tr><th>TeV</th><th>erg / (cm2 s)</th></tr></thead>\n",
       "<thead><tr><th>float32</th><th>float64</th></tr></thead>\n",
       "<tr><td>0.015848933</td><td>1.265689381204479e-10</td></tr>\n",
       "<tr><td>0.025118865</td><td>2.4123499127545202e-11</td></tr>\n",
       "<tr><td>0.039810717</td><td>1.591399267815591e-11</td></tr>\n",
       "<tr><td>0.06309573</td><td>4.267142041868311e-12</td></tr>\n",
       "<tr><td>0.1</td><td>3.0445372299444074e-12</td></tr>\n",
       "<tr><td>0.15848933</td><td>1.553676402532959e-12</td></tr>\n",
       "<tr><td>0.25118864</td><td>1.0770960555265993e-12</td></tr>\n",
       "<tr><td>0.39810714</td><td>7.832358940563628e-13</td></tr>\n",
       "<tr><td>0.6309573</td><td>5.938073879545129e-13</td></tr>\n",
       "<tr><td>1.0</td><td>4.2875940141105596e-13</td></tr>\n",
       "<tr><td>1.5848932</td><td>3.6285184450653055e-13</td></tr>\n",
       "<tr><td>2.5118864</td><td>3.212565097862236e-13</td></tr>\n",
       "<tr><td>3.9810715</td><td>3.391524766517475e-13</td></tr>\n",
       "<tr><td>6.309573</td><td>3.951098391300483e-13</td></tr>\n",
       "<tr><td>10.0</td><td>5.184815854344552e-13</td></tr>\n",
       "<tr><td>15.848931</td><td>8.365662980458095e-13</td></tr>\n",
       "<tr><td>25.118862</td><td>1.2677100480242012e-12</td></tr>\n",
       "<tr><td>39.81071</td><td>2.0089332372979073e-12</td></tr>\n",
       "<tr><td>63.095726</td><td>3.2424648871487123e-12</td></tr>\n",
       "<tr><td>99.99999</td><td>5.102125664442202e-12</td></tr>\n",
       "<tr><td>158.4893</td><td>9.048305001092968e-12</td></tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<Table length=21>\n",
       "   ENERGY            FLUX         \n",
       "    TeV         erg / (cm2 s)     \n",
       "  float32          float64        \n",
       "----------- ----------------------\n",
       "0.015848933  1.265689381204479e-10\n",
       "0.025118865 2.4123499127545202e-11\n",
       "0.039810717  1.591399267815591e-11\n",
       " 0.06309573  4.267142041868311e-12\n",
       "        0.1 3.0445372299444074e-12\n",
       " 0.15848933  1.553676402532959e-12\n",
       " 0.25118864 1.0770960555265993e-12\n",
       " 0.39810714  7.832358940563628e-13\n",
       "  0.6309573  5.938073879545129e-13\n",
       "        1.0 4.2875940141105596e-13\n",
       "  1.5848932 3.6285184450653055e-13\n",
       "  2.5118864  3.212565097862236e-13\n",
       "  3.9810715  3.391524766517475e-13\n",
       "   6.309573  3.951098391300483e-13\n",
       "       10.0  5.184815854344552e-13\n",
       "  15.848931  8.365662980458095e-13\n",
       "  25.118862 1.2677100480242012e-12\n",
       "   39.81071 2.0089332372979073e-12\n",
       "  63.095726 3.2424648871487123e-12\n",
       "   99.99999  5.102125664442202e-12\n",
       "   158.4893  9.048305001092968e-12"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This will give you the results as an Astropy table,\n",
    "# which you can save to FITS or CSV or use for further analysis\n",
    "sens.diff_sensi_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises\n",
    "\n",
    "* Also compute the sensitivity for a 20 hour observation\n",
    "* Compare how the sensitivity differs between 5 and 20 hours by plotting the ratio as a function of energy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  },
  "nbsphinx": {
   "orphan": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
